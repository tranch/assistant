// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SystemSvcClient is the client API for SystemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemSvcClient interface {
	CreateCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	GetCounters(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CountersReply, error)
	ChangeCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	ResetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	GetCounterByFlag(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
}

type systemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemSvcClient(cc grpc.ClientConnInterface) SystemSvcClient {
	return &systemSvcClient{cc}
}

func (c *systemSvcClient) CreateCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/CreateCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) GetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/GetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) GetCounters(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CountersReply, error) {
	out := new(CountersReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/GetCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ChangeCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/ChangeCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ResetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/ResetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) GetCounterByFlag(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.SystemSvc/GetCounterByFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemSvcServer is the server API for SystemSvc service.
// All implementations should embed UnimplementedSystemSvcServer
// for forward compatibility
type SystemSvcServer interface {
	CreateCounter(context.Context, *CounterRequest) (*StateReply, error)
	GetCounter(context.Context, *CounterRequest) (*CounterReply, error)
	GetCounters(context.Context, *CounterRequest) (*CountersReply, error)
	ChangeCounter(context.Context, *CounterRequest) (*CounterReply, error)
	ResetCounter(context.Context, *CounterRequest) (*CounterReply, error)
	GetCounterByFlag(context.Context, *CounterRequest) (*CounterReply, error)
}

// UnimplementedSystemSvcServer should be embedded to have forward compatible implementations.
type UnimplementedSystemSvcServer struct {
}

func (UnimplementedSystemSvcServer) CreateCounter(context.Context, *CounterRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounter not implemented")
}
func (UnimplementedSystemSvcServer) GetCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounter not implemented")
}
func (UnimplementedSystemSvcServer) GetCounters(context.Context, *CounterRequest) (*CountersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedSystemSvcServer) ChangeCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCounter not implemented")
}
func (UnimplementedSystemSvcServer) ResetCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCounter not implemented")
}
func (UnimplementedSystemSvcServer) GetCounterByFlag(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterByFlag not implemented")
}

// UnsafeSystemSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemSvcServer will
// result in compilation errors.
type UnsafeSystemSvcServer interface {
	mustEmbedUnimplementedSystemSvcServer()
}

func RegisterSystemSvcServer(s *grpc.Server, srv SystemSvcServer) {
	s.RegisterService(&_SystemSvc_serviceDesc, srv)
}

func _SystemSvc_CreateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).CreateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/CreateCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).CreateCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_GetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/GetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/GetCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetCounters(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ChangeCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ChangeCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/ChangeCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ChangeCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ResetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ResetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/ResetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ResetCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_GetCounterByFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetCounterByFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemSvc/GetCounterByFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetCounterByFlag(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SystemSvc",
	HandlerType: (*SystemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCounter",
			Handler:    _SystemSvc_CreateCounter_Handler,
		},
		{
			MethodName: "GetCounter",
			Handler:    _SystemSvc_GetCounter_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _SystemSvc_GetCounters_Handler,
		},
		{
			MethodName: "ChangeCounter",
			Handler:    _SystemSvc_ChangeCounter_Handler,
		},
		{
			MethodName: "ResetCounter",
			Handler:    _SystemSvc_ResetCounter_Handler,
		},
		{
			MethodName: "GetCounterByFlag",
			Handler:    _SystemSvc_GetCounterByFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
