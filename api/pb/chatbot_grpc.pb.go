// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatbotSvcClient is the client API for ChatbotSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatbotSvcClient interface {
	Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error)
	Register(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error)
	GetBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*BotsReply, error)
	CreateGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*BotSettingReply, error)
	GetGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingReply, error)
	GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupsReply, error)
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupReply, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type chatbotSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatbotSvcClient(cc grpc.ClientConnInterface) ChatbotSvcClient {
	return &chatbotSvcClient{cc}
}

func (c *chatbotSvcClient) Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error) {
	out := new(ChatbotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) Register(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error) {
	out := new(BotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*BotsReply, error) {
	out := new(BotsReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CreateGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CreateGroupBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) DeleteGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/DeleteGroupBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroupBotSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroupSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*BotSettingReply, error) {
	out := new(BotSettingReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroupBotSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingReply, error) {
	out := new(GroupSettingReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroupSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupsReply, error) {
	out := new(GroupsReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupReply, error) {
	out := new(GroupReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatbotSvcServer is the server API for ChatbotSvc service.
// All implementations should embed UnimplementedChatbotSvcServer
// for forward compatibility
type ChatbotSvcServer interface {
	Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error)
	Register(context.Context, *BotRequest) (*StateReply, error)
	GetBot(context.Context, *BotRequest) (*BotReply, error)
	GetBots(context.Context, *BotsRequest) (*BotsReply, error)
	CreateGroupBot(context.Context, *GroupBotRequest) (*StateReply, error)
	DeleteGroupBot(context.Context, *GroupBotRequest) (*StateReply, error)
	UpdateGroupBotSetting(context.Context, *BotSettingRequest) (*StateReply, error)
	UpdateGroupSetting(context.Context, *GroupSettingRequest) (*StateReply, error)
	GetGroupBotSetting(context.Context, *BotSettingRequest) (*BotSettingReply, error)
	GetGroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingReply, error)
	GetGroups(context.Context, *GroupRequest) (*GroupsReply, error)
	CreateGroup(context.Context, *GroupRequest) (*StateReply, error)
	GetGroup(context.Context, *GroupRequest) (*GroupReply, error)
	DeleteGroup(context.Context, *GroupRequest) (*StateReply, error)
	UpdateGroup(context.Context, *GroupRequest) (*StateReply, error)
}

// UnimplementedChatbotSvcServer should be embedded to have forward compatible implementations.
type UnimplementedChatbotSvcServer struct {
}

func (UnimplementedChatbotSvcServer) Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedChatbotSvcServer) Register(context.Context, *BotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedChatbotSvcServer) GetBot(context.Context, *BotRequest) (*BotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedChatbotSvcServer) GetBots(context.Context, *BotsRequest) (*BotsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBots not implemented")
}
func (UnimplementedChatbotSvcServer) CreateGroupBot(context.Context, *GroupBotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupBot not implemented")
}
func (UnimplementedChatbotSvcServer) DeleteGroupBot(context.Context, *GroupBotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupBot not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroupBotSetting(context.Context, *BotSettingRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupBotSetting not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroupSetting(context.Context, *GroupSettingRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroupBotSetting(context.Context, *BotSettingRequest) (*BotSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupBotSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroups(context.Context, *GroupRequest) (*GroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedChatbotSvcServer) CreateGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroup(context.Context, *GroupRequest) (*GroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedChatbotSvcServer) DeleteGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}

// UnsafeChatbotSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatbotSvcServer will
// result in compilation errors.
type UnsafeChatbotSvcServer interface {
	mustEmbedUnimplementedChatbotSvcServer()
}

func RegisterChatbotSvcServer(s grpc.ServiceRegistrar, srv ChatbotSvcServer) {
	s.RegisterService(&ChatbotSvc_ServiceDesc, srv)
}

func _ChatbotSvc_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Handle(ctx, req.(*ChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Register(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBot(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBots(ctx, req.(*BotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CreateGroupBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CreateGroupBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CreateGroupBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CreateGroupBot(ctx, req.(*GroupBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_DeleteGroupBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).DeleteGroupBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/DeleteGroupBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).DeleteGroupBot(ctx, req.(*GroupBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroupBotSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroupBotSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroupBotSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroupBotSetting(ctx, req.(*BotSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroupSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroupSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroupSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroupSetting(ctx, req.(*GroupSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroupBotSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroupBotSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroupBotSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroupBotSetting(ctx, req.(*BotSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroupSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroupSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroupSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroupSetting(ctx, req.(*GroupSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroups(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatbotSvc_ServiceDesc is the grpc.ServiceDesc for ChatbotSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatbotSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatbotSvc",
	HandlerType: (*ChatbotSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _ChatbotSvc_Handle_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ChatbotSvc_Register_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _ChatbotSvc_GetBot_Handler,
		},
		{
			MethodName: "GetBots",
			Handler:    _ChatbotSvc_GetBots_Handler,
		},
		{
			MethodName: "CreateGroupBot",
			Handler:    _ChatbotSvc_CreateGroupBot_Handler,
		},
		{
			MethodName: "DeleteGroupBot",
			Handler:    _ChatbotSvc_DeleteGroupBot_Handler,
		},
		{
			MethodName: "UpdateGroupBotSetting",
			Handler:    _ChatbotSvc_UpdateGroupBotSetting_Handler,
		},
		{
			MethodName: "UpdateGroupSetting",
			Handler:    _ChatbotSvc_UpdateGroupSetting_Handler,
		},
		{
			MethodName: "GetGroupBotSetting",
			Handler:    _ChatbotSvc_GetGroupBotSetting_Handler,
		},
		{
			MethodName: "GetGroupSetting",
			Handler:    _ChatbotSvc_GetGroupSetting_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _ChatbotSvc_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ChatbotSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ChatbotSvc_GetGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ChatbotSvc_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ChatbotSvc_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatbot.proto",
}
