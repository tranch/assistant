// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatbotSvcClient is the client API for ChatbotSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatbotSvcClient interface {
	Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error)
	GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error)
	GetBots(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotsReply, error)
	UpdateBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type chatbotSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatbotSvcClient(cc grpc.ClientConnInterface) ChatbotSvcClient {
	return &chatbotSvcClient{cc}
}

func (c *chatbotSvcClient) Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error) {
	out := new(ChatbotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error) {
	out := new(BotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBots(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotsReply, error) {
	out := new(BotsReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateBotSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatbotSvcServer is the server API for ChatbotSvc service.
// All implementations must embed UnimplementedChatbotSvcServer
// for forward compatibility
type ChatbotSvcServer interface {
	Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error)
	GetBot(context.Context, *BotRequest) (*BotReply, error)
	GetBots(context.Context, *BotRequest) (*BotsReply, error)
	UpdateBotSetting(context.Context, *BotSettingRequest) (*StateReply, error)
	mustEmbedUnimplementedChatbotSvcServer()
}

// UnimplementedChatbotSvcServer must be embedded to have forward compatible implementations.
type UnimplementedChatbotSvcServer struct {
}

func (UnimplementedChatbotSvcServer) Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedChatbotSvcServer) GetBot(context.Context, *BotRequest) (*BotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedChatbotSvcServer) GetBots(context.Context, *BotRequest) (*BotsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBots not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateBotSetting(context.Context, *BotSettingRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotSetting not implemented")
}
func (UnimplementedChatbotSvcServer) mustEmbedUnimplementedChatbotSvcServer() {}

// UnsafeChatbotSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatbotSvcServer will
// result in compilation errors.
type UnsafeChatbotSvcServer interface {
	mustEmbedUnimplementedChatbotSvcServer()
}

func RegisterChatbotSvcServer(s grpc.ServiceRegistrar, srv ChatbotSvcServer) {
	s.RegisterService(&ChatbotSvc_ServiceDesc, srv)
}

func _ChatbotSvc_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Handle(ctx, req.(*ChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBot(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBots(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateBotSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateBotSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateBotSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateBotSetting(ctx, req.(*BotSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatbotSvc_ServiceDesc is the grpc.ServiceDesc for ChatbotSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatbotSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatbotSvc",
	HandlerType: (*ChatbotSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _ChatbotSvc_Handle_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _ChatbotSvc_GetBot_Handler,
		},
		{
			MethodName: "GetBots",
			Handler:    _ChatbotSvc_GetBots_Handler,
		},
		{
			MethodName: "UpdateBotSetting",
			Handler:    _ChatbotSvc_UpdateBotSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatbot.proto",
}
