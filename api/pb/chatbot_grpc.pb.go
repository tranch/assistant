// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatbotSvcClient is the client API for ChatbotSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatbotSvcClient interface {
	Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error)
	Register(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error)
	Action(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error)
	Form(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error)
	GetBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*BotsReply, error)
	CreateGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*BotSettingReply, error)
	GetGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingReply, error)
	GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GetGroupsReply, error)
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error)
	RunActionScript(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error)
	GetWebhookTriggers(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggersReply, error)
	GetCronTriggers(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggersReply, error)
	SwitchTriggers(ctx context.Context, in *SwitchTriggersRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type chatbotSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatbotSvcClient(cc grpc.ClientConnInterface) ChatbotSvcClient {
	return &chatbotSvcClient{cc}
}

func (c *chatbotSvcClient) Handle(ctx context.Context, in *ChatbotRequest, opts ...grpc.CallOption) (*ChatbotReply, error) {
	out := new(ChatbotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) Register(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) Action(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) Form(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/Form", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotReply, error) {
	out := new(BotReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*BotsReply, error) {
	out := new(BotsReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CreateGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CreateGroupBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) DeleteGroupBot(ctx context.Context, in *GroupBotRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/DeleteGroupBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroupBotSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroupSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroupBotSetting(ctx context.Context, in *BotSettingRequest, opts ...grpc.CallOption) (*BotSettingReply, error) {
	out := new(BotSettingReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroupBotSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingReply, error) {
	out := new(GroupSettingReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroupSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GetGroupsReply, error) {
	out := new(GetGroupsReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/SyntaxCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) RunActionScript(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/RunActionScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/WebhookTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CronTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/CreateTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/DeleteTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/ActionDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error) {
	out := new(WebhooksReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/ListWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetWebhookTriggers(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggersReply, error) {
	out := new(TriggersReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetWebhookTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) GetCronTriggers(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggersReply, error) {
	out := new(TriggersReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/GetCronTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatbotSvcClient) SwitchTriggers(ctx context.Context, in *SwitchTriggersRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.ChatbotSvc/SwitchTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatbotSvcServer is the server API for ChatbotSvc service.
// All implementations should embed UnimplementedChatbotSvcServer
// for forward compatibility
type ChatbotSvcServer interface {
	Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error)
	Register(context.Context, *BotRequest) (*StateReply, error)
	Action(context.Context, *BotRequest) (*StateReply, error)
	Form(context.Context, *BotRequest) (*StateReply, error)
	GetBot(context.Context, *BotRequest) (*BotReply, error)
	GetBots(context.Context, *BotsRequest) (*BotsReply, error)
	CreateGroupBot(context.Context, *GroupBotRequest) (*StateReply, error)
	DeleteGroupBot(context.Context, *GroupBotRequest) (*StateReply, error)
	UpdateGroupBotSetting(context.Context, *BotSettingRequest) (*StateReply, error)
	UpdateGroupSetting(context.Context, *GroupSettingRequest) (*StateReply, error)
	GetGroupBotSetting(context.Context, *BotSettingRequest) (*BotSettingReply, error)
	GetGroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingReply, error)
	GetGroups(context.Context, *GroupRequest) (*GetGroupsReply, error)
	CreateGroup(context.Context, *GroupRequest) (*StateReply, error)
	GetGroup(context.Context, *GroupRequest) (*GetGroupReply, error)
	DeleteGroup(context.Context, *GroupRequest) (*StateReply, error)
	UpdateGroup(context.Context, *GroupRequest) (*StateReply, error)
	SyntaxCheck(context.Context, *WorkflowRequest) (*StateReply, error)
	RunActionScript(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	WebhookTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CronTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CreateTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	DeleteTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	ActionDoc(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	ListWebhook(context.Context, *WorkflowRequest) (*WebhooksReply, error)
	GetWebhookTriggers(context.Context, *TriggerRequest) (*TriggersReply, error)
	GetCronTriggers(context.Context, *TriggerRequest) (*TriggersReply, error)
	SwitchTriggers(context.Context, *SwitchTriggersRequest) (*StateReply, error)
}

// UnimplementedChatbotSvcServer should be embedded to have forward compatible implementations.
type UnimplementedChatbotSvcServer struct {
}

func (UnimplementedChatbotSvcServer) Handle(context.Context, *ChatbotRequest) (*ChatbotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedChatbotSvcServer) Register(context.Context, *BotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedChatbotSvcServer) Action(context.Context, *BotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedChatbotSvcServer) Form(context.Context, *BotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form not implemented")
}
func (UnimplementedChatbotSvcServer) GetBot(context.Context, *BotRequest) (*BotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedChatbotSvcServer) GetBots(context.Context, *BotsRequest) (*BotsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBots not implemented")
}
func (UnimplementedChatbotSvcServer) CreateGroupBot(context.Context, *GroupBotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupBot not implemented")
}
func (UnimplementedChatbotSvcServer) DeleteGroupBot(context.Context, *GroupBotRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupBot not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroupBotSetting(context.Context, *BotSettingRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupBotSetting not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroupSetting(context.Context, *GroupSettingRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroupBotSetting(context.Context, *BotSettingRequest) (*BotSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupBotSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSetting not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroups(context.Context, *GroupRequest) (*GetGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedChatbotSvcServer) CreateGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedChatbotSvcServer) GetGroup(context.Context, *GroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedChatbotSvcServer) DeleteGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedChatbotSvcServer) UpdateGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedChatbotSvcServer) SyntaxCheck(context.Context, *WorkflowRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyntaxCheck not implemented")
}
func (UnimplementedChatbotSvcServer) RunActionScript(context.Context, *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunActionScript not implemented")
}
func (UnimplementedChatbotSvcServer) WebhookTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookTrigger not implemented")
}
func (UnimplementedChatbotSvcServer) CronTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronTrigger not implemented")
}
func (UnimplementedChatbotSvcServer) CreateTrigger(context.Context, *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedChatbotSvcServer) DeleteTrigger(context.Context, *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrigger not implemented")
}
func (UnimplementedChatbotSvcServer) ActionDoc(context.Context, *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionDoc not implemented")
}
func (UnimplementedChatbotSvcServer) ListWebhook(context.Context, *WorkflowRequest) (*WebhooksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhook not implemented")
}
func (UnimplementedChatbotSvcServer) GetWebhookTriggers(context.Context, *TriggerRequest) (*TriggersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookTriggers not implemented")
}
func (UnimplementedChatbotSvcServer) GetCronTriggers(context.Context, *TriggerRequest) (*TriggersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronTriggers not implemented")
}
func (UnimplementedChatbotSvcServer) SwitchTriggers(context.Context, *SwitchTriggersRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchTriggers not implemented")
}

// UnsafeChatbotSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatbotSvcServer will
// result in compilation errors.
type UnsafeChatbotSvcServer interface {
	mustEmbedUnimplementedChatbotSvcServer()
}

func RegisterChatbotSvcServer(s *grpc.Server, srv ChatbotSvcServer) {
	s.RegisterService(&_ChatbotSvc_serviceDesc, srv)
}

func _ChatbotSvc_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Handle(ctx, req.(*ChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Register(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Action(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_Form_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).Form(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/Form",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).Form(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBot(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetBots(ctx, req.(*BotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CreateGroupBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CreateGroupBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CreateGroupBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CreateGroupBot(ctx, req.(*GroupBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_DeleteGroupBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).DeleteGroupBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/DeleteGroupBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).DeleteGroupBot(ctx, req.(*GroupBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroupBotSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroupBotSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroupBotSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroupBotSetting(ctx, req.(*BotSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroupSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroupSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroupSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroupSetting(ctx, req.(*GroupSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroupBotSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroupBotSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroupBotSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroupBotSetting(ctx, req.(*BotSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroupSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroupSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroupSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroupSetting(ctx, req.(*GroupSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroups(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).UpdateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_SyntaxCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).SyntaxCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/SyntaxCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).SyntaxCheck(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_RunActionScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).RunActionScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/RunActionScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).RunActionScript(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_WebhookTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).WebhookTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/WebhookTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).WebhookTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CronTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CronTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CronTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CronTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/CreateTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).CreateTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_DeleteTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).DeleteTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/DeleteTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).DeleteTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_ActionDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).ActionDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/ActionDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).ActionDoc(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_ListWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).ListWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/ListWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).ListWebhook(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetWebhookTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetWebhookTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetWebhookTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetWebhookTriggers(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_GetCronTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).GetCronTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/GetCronTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).GetCronTriggers(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatbotSvc_SwitchTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatbotSvcServer).SwitchTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChatbotSvc/SwitchTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatbotSvcServer).SwitchTriggers(ctx, req.(*SwitchTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatbotSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatbotSvc",
	HandlerType: (*ChatbotSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _ChatbotSvc_Handle_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ChatbotSvc_Register_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _ChatbotSvc_Action_Handler,
		},
		{
			MethodName: "Form",
			Handler:    _ChatbotSvc_Form_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _ChatbotSvc_GetBot_Handler,
		},
		{
			MethodName: "GetBots",
			Handler:    _ChatbotSvc_GetBots_Handler,
		},
		{
			MethodName: "CreateGroupBot",
			Handler:    _ChatbotSvc_CreateGroupBot_Handler,
		},
		{
			MethodName: "DeleteGroupBot",
			Handler:    _ChatbotSvc_DeleteGroupBot_Handler,
		},
		{
			MethodName: "UpdateGroupBotSetting",
			Handler:    _ChatbotSvc_UpdateGroupBotSetting_Handler,
		},
		{
			MethodName: "UpdateGroupSetting",
			Handler:    _ChatbotSvc_UpdateGroupSetting_Handler,
		},
		{
			MethodName: "GetGroupBotSetting",
			Handler:    _ChatbotSvc_GetGroupBotSetting_Handler,
		},
		{
			MethodName: "GetGroupSetting",
			Handler:    _ChatbotSvc_GetGroupSetting_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _ChatbotSvc_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ChatbotSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ChatbotSvc_GetGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ChatbotSvc_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ChatbotSvc_UpdateGroup_Handler,
		},
		{
			MethodName: "SyntaxCheck",
			Handler:    _ChatbotSvc_SyntaxCheck_Handler,
		},
		{
			MethodName: "RunActionScript",
			Handler:    _ChatbotSvc_RunActionScript_Handler,
		},
		{
			MethodName: "WebhookTrigger",
			Handler:    _ChatbotSvc_WebhookTrigger_Handler,
		},
		{
			MethodName: "CronTrigger",
			Handler:    _ChatbotSvc_CronTrigger_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _ChatbotSvc_CreateTrigger_Handler,
		},
		{
			MethodName: "DeleteTrigger",
			Handler:    _ChatbotSvc_DeleteTrigger_Handler,
		},
		{
			MethodName: "ActionDoc",
			Handler:    _ChatbotSvc_ActionDoc_Handler,
		},
		{
			MethodName: "ListWebhook",
			Handler:    _ChatbotSvc_ListWebhook_Handler,
		},
		{
			MethodName: "GetWebhookTriggers",
			Handler:    _ChatbotSvc_GetWebhookTriggers_Handler,
		},
		{
			MethodName: "GetCronTriggers",
			Handler:    _ChatbotSvc_GetCronTriggers_Handler,
		},
		{
			MethodName: "SwitchTriggers",
			Handler:    _ChatbotSvc_SwitchTriggers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatbot.proto",
}
