// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowRequest struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *WorkflowRequest) Reset()         { *m = WorkflowRequest{} }
func (m *WorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowRequest) ProtoMessage()    {}
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0}
}
func (m *WorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowRequest.Unmarshal(m, b)
}
func (m *WorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowRequest.Marshal(b, m, deterministic)
}
func (m *WorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowRequest.Merge(m, src)
}
func (m *WorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_WorkflowRequest.Size(m)
}
func (m *WorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowRequest proto.InternalMessageInfo

func (m *WorkflowRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *WorkflowRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type WorkflowReply struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *WorkflowReply) Reset()         { *m = WorkflowReply{} }
func (m *WorkflowReply) String() string { return proto.CompactTextString(m) }
func (*WorkflowReply) ProtoMessage()    {}
func (*WorkflowReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{1}
}
func (m *WorkflowReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowReply.Unmarshal(m, b)
}
func (m *WorkflowReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowReply.Marshal(b, m, deterministic)
}
func (m *WorkflowReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowReply.Merge(m, src)
}
func (m *WorkflowReply) XXX_Size() int {
	return xxx_messageInfo_WorkflowReply.Size(m)
}
func (m *WorkflowReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowReply.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowReply proto.InternalMessageInfo

func (m *WorkflowReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TriggerRequest struct {
	Trigger *Trigger     `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Info    *TriggerInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *TriggerRequest) Reset()         { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()    {}
func (*TriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{2}
}
func (m *TriggerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerRequest.Unmarshal(m, b)
}
func (m *TriggerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerRequest.Marshal(b, m, deterministic)
}
func (m *TriggerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerRequest.Merge(m, src)
}
func (m *TriggerRequest) XXX_Size() int {
	return xxx_messageInfo_TriggerRequest.Size(m)
}
func (m *TriggerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerRequest proto.InternalMessageInfo

func (m *TriggerRequest) GetTrigger() *Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *TriggerRequest) GetInfo() *TriggerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type Trigger struct {
	// @inject_tag: db:"id" gorm:"primaryKey"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" gorm:"primaryKey"`
	// @inject_tag: db:"type"
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" db:"type"`
	// @inject_tag: db:"kind"
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty" db:"kind"`
	// @inject_tag: db:"flag"
	Flag string `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty" db:"flag"`
	// @inject_tag: db:"secret"
	Secret string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty" db:"secret"`
	// @inject_tag: db:"when"
	When string `protobuf:"bytes,6,opt,name=when,proto3" json:"when,omitempty" db:"when"`
	// @inject_tag: db:"message_id"
	MessageId int64 `protobuf:"varint,7,opt,name=messageId,proto3" json:"messageId,omitempty" db:"message_id"`
	// @inject_tag: db:"created_at"
	CreatedAt int64 `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty" db:"created_at"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{3}
}
func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Trigger) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Trigger) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Trigger) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *Trigger) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Trigger) GetWhen() string {
	if m != nil {
		return m.When
	}
	return ""
}

func (m *Trigger) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Trigger) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type TriggerInfo struct {
	MessageText string `protobuf:"bytes,9,opt,name=messageText,proto3" json:"messageText,omitempty"`
	Header      string `protobuf:"bytes,10,opt,name=header,proto3" json:"header,omitempty"`
	Body        string `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *TriggerInfo) Reset()         { *m = TriggerInfo{} }
func (m *TriggerInfo) String() string { return proto.CompactTextString(m) }
func (*TriggerInfo) ProtoMessage()    {}
func (*TriggerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{4}
}
func (m *TriggerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerInfo.Unmarshal(m, b)
}
func (m *TriggerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerInfo.Marshal(b, m, deterministic)
}
func (m *TriggerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerInfo.Merge(m, src)
}
func (m *TriggerInfo) XXX_Size() int {
	return xxx_messageInfo_TriggerInfo.Size(m)
}
func (m *TriggerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerInfo proto.InternalMessageInfo

func (m *TriggerInfo) GetMessageText() string {
	if m != nil {
		return m.MessageText
	}
	return ""
}

func (m *TriggerInfo) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *TriggerInfo) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type WebhooksReply struct {
	Flag []string `protobuf:"bytes,1,rep,name=flag,proto3" json:"flag,omitempty"`
}

func (m *WebhooksReply) Reset()         { *m = WebhooksReply{} }
func (m *WebhooksReply) String() string { return proto.CompactTextString(m) }
func (*WebhooksReply) ProtoMessage()    {}
func (*WebhooksReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{5}
}
func (m *WebhooksReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebhooksReply.Unmarshal(m, b)
}
func (m *WebhooksReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebhooksReply.Marshal(b, m, deterministic)
}
func (m *WebhooksReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhooksReply.Merge(m, src)
}
func (m *WebhooksReply) XXX_Size() int {
	return xxx_messageInfo_WebhooksReply.Size(m)
}
func (m *WebhooksReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhooksReply.DiscardUnknown(m)
}

var xxx_messageInfo_WebhooksReply proto.InternalMessageInfo

func (m *WebhooksReply) GetFlag() []string {
	if m != nil {
		return m.Flag
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkflowRequest)(nil), "pb.WorkflowRequest")
	proto.RegisterType((*WorkflowReply)(nil), "pb.WorkflowReply")
	proto.RegisterType((*TriggerRequest)(nil), "pb.TriggerRequest")
	proto.RegisterType((*Trigger)(nil), "pb.Trigger")
	proto.RegisterType((*TriggerInfo)(nil), "pb.TriggerInfo")
	proto.RegisterType((*WebhooksReply)(nil), "pb.WebhooksReply")
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor_892c7f566756b0be) }

var fileDescriptor_892c7f566756b0be = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xc7, 0x25, 0xdb, 0xb5, 0xab, 0x59, 0xac, 0xd0, 0x6d, 0x29, 0x8b, 0x09, 0xc2, 0x28, 0x14,
	0x7a, 0x72, 0xc0, 0x6d, 0x5a, 0x72, 0x4c, 0x9d, 0x4b, 0xa0, 0x27, 0x39, 0x50, 0x68, 0x7b, 0xd1,
	0xc7, 0x58, 0x16, 0x76, 0xb5, 0xaa, 0xb4, 0xa9, 0xa3, 0xb7, 0xe8, 0x0b, 0xf5, 0x5e, 0xe8, 0x25,
	0xc7, 0x5e, 0x83, 0x5f, 0xa4, 0xec, 0xae, 0x14, 0xab, 0x41, 0x18, 0x7c, 0xfb, 0xef, 0x6f, 0xe6,
	0xbf, 0x3b, 0x1f, 0x12, 0xd8, 0x1b, 0x9e, 0xaf, 0x16, 0x6b, 0xbe, 0x99, 0x64, 0x39, 0x17, 0x9c,
	0x76, 0xb2, 0x60, 0x04, 0x81, 0x5f, 0xa0, 0x3e, 0x8f, 0x5e, 0xc4, 0x3c, 0xe6, 0x4a, 0x9e, 0x4a,
	0xa5, 0xa9, 0x7b, 0x0e, 0x47, 0x9f, 0x2a, 0x9f, 0x87, 0xdf, 0x6f, 0xb0, 0x10, 0x94, 0x42, 0x4f,
	0xe0, 0xad, 0x60, 0xe6, 0xd8, 0x7c, 0x6d, 0x79, 0x4a, 0x2b, 0x56, 0x66, 0xc8, 0x3a, 0x15, 0x2b,
	0x33, 0x74, 0x4f, 0x60, 0xb8, 0xb3, 0x66, 0xeb, 0xb2, 0xcd, 0xe8, 0x7e, 0x05, 0xfb, 0x3a, 0x4f,
	0xe2, 0x18, 0xf3, 0xfa, 0xfa, 0x57, 0x30, 0x10, 0x9a, 0xa8, 0x44, 0x32, 0x25, 0x93, 0x2c, 0x98,
	0xd4, 0x49, 0x75, 0x8c, 0x9e, 0x40, 0x2f, 0x49, 0x17, 0x5c, 0xbd, 0x48, 0xa6, 0x47, 0x8d, 0x9c,
	0xab, 0x74, 0xc1, 0x3d, 0x15, 0x74, 0x7f, 0x99, 0x30, 0xa8, 0x28, 0xb5, 0xa1, 0x93, 0x44, 0xea,
	0xca, 0xae, 0xd7, 0x49, 0xa2, 0xb6, 0x92, 0x25, 0x5b, 0x25, 0x69, 0xc4, 0xba, 0x9a, 0x49, 0x2d,
	0xd9, 0x62, 0xed, 0xc7, 0xac, 0xa7, 0x99, 0xd4, 0xf4, 0x25, 0xf4, 0x0b, 0x0c, 0x73, 0x14, 0xec,
	0x89, 0xa2, 0xd5, 0x49, 0xe6, 0x6e, 0x96, 0x98, 0xb2, 0xbe, 0xce, 0x95, 0x9a, 0x1e, 0x83, 0xf5,
	0x0d, 0x8b, 0xc2, 0x8f, 0xf1, 0x2a, 0x62, 0x03, 0xf5, 0xfc, 0x0e, 0xc8, 0x68, 0x98, 0xa3, 0x2f,
	0x30, 0xba, 0x10, 0xec, 0xa9, 0x8e, 0x3e, 0x00, 0xf7, 0x0b, 0x90, 0x46, 0x53, 0x74, 0x0c, 0xa4,
	0x72, 0x5e, 0xcb, 0x39, 0x5a, 0xea, 0x95, 0x26, 0x92, 0x85, 0x2d, 0xd1, 0x8f, 0x30, 0x67, 0xa0,
	0x0b, 0xd3, 0x27, 0x59, 0x58, 0xc0, 0xa3, 0x92, 0x11, 0x5d, 0x98, 0xd4, 0x6a, 0x3f, 0x18, 0x2c,
	0x39, 0x5f, 0x15, 0x0f, 0xfb, 0x51, 0x9d, 0x9a, 0xe3, 0x6e, 0xdd, 0xe9, 0xf4, 0x4f, 0x17, 0x48,
	0xbd, 0xc5, 0xf9, 0x8f, 0x90, 0xbe, 0x05, 0x32, 0x2f, 0x53, 0xe1, 0xdf, 0xce, 0x96, 0x18, 0xae,
	0xe8, 0x73, 0x39, 0xf7, 0x47, 0x1f, 0xc8, 0xc8, 0x96, 0x70, 0x2e, 0x7c, 0x81, 0xea, 0x5e, 0xd7,
	0xa0, 0x67, 0x60, 0x79, 0x37, 0xe9, 0x45, 0x28, 0x12, 0x9e, 0xb6, 0x7b, 0x9e, 0xfd, 0x0f, 0xb5,
	0xed, 0x1c, 0xec, 0xaa, 0xc2, 0x7a, 0x89, 0xb4, 0xf9, 0x2d, 0xec, 0xb3, 0xbe, 0x03, 0x32, 0xcb,
	0x79, 0x7a, 0xb0, 0xef, 0x0c, 0x86, 0x33, 0x35, 0xfe, 0x7d, 0xce, 0xb6, 0x06, 0x87, 0x97, 0xb8,
	0xc6, 0xc3, 0x6d, 0x96, 0x1e, 0xca, 0x25, 0x0f, 0x0f, 0x98, 0xcb, 0x7b, 0x20, 0x1f, 0x93, 0x42,
	0x54, 0xb3, 0xd9, 0x67, 0x6c, 0xee, 0xd7, 0x35, 0x3e, 0x1c, 0xff, 0xbe, 0x77, 0xcc, 0xbb, 0x7b,
	0xc7, 0xf8, 0xb9, 0x75, 0x8c, 0xbb, 0xad, 0x63, 0xfc, 0xdd, 0x3a, 0xc6, 0xe7, 0xbe, 0x9f, 0x25,
	0xa7, 0x59, 0x10, 0xf4, 0xd5, 0x2f, 0xff, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x28,
	0x56, 0xd5, 0x2a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowSvcClient is the client API for WorkflowSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowSvcClient interface {
	SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error)
	RunAction(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error)
}

type workflowSvcClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowSvcClient(cc *grpc.ClientConn) WorkflowSvcClient {
	return &workflowSvcClient{cc}
}

func (c *workflowSvcClient) SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/SyntaxCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) RunAction(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/RunAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/WebhookTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/CronTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/CreateTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/DeleteTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/ActionDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error) {
	out := new(WebhooksReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/ListWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowSvcServer is the server API for WorkflowSvc service.
type WorkflowSvcServer interface {
	SyntaxCheck(context.Context, *WorkflowRequest) (*StateReply, error)
	RunAction(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	WebhookTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CronTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CreateTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	DeleteTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	ActionDoc(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	ListWebhook(context.Context, *WorkflowRequest) (*WebhooksReply, error)
}

// UnimplementedWorkflowSvcServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowSvcServer struct {
}

func (*UnimplementedWorkflowSvcServer) SyntaxCheck(ctx context.Context, req *WorkflowRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyntaxCheck not implemented")
}
func (*UnimplementedWorkflowSvcServer) RunAction(ctx context.Context, req *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAction not implemented")
}
func (*UnimplementedWorkflowSvcServer) WebhookTrigger(ctx context.Context, req *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookTrigger not implemented")
}
func (*UnimplementedWorkflowSvcServer) CronTrigger(ctx context.Context, req *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronTrigger not implemented")
}
func (*UnimplementedWorkflowSvcServer) CreateTrigger(ctx context.Context, req *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (*UnimplementedWorkflowSvcServer) DeleteTrigger(ctx context.Context, req *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrigger not implemented")
}
func (*UnimplementedWorkflowSvcServer) ActionDoc(ctx context.Context, req *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionDoc not implemented")
}
func (*UnimplementedWorkflowSvcServer) ListWebhook(ctx context.Context, req *WorkflowRequest) (*WebhooksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhook not implemented")
}

func RegisterWorkflowSvcServer(s *grpc.Server, srv WorkflowSvcServer) {
	s.RegisterService(&_WorkflowSvc_serviceDesc, srv)
}

func _WorkflowSvc_SyntaxCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).SyntaxCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/SyntaxCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).SyntaxCheck(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_RunAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).RunAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/RunAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).RunAction(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_WebhookTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).WebhookTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/WebhookTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).WebhookTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_CronTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).CronTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/CronTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).CronTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/CreateTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).CreateTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_DeleteTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).DeleteTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/DeleteTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).DeleteTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_ActionDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).ActionDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/ActionDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).ActionDoc(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_ListWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).ListWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/ListWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).ListWebhook(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WorkflowSvc",
	HandlerType: (*WorkflowSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyntaxCheck",
			Handler:    _WorkflowSvc_SyntaxCheck_Handler,
		},
		{
			MethodName: "RunAction",
			Handler:    _WorkflowSvc_RunAction_Handler,
		},
		{
			MethodName: "WebhookTrigger",
			Handler:    _WorkflowSvc_WebhookTrigger_Handler,
		},
		{
			MethodName: "CronTrigger",
			Handler:    _WorkflowSvc_CronTrigger_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _WorkflowSvc_CreateTrigger_Handler,
		},
		{
			MethodName: "DeleteTrigger",
			Handler:    _WorkflowSvc_DeleteTrigger_Handler,
		},
		{
			MethodName: "ActionDoc",
			Handler:    _WorkflowSvc_ActionDoc_Handler,
		},
		{
			MethodName: "ListWebhook",
			Handler:    _WorkflowSvc_ListWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}
