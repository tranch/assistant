syntax = "proto3";
package pb;

import "base.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

option go_package = "api/pb";

service MessageSvc {
  rpc List(MessageRequest) returns (MessagesReply) {}
  rpc ListByGroup(GetMessagesRequest) returns (GetMessagesReply) {}
  rpc GetByIds(GetMessagesRequest) returns (GetMessagesReply) {}
  rpc LastByGroup(LastByGroupRequest) returns (LastByGroupReply) {}
  rpc GetById(MessageRequest) returns (GetMessageReply) {}
  rpc GetBySequence(MessageRequest) returns (GetMessageReply) {}
  rpc Create(MessageRequest) returns (MessageReply) {}
  rpc Save(MessageRequest) returns (MessageReply) {}
  rpc Delete(MessageRequest) returns (TextReply) {}
  rpc Send(MessageRequest) returns (StateReply) {}
  rpc Run(MessageRequest) returns (TextReply) {}
  rpc Action(ActionRequest) returns (ActionReply) {}
  rpc Form(FormRequest) returns (FormReply) {}
  rpc ListInbox(InboxRequest) returns (InboxReply) {}
  rpc LastInbox(InboxRequest) returns (InboxReply) {}
  rpc MarkSendInbox(InboxRequest) returns (InboxReply) {}
  rpc MarkReadInbox(InboxRequest) returns (InboxReply) {}
}

message MessageRequest {
  Message message = 1;
}

message MessageReply {
  Message message = 1;
}

message MessagesReply {
  repeated Message messages = 2;
}

message Message {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"group_id" json:"group_id,string"
  int64 group_id = 2;
  // @inject_tag: db:"user_id"
  int64 user_id = 3;
  // @inject_tag: db:"sequence"
  int64 sequence = 4;
  // @inject_tag: db:"sender" json:"sender,string"
  int64 sender = 6;
  // @inject_tag: db:"sender_type"
  string sender_type = 7;
  // @inject_tag: db:"receiver" json:"receiver,string"
  int64 receiver = 8;
  // @inject_tag: db:"receiver_type"
  string receiver_type = 9;
  // @inject_tag: db:"type"
  string type = 10;
  // @inject_tag: db:"text"
  string text = 11;
  // @inject_tag: db:"payload"
  string payload = 12;
  // @inject_tag: db:"status"
  int32 status = 14;
  // @inject_tag: db:"created_at"
  int64 created_at = 15;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 16;

  // @inject_tag: gorm:"-"
  bytes data = 22;

  // @inject_tag: gorm:"->"
  string send_time = 17;
  // @inject_tag: gorm:"->"
  string sender_name = 18;
  // @inject_tag: gorm:"->"
  string direction = 19;
  // @inject_tag:gorm:"-"
  Avatar avatar = 20;
  // @inject_tag: gorm:"-"
  repeated string tags = 21;
}

message Alert {
  string title = 1;
  string body = 2;
  string subtitle = 3;
  string action = 4;
  string action_loc_key = 5;
  string launch_image = 6;
  string loc_key = 7;
  string title_loc_key = 8;
  repeated string loc_args = 9;
  repeated string title_loc_args = 10;
}

message Notification {
  repeated string tokens = 1;
  int32 platform = 2;
  string message = 3;
  string title = 4;
  string topic = 5;
  string key = 6;
  int32 badge = 7;
  string category = 8;
  Alert alert = 9;
  string sound = 10;
  bool content_available = 11;
  string thread_id = 12;
  bool mutable_content = 13;
  string image = 15;
  enum Priority {
    PRIORITY_UNSPECIFIED = 0;
    PRIORITY_NORMAL = 1;
    PRIORITY_HIGH = 2;
  }
  Priority priority = 16;
}

message GetMessageReply {
  Message message = 1;
}

message GetMessagesRequest {
  int32 page = 1;
  int32 limit = 2;
  // @inject_tag: query:"group_id"
  int64 group_id = 3;
  repeated int64 ids = 4;
}

message GetMessagesReply {
  int64 total = 1;
  int32 page = 2;
  int32 page_size = 3;
  repeated Message messages = 4;
}

message LastByGroupRequest {
  int64 group_id = 1;
}

message LastByGroupReply {
  Message message = 1;
}

message Inbox {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"user_id" json:"user_id,string"
  int64 user_id = 2;
  // @inject_tag: db:"sequence"
  int64 sequence = 3;
  // @inject_tag: db:"sender"
  int64 sender = 5;
  // @inject_tag: db:"sender_type"
  string sender_type = 6;
  // @inject_tag: db:"type"
  string type = 7;
  // @inject_tag: db:"text"
  string title = 8;
  // @inject_tag: db:"content"
  string content = 9;
  // @inject_tag: db:"payload"
  string payload = 10;
  // @inject_tag: db:"status"
  int32 status = 11;
  // @inject_tag: db:"created_at"
  int64 created_at = 12;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 13;
}

message InboxRequest {
  int64 inbox_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

message InboxReply {
  int64 total = 1;
  int32 page = 2;
  int32 page_size = 3;
  repeated Inbox inbox = 4;
}

message ActionRequest {
  // @inject_tag: json:"message_id,string"
  int64 message_id = 1;
  string action_id = 2;
  string value = 3;
}

message ActionReply {
  bool state = 1;
}

message FormRequest {
  // @inject_tag: json:"message_id,string"
  int64 message_id = 1;
  string form_id = 2;
  repeated KV form = 3;
}

message FormReply {
  bool state = 1;
}
