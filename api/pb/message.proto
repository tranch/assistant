syntax = "proto3";
package pb;

import "base.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

option go_package = "api/pb";

service MessageSvc {
  rpc List(MessageRequest) returns (MessagesReply) {}
  rpc Get(MessageRequest) returns (MessageReply) {}
  rpc Create(MessageRequest) returns (MessageReply) {}
  rpc Delete(MessageRequest) returns (TextReply) {}
  rpc Send(MessageRequest) returns (StateReply) {}
  rpc Run(MessageRequest) returns (TextReply) {}
  rpc GetActionMessages(TextRequest) returns (ActionReply) {}
  rpc CreateActionMessage(TextRequest) returns (StateReply) {}
  rpc DeleteWorkflowMessage(MessageRequest) returns (StateReply) {}
  rpc GetGroups(GroupRequest) returns (GroupsReply) {}
  rpc CreateGroup(GroupRequest) returns (StateReply) {}
  rpc GetGroup(GroupRequest) returns (GroupReply) {}
}

message MessageRequest {
  Message message = 1;
}

message MessageReply {
  Message message = 1;
}

message MessagesReply {
  repeated Message messages = 2;
}

message Message {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64 id = 1;
  // @inject_tag: db:"uuid"
  string uuid = 2;
  // @inject_tag: db:"text"
  string text = 3;
  // @inject_tag: db:"type"
  string type = 4;
  // @inject_tag: db:"channel"
  string channel = 5;
  // @inject_tag: db:"created_at"
  int64 createdAt = 6;
  // @inject_tag: db:"updated_at"
  int64 updatedAt = 7;
}

message Group {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64 id = 1;
  // @inject_tag: db:"sequence"
  int64 sequence = 2;
  // @inject_tag: db:"uuid"
  string uuid = 3;
  // @inject_tag: db:"user_id"
  int64 user_id = 4;
  // @inject_tag: db:"name"
  string name = 5;
  // @inject_tag: db:"avatar"
  string avatar = 6;
  // @inject_tag: db:"created_at"
  int64 createdAt = 7;
  // @inject_tag: db:"updated_at"
  int64 updatedAt = 8;
}

message Action {
  int64 id = 1;
  string text = 2;
}

message ActionReply {
  repeated Action items = 1;
}

message Alert {
  string title = 1;
  string body = 2;
  string subtitle = 3;
  string action = 4;
  string actionLocKey = 5;
  string launchImage = 6;
  string locKey = 7;
  string titleLocKey = 8;
  repeated string locArgs = 9;
  repeated string titleLocArgs = 10;
}

message Notification {
  repeated string tokens = 1;
  int32 platform = 2;
  string message = 3;
  string title = 4;
  string topic = 5;
  string key = 6;
  int32 badge = 7;
  string category = 8;
  Alert alert = 9;
  string sound = 10;
  bool contentAvailable = 11;
  string threadID = 12;
  bool mutableContent = 13;
  string image = 15;
  enum Priority {
    Normal = 0;
    High = 1;
  }
  Priority priority = 16;
}

message GroupRequest {
  Group group = 1;
}

message GroupReply {
  Group group = 1;
}

message GroupsReply {
  repeated Group groups = 1;
}
