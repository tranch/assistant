syntax = "proto3";
package pb;

import "base.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

option go_package = "api/pb";

service MiddleSvc {
  rpc CreatePage(PageRequest) returns (TextReply) {}
  rpc GetPage(PageRequest) returns (PageReply) {}
  rpc GetQrUrl(TextRequest) returns (TextReply) {}
  rpc GetApps(TextRequest) returns (AppsReply) {}
  rpc GetAvailableApp(TextRequest) returns (AppReply) {}
  rpc StoreAppOAuth(AppRequest) returns (StateReply) {}
  rpc GetCredentials(TextRequest) returns (CredentialsReply) {}
  rpc GetMaskingCredentials(TextRequest) returns (MaskingReply) {}
  rpc GetCredential(CredentialRequest) returns (CredentialReply) {}
  rpc CreateCredential(KVsRequest) returns (StateReply) {}
  rpc GetSettings(TextRequest) returns (SettingsReply) {}
  rpc GetSetting(TextRequest) returns (SettingReply) {}
  rpc CreateSetting(KVRequest) returns (StateReply) {}
  rpc GetStats(TextRequest) returns (TextReply) {}
  rpc ListSubscribe(SubscribeRequest) returns (SubscribeReply) {}
  rpc RegisterSubscribe(SubscribeRequest) returns (StateReply) {}
  rpc OpenSubscribe(SubscribeRequest) returns (StateReply) {}
  rpc CloseSubscribe(SubscribeRequest) returns (StateReply) {}
  rpc GetSubscribeStatus(SubscribeRequest) returns (StateReply) {}
  rpc ListCron(CronRequest) returns (CronReply) {}
  rpc RegisterCron(CronRequest) returns (StateReply) {}
  rpc StartCron(CronRequest) returns (StateReply) {}
  rpc StopCron(CronRequest) returns (StateReply) {}
  rpc GetCronStatus(CronRequest) returns (StateReply) {}
  rpc GetOrCreateTag(TagRequest) returns (TagReply) {}
  rpc GetTags(TagRequest) returns (TagsReply) {}
  rpc GetChartData(ChartDataRequest) returns (ChartDataReply) {}
  rpc SetChartData(ChartDataRequest) returns (ChartDataReply) {}
  rpc GetChartUrl(TextRequest) returns (TextReply) {}
}

message PageRequest {
  Page page = 1;
}

message PageReply {
  Page page = 1;
}

message Page {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64 id = 1;
  // @inject_tag: query:"uuid" db:"uuid"
  string uuid = 2;
  // @inject_tag: query:"title" db:"title"
  string title = 3;
  // @inject_tag: query:"content" db:"content"
  string content = 4;
  // @inject_tag: query:"type" db:"type"
  string type = 5;
  // @inject_tag: db:"created_at"
  int64 createdAt = 6;
  // @inject_tag: db:"created_at"
  int64 updatedAt = 7;
}

message AppRequest {
  App app = 1;
}

message AppsReply {
  repeated App apps = 1;
}

message AppReply {
  string name = 1;
  string type = 2;
  string token = 3;
  repeated KV extra = 4;
}

message App {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64 id = 1;
  // @inject_tag: db:"type"
  string type = 2;
  // @inject_tag: db:"name"
  string name = 3;
  // @inject_tag: db:"token"
  string token = 4;
  // @inject_tag: db:"extra"
  string extra = 5;
  // @inject_tag: db:"created_at"
  int64 createdAt = 6;
  // @inject_tag: db:"updated_at"
  int64 updatedAt = 7;
}

message AppInfo {
  string title = 8;
  bool isAuthorized = 9;
}

message CredentialsReply {
  repeated Credential credentials = 1;
}

message Credential {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64  id = 1;
  // @inject_tag: db:"name"
  string name = 2;
  // @inject_tag: db:"type"
  string type = 3;
  // @inject_tag: db:"content"
  string content = 4;
  // @inject_tag: db:"created_at"
  int64 createdAt = 5;
  // @inject_tag: db:"updated_at"
  int64 updatedAt = 6;
}

message MaskingReply {
  repeated KV items = 1;
}

message CredentialRequest {
  // @inject_tag: query:"name"
  string name = 1;
  // @inject_tag: query:"type"
  string type = 2;
}

message CredentialReply {
  string name = 1;
  string type = 2;
  repeated KV content = 3;
}

message SettingsReply {
  repeated KV items = 1;
}

message SettingReply {
  string key = 1;
  string value = 2;
}

message KVRequest {
  string key = 1;
  string value = 2;
}

message KVsRequest {
  repeated KV kvs = 1;
}

message Subscribe {
  string name = 1;
  bool state = 2;
}

message SubscribeRequest {
  string text = 1;
}

message SubscribeReply {
  repeated Subscribe subscribe = 1;
}

message Cron {
  string name = 1;
  string when = 2;
  bool state = 3;
}

message CronRequest {
  string text = 1;
}

message CronReply {
  repeated Cron cron = 1;
}

message Tag {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64  id = 1;
  // @inject_tag: db:"name"
  string name = 2;
  // @inject_tag: db:"created_at"
  int64 createdAt = 3;
  // @inject_tag: db:"created_at"
  int64 updatedAt = 4;
}

message TagRequest {
  Tag tag = 1;
}

message TagReply {
  Tag tag = 1;
}

message TagsReply {
  repeated Tag tags = 1;
}

message ChartData {
  // @inject_tag: query:"uuid" json:"uuid"
  string uuid = 1;
  // @inject_tag: query:"title" json:"title"
  string title = 2;
  // @inject_tag: query:"sub_title" json:"sub_title"
  string subTitle = 3;
  // @inject_tag: query:"x_axis" json:"x_axis"
  repeated string xAxis = 4;
  // @inject_tag: query:"series" json:"series"
  repeated double series = 5;
}

message ChartDataRequest {
  ChartData chartData = 1;
}

message ChartDataReply {
  ChartData chartData = 1;
}
