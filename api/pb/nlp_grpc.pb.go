// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NLPSvcClient is the client API for NLPSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NLPSvcClient interface {
	Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
}

type nLPSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewNLPSvcClient(cc grpc.ClientConnInterface) NLPSvcClient {
	return &nLPSvcClient{cc}
}

func (c *nLPSvcClient) Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Pinyin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPSvcClient) Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Segmentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPSvcClient) Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Classifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NLPSvcServer is the server API for NLPSvc service.
// All implementations should embed UnimplementedNLPSvcServer
// for forward compatibility
type NLPSvcServer interface {
	Pinyin(context.Context, *TextRequest) (*WordsReply, error)
	Segmentation(context.Context, *TextRequest) (*WordsReply, error)
	Classifier(context.Context, *TextRequest) (*TextReply, error)
}

// UnimplementedNLPSvcServer should be embedded to have forward compatible implementations.
type UnimplementedNLPSvcServer struct {
}

func (UnimplementedNLPSvcServer) Pinyin(context.Context, *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pinyin not implemented")
}
func (UnimplementedNLPSvcServer) Segmentation(context.Context, *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Segmentation not implemented")
}
func (UnimplementedNLPSvcServer) Classifier(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classifier not implemented")
}

// UnsafeNLPSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NLPSvcServer will
// result in compilation errors.
type UnsafeNLPSvcServer interface {
	mustEmbedUnimplementedNLPSvcServer()
}

func RegisterNLPSvcServer(s grpc.ServiceRegistrar, srv NLPSvcServer) {
	s.RegisterService(&NLPSvc_ServiceDesc, srv)
}

func _NLPSvc_Pinyin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Pinyin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Pinyin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Pinyin(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLPSvc_Segmentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Segmentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Segmentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Segmentation(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLPSvc_Classifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Classifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Classifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Classifier(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NLPSvc_ServiceDesc is the grpc.ServiceDesc for NLPSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NLPSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NLPSvc",
	HandlerType: (*NLPSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pinyin",
			Handler:    _NLPSvc_Pinyin_Handler,
		},
		{
			MethodName: "Segmentation",
			Handler:    _NLPSvc_Segmentation_Handler,
		},
		{
			MethodName: "Classifier",
			Handler:    _NLPSvc_Classifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}
