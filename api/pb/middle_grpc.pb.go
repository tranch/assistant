// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MiddleSvcClient is the client API for MiddleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddleSvcClient interface {
	CreatePage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*TextReply, error)
	GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageReply, error)
	GetQrUrl(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
	GetApps(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AppsReply, error)
	GetAvailableApp(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AppReply, error)
	StoreAppOAuth(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetCredentials(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*CredentialsReply, error)
	GetMaskingCredentials(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*MaskingReply, error)
	GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialReply, error)
	CreateCredential(ctx context.Context, in *KVsRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetSettings(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SettingsReply, error)
	GetSetting(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SettingReply, error)
	CreateSetting(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetStats(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
	ListSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error)
	RegisterSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error)
	OpenSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error)
	CloseSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetSubscribeStatus(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetUserSubscribe(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*GetUserSubscribeReply, error)
	SwitchUserSubscribe(ctx context.Context, in *SwitchUserSubscribeRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetUserSubscribeStatus(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error)
	ListCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*CronReply, error)
	RegisterCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error)
	StartCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error)
	StopCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetCronStatus(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetOrCreateTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagReply, error)
	GetTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagsReply, error)
	SaveModelTag(ctx context.Context, in *ModelTagRequest, opts ...grpc.CallOption) (*ModelTagReply, error)
	GetTagsByModelId(ctx context.Context, in *ModelIdRequest, opts ...grpc.CallOption) (*GetTagsReply, error)
	GetModelTags(ctx context.Context, in *ModelTagRequest, opts ...grpc.CallOption) (*GetTagsReply, error)
	GetChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataReply, error)
	SetChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataReply, error)
	GetChartUrl(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
	Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
	CreateAvatar(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
	CreateCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	GetCounters(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CountersReply, error)
	ChangeCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	ResetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	GetCounterByFlag(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error)
	Search(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*MetadataReply, error)
	CollectMetadata(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type middleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleSvcClient(cc grpc.ClientConnInterface) MiddleSvcClient {
	return &middleSvcClient{cc}
}

func (c *middleSvcClient) CreatePage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CreatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageReply, error) {
	out := new(PageReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetQrUrl(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetQrUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetApps(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AppsReply, error) {
	out := new(AppsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetAvailableApp(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*AppReply, error) {
	out := new(AppReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetAvailableApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) StoreAppOAuth(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/StoreAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCredentials(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*CredentialsReply, error) {
	out := new(CredentialsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetMaskingCredentials(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*MaskingReply, error) {
	out := new(MaskingReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetMaskingCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialReply, error) {
	out := new(CredentialReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CreateCredential(ctx context.Context, in *KVsRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetSettings(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SettingsReply, error) {
	out := new(SettingsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetSetting(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SettingReply, error) {
	out := new(SettingReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CreateSetting(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CreateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetStats(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) ListSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error) {
	out := new(SubscribeReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/ListSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) RegisterSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/RegisterSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) OpenSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/OpenSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CloseSubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CloseSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetSubscribeStatus(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetSubscribeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetUserSubscribe(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*GetUserSubscribeReply, error) {
	out := new(GetUserSubscribeReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetUserSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) SwitchUserSubscribe(ctx context.Context, in *SwitchUserSubscribeRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/SwitchUserSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetUserSubscribeStatus(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetUserSubscribeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) ListCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*CronReply, error) {
	out := new(CronReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/ListCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) RegisterCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/RegisterCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) StartCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/StartCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) StopCron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/StopCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCronStatus(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCronStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetOrCreateTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagReply, error) {
	out := new(TagReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetOrCreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagsReply, error) {
	out := new(TagsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) SaveModelTag(ctx context.Context, in *ModelTagRequest, opts ...grpc.CallOption) (*ModelTagReply, error) {
	out := new(ModelTagReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/SaveModelTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetTagsByModelId(ctx context.Context, in *ModelIdRequest, opts ...grpc.CallOption) (*GetTagsReply, error) {
	out := new(GetTagsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetTagsByModelId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetModelTags(ctx context.Context, in *ModelTagRequest, opts ...grpc.CallOption) (*GetTagsReply, error) {
	out := new(GetTagsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetModelTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataReply, error) {
	out := new(ChartDataReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) SetChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataReply, error) {
	out := new(ChartDataReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/SetChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetChartUrl(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetChartUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/Pinyin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/Segmentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/Classifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CreateAvatar(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CreateCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CreateCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCounters(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CountersReply, error) {
	out := new(CountersReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) ChangeCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/ChangeCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) ResetCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/ResetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) GetCounterByFlag(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/GetCounterByFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) Search(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*MetadataReply, error) {
	out := new(MetadataReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleSvcClient) CollectMetadata(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MiddleSvc/CollectMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleSvcServer is the server API for MiddleSvc service.
// All implementations should embed UnimplementedMiddleSvcServer
// for forward compatibility
type MiddleSvcServer interface {
	CreatePage(context.Context, *PageRequest) (*TextReply, error)
	GetPage(context.Context, *PageRequest) (*PageReply, error)
	GetQrUrl(context.Context, *TextRequest) (*TextReply, error)
	GetApps(context.Context, *TextRequest) (*AppsReply, error)
	GetAvailableApp(context.Context, *TextRequest) (*AppReply, error)
	StoreAppOAuth(context.Context, *AppRequest) (*StateReply, error)
	GetCredentials(context.Context, *TextRequest) (*CredentialsReply, error)
	GetMaskingCredentials(context.Context, *TextRequest) (*MaskingReply, error)
	GetCredential(context.Context, *CredentialRequest) (*CredentialReply, error)
	CreateCredential(context.Context, *KVsRequest) (*StateReply, error)
	GetSettings(context.Context, *TextRequest) (*SettingsReply, error)
	GetSetting(context.Context, *TextRequest) (*SettingReply, error)
	CreateSetting(context.Context, *KVRequest) (*StateReply, error)
	GetStats(context.Context, *TextRequest) (*TextReply, error)
	ListSubscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error)
	RegisterSubscribe(context.Context, *SubscribeRequest) (*StateReply, error)
	OpenSubscribe(context.Context, *SubscribeRequest) (*StateReply, error)
	CloseSubscribe(context.Context, *SubscribeRequest) (*StateReply, error)
	GetSubscribeStatus(context.Context, *SubscribeRequest) (*StateReply, error)
	GetUserSubscribe(context.Context, *TextRequest) (*GetUserSubscribeReply, error)
	SwitchUserSubscribe(context.Context, *SwitchUserSubscribeRequest) (*StateReply, error)
	GetUserSubscribeStatus(context.Context, *TextRequest) (*StateReply, error)
	ListCron(context.Context, *CronRequest) (*CronReply, error)
	RegisterCron(context.Context, *CronRequest) (*StateReply, error)
	StartCron(context.Context, *CronRequest) (*StateReply, error)
	StopCron(context.Context, *CronRequest) (*StateReply, error)
	GetCronStatus(context.Context, *CronRequest) (*StateReply, error)
	GetOrCreateTag(context.Context, *TagRequest) (*TagReply, error)
	GetTags(context.Context, *TagRequest) (*TagsReply, error)
	SaveModelTag(context.Context, *ModelTagRequest) (*ModelTagReply, error)
	GetTagsByModelId(context.Context, *ModelIdRequest) (*GetTagsReply, error)
	GetModelTags(context.Context, *ModelTagRequest) (*GetTagsReply, error)
	GetChartData(context.Context, *ChartDataRequest) (*ChartDataReply, error)
	SetChartData(context.Context, *ChartDataRequest) (*ChartDataReply, error)
	GetChartUrl(context.Context, *TextRequest) (*TextReply, error)
	Pinyin(context.Context, *TextRequest) (*WordsReply, error)
	Segmentation(context.Context, *TextRequest) (*WordsReply, error)
	Classifier(context.Context, *TextRequest) (*TextReply, error)
	CreateAvatar(context.Context, *TextRequest) (*TextReply, error)
	CreateCounter(context.Context, *CounterRequest) (*StateReply, error)
	GetCounter(context.Context, *CounterRequest) (*CounterReply, error)
	GetCounters(context.Context, *CounterRequest) (*CountersReply, error)
	ChangeCounter(context.Context, *CounterRequest) (*CounterReply, error)
	ResetCounter(context.Context, *CounterRequest) (*CounterReply, error)
	GetCounterByFlag(context.Context, *CounterRequest) (*CounterReply, error)
	Search(context.Context, *TextRequest) (*MetadataReply, error)
	CollectMetadata(context.Context, *TextRequest) (*StateReply, error)
}

// UnimplementedMiddleSvcServer should be embedded to have forward compatible implementations.
type UnimplementedMiddleSvcServer struct {
}

func (UnimplementedMiddleSvcServer) CreatePage(context.Context, *PageRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedMiddleSvcServer) GetPage(context.Context, *PageRequest) (*PageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedMiddleSvcServer) GetQrUrl(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQrUrl not implemented")
}
func (UnimplementedMiddleSvcServer) GetApps(context.Context, *TextRequest) (*AppsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedMiddleSvcServer) GetAvailableApp(context.Context, *TextRequest) (*AppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableApp not implemented")
}
func (UnimplementedMiddleSvcServer) StoreAppOAuth(context.Context, *AppRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAppOAuth not implemented")
}
func (UnimplementedMiddleSvcServer) GetCredentials(context.Context, *TextRequest) (*CredentialsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedMiddleSvcServer) GetMaskingCredentials(context.Context, *TextRequest) (*MaskingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaskingCredentials not implemented")
}
func (UnimplementedMiddleSvcServer) GetCredential(context.Context, *CredentialRequest) (*CredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedMiddleSvcServer) CreateCredential(context.Context, *KVsRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedMiddleSvcServer) GetSettings(context.Context, *TextRequest) (*SettingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedMiddleSvcServer) GetSetting(context.Context, *TextRequest) (*SettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedMiddleSvcServer) CreateSetting(context.Context, *KVRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedMiddleSvcServer) GetStats(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedMiddleSvcServer) ListSubscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) RegisterSubscribe(context.Context, *SubscribeRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) OpenSubscribe(context.Context, *SubscribeRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) CloseSubscribe(context.Context, *SubscribeRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) GetSubscribeStatus(context.Context, *SubscribeRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeStatus not implemented")
}
func (UnimplementedMiddleSvcServer) GetUserSubscribe(context.Context, *TextRequest) (*GetUserSubscribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) SwitchUserSubscribe(context.Context, *SwitchUserSubscribeRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchUserSubscribe not implemented")
}
func (UnimplementedMiddleSvcServer) GetUserSubscribeStatus(context.Context, *TextRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscribeStatus not implemented")
}
func (UnimplementedMiddleSvcServer) ListCron(context.Context, *CronRequest) (*CronReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCron not implemented")
}
func (UnimplementedMiddleSvcServer) RegisterCron(context.Context, *CronRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCron not implemented")
}
func (UnimplementedMiddleSvcServer) StartCron(context.Context, *CronRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCron not implemented")
}
func (UnimplementedMiddleSvcServer) StopCron(context.Context, *CronRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCron not implemented")
}
func (UnimplementedMiddleSvcServer) GetCronStatus(context.Context, *CronRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronStatus not implemented")
}
func (UnimplementedMiddleSvcServer) GetOrCreateTag(context.Context, *TagRequest) (*TagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateTag not implemented")
}
func (UnimplementedMiddleSvcServer) GetTags(context.Context, *TagRequest) (*TagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedMiddleSvcServer) SaveModelTag(context.Context, *ModelTagRequest) (*ModelTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveModelTag not implemented")
}
func (UnimplementedMiddleSvcServer) GetTagsByModelId(context.Context, *ModelIdRequest) (*GetTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsByModelId not implemented")
}
func (UnimplementedMiddleSvcServer) GetModelTags(context.Context, *ModelTagRequest) (*GetTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTags not implemented")
}
func (UnimplementedMiddleSvcServer) GetChartData(context.Context, *ChartDataRequest) (*ChartDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartData not implemented")
}
func (UnimplementedMiddleSvcServer) SetChartData(context.Context, *ChartDataRequest) (*ChartDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChartData not implemented")
}
func (UnimplementedMiddleSvcServer) GetChartUrl(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartUrl not implemented")
}
func (UnimplementedMiddleSvcServer) Pinyin(context.Context, *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pinyin not implemented")
}
func (UnimplementedMiddleSvcServer) Segmentation(context.Context, *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Segmentation not implemented")
}
func (UnimplementedMiddleSvcServer) Classifier(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classifier not implemented")
}
func (UnimplementedMiddleSvcServer) CreateAvatar(context.Context, *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedMiddleSvcServer) CreateCounter(context.Context, *CounterRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounter not implemented")
}
func (UnimplementedMiddleSvcServer) GetCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounter not implemented")
}
func (UnimplementedMiddleSvcServer) GetCounters(context.Context, *CounterRequest) (*CountersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedMiddleSvcServer) ChangeCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCounter not implemented")
}
func (UnimplementedMiddleSvcServer) ResetCounter(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCounter not implemented")
}
func (UnimplementedMiddleSvcServer) GetCounterByFlag(context.Context, *CounterRequest) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterByFlag not implemented")
}
func (UnimplementedMiddleSvcServer) Search(context.Context, *TextRequest) (*MetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMiddleSvcServer) CollectMetadata(context.Context, *TextRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMetadata not implemented")
}

// UnsafeMiddleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddleSvcServer will
// result in compilation errors.
type UnsafeMiddleSvcServer interface {
	mustEmbedUnimplementedMiddleSvcServer()
}

func RegisterMiddleSvcServer(s *grpc.Server, srv MiddleSvcServer) {
	s.RegisterService(&_MiddleSvc_serviceDesc, srv)
}

func _MiddleSvc_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CreatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CreatePage(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetPage(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetQrUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetQrUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetQrUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetQrUrl(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetApps(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetAvailableApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetAvailableApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetAvailableApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetAvailableApp(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_StoreAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).StoreAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/StoreAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).StoreAppOAuth(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCredentials(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetMaskingCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetMaskingCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetMaskingCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetMaskingCredentials(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCredential(ctx, req.(*CredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CreateCredential(ctx, req.(*KVsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetSettings(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetSetting(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CreateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CreateSetting(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetStats(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_ListSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).ListSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/ListSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).ListSubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_RegisterSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).RegisterSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/RegisterSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).RegisterSubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_OpenSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).OpenSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/OpenSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).OpenSubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CloseSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CloseSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CloseSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CloseSubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetSubscribeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetSubscribeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetSubscribeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetSubscribeStatus(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetUserSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetUserSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetUserSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetUserSubscribe(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_SwitchUserSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchUserSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).SwitchUserSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/SwitchUserSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).SwitchUserSubscribe(ctx, req.(*SwitchUserSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetUserSubscribeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetUserSubscribeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetUserSubscribeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetUserSubscribeStatus(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_ListCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).ListCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/ListCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).ListCron(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_RegisterCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).RegisterCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/RegisterCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).RegisterCron(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_StartCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).StartCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/StartCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).StartCron(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_StopCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).StopCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/StopCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).StopCron(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCronStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCronStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCronStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCronStatus(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetOrCreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetOrCreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetOrCreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetOrCreateTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_SaveModelTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).SaveModelTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/SaveModelTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).SaveModelTag(ctx, req.(*ModelTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetTagsByModelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetTagsByModelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetTagsByModelId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetTagsByModelId(ctx, req.(*ModelIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetModelTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetModelTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetModelTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetModelTags(ctx, req.(*ModelTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetChartData(ctx, req.(*ChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_SetChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).SetChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/SetChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).SetChartData(ctx, req.(*ChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetChartUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetChartUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetChartUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetChartUrl(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_Pinyin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).Pinyin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/Pinyin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).Pinyin(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_Segmentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).Segmentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/Segmentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).Segmentation(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_Classifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).Classifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/Classifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).Classifier(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CreateAvatar(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CreateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CreateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CreateCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CreateCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCounters(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_ChangeCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).ChangeCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/ChangeCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).ChangeCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_ResetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).ResetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/ResetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).ResetCounter(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_GetCounterByFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).GetCounterByFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/GetCounterByFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).GetCounterByFlag(ctx, req.(*CounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).Search(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiddleSvc_CollectMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleSvcServer).CollectMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MiddleSvc/CollectMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleSvcServer).CollectMetadata(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MiddleSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MiddleSvc",
	HandlerType: (*MiddleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _MiddleSvc_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _MiddleSvc_GetPage_Handler,
		},
		{
			MethodName: "GetQrUrl",
			Handler:    _MiddleSvc_GetQrUrl_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _MiddleSvc_GetApps_Handler,
		},
		{
			MethodName: "GetAvailableApp",
			Handler:    _MiddleSvc_GetAvailableApp_Handler,
		},
		{
			MethodName: "StoreAppOAuth",
			Handler:    _MiddleSvc_StoreAppOAuth_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _MiddleSvc_GetCredentials_Handler,
		},
		{
			MethodName: "GetMaskingCredentials",
			Handler:    _MiddleSvc_GetMaskingCredentials_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _MiddleSvc_GetCredential_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _MiddleSvc_CreateCredential_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _MiddleSvc_GetSettings_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _MiddleSvc_GetSetting_Handler,
		},
		{
			MethodName: "CreateSetting",
			Handler:    _MiddleSvc_CreateSetting_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _MiddleSvc_GetStats_Handler,
		},
		{
			MethodName: "ListSubscribe",
			Handler:    _MiddleSvc_ListSubscribe_Handler,
		},
		{
			MethodName: "RegisterSubscribe",
			Handler:    _MiddleSvc_RegisterSubscribe_Handler,
		},
		{
			MethodName: "OpenSubscribe",
			Handler:    _MiddleSvc_OpenSubscribe_Handler,
		},
		{
			MethodName: "CloseSubscribe",
			Handler:    _MiddleSvc_CloseSubscribe_Handler,
		},
		{
			MethodName: "GetSubscribeStatus",
			Handler:    _MiddleSvc_GetSubscribeStatus_Handler,
		},
		{
			MethodName: "GetUserSubscribe",
			Handler:    _MiddleSvc_GetUserSubscribe_Handler,
		},
		{
			MethodName: "SwitchUserSubscribe",
			Handler:    _MiddleSvc_SwitchUserSubscribe_Handler,
		},
		{
			MethodName: "GetUserSubscribeStatus",
			Handler:    _MiddleSvc_GetUserSubscribeStatus_Handler,
		},
		{
			MethodName: "ListCron",
			Handler:    _MiddleSvc_ListCron_Handler,
		},
		{
			MethodName: "RegisterCron",
			Handler:    _MiddleSvc_RegisterCron_Handler,
		},
		{
			MethodName: "StartCron",
			Handler:    _MiddleSvc_StartCron_Handler,
		},
		{
			MethodName: "StopCron",
			Handler:    _MiddleSvc_StopCron_Handler,
		},
		{
			MethodName: "GetCronStatus",
			Handler:    _MiddleSvc_GetCronStatus_Handler,
		},
		{
			MethodName: "GetOrCreateTag",
			Handler:    _MiddleSvc_GetOrCreateTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _MiddleSvc_GetTags_Handler,
		},
		{
			MethodName: "SaveModelTag",
			Handler:    _MiddleSvc_SaveModelTag_Handler,
		},
		{
			MethodName: "GetTagsByModelId",
			Handler:    _MiddleSvc_GetTagsByModelId_Handler,
		},
		{
			MethodName: "GetModelTags",
			Handler:    _MiddleSvc_GetModelTags_Handler,
		},
		{
			MethodName: "GetChartData",
			Handler:    _MiddleSvc_GetChartData_Handler,
		},
		{
			MethodName: "SetChartData",
			Handler:    _MiddleSvc_SetChartData_Handler,
		},
		{
			MethodName: "GetChartUrl",
			Handler:    _MiddleSvc_GetChartUrl_Handler,
		},
		{
			MethodName: "Pinyin",
			Handler:    _MiddleSvc_Pinyin_Handler,
		},
		{
			MethodName: "Segmentation",
			Handler:    _MiddleSvc_Segmentation_Handler,
		},
		{
			MethodName: "Classifier",
			Handler:    _MiddleSvc_Classifier_Handler,
		},
		{
			MethodName: "CreateAvatar",
			Handler:    _MiddleSvc_CreateAvatar_Handler,
		},
		{
			MethodName: "CreateCounter",
			Handler:    _MiddleSvc_CreateCounter_Handler,
		},
		{
			MethodName: "GetCounter",
			Handler:    _MiddleSvc_GetCounter_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _MiddleSvc_GetCounters_Handler,
		},
		{
			MethodName: "ChangeCounter",
			Handler:    _MiddleSvc_ChangeCounter_Handler,
		},
		{
			MethodName: "ResetCounter",
			Handler:    _MiddleSvc_ResetCounter_Handler,
		},
		{
			MethodName: "GetCounterByFlag",
			Handler:    _MiddleSvc_GetCounterByFlag_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MiddleSvc_Search_Handler,
		},
		{
			MethodName: "CollectMetadata",
			Handler:    _MiddleSvc_CollectMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middle.proto",
}
