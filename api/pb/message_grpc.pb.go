// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSvcClient is the client API for MessageSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSvcClient interface {
	List(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessagesReply, error)
	Get(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
	Create(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
	Delete(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*TextReply, error)
	Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StateReply, error)
	Run(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*TextReply, error)
	GetActionMessages(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*ActionReply, error)
	CreateActionMessage(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteWorkflowMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupsReply, error)
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupReply, error)
}

type messageSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSvcClient(cc grpc.ClientConnInterface) MessageSvcClient {
	return &messageSvcClient{cc}
}

func (c *messageSvcClient) List(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessagesReply, error) {
	out := new(MessagesReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) Get(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) Create(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) Delete(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) Run(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) GetActionMessages(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/GetActionMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) CreateActionMessage(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/CreateActionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) DeleteWorkflowMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/DeleteWorkflowMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) GetGroups(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupsReply, error) {
	out := new(GroupsReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSvcClient) GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupReply, error) {
	out := new(GroupReply)
	err := c.cc.Invoke(ctx, "/pb.MessageSvc/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSvcServer is the server API for MessageSvc service.
// All implementations must embed UnimplementedMessageSvcServer
// for forward compatibility
type MessageSvcServer interface {
	List(context.Context, *MessageRequest) (*MessagesReply, error)
	Get(context.Context, *MessageRequest) (*MessageReply, error)
	Create(context.Context, *MessageRequest) (*MessageReply, error)
	Delete(context.Context, *MessageRequest) (*TextReply, error)
	Send(context.Context, *MessageRequest) (*StateReply, error)
	Run(context.Context, *MessageRequest) (*TextReply, error)
	GetActionMessages(context.Context, *TextRequest) (*ActionReply, error)
	CreateActionMessage(context.Context, *TextRequest) (*StateReply, error)
	DeleteWorkflowMessage(context.Context, *MessageRequest) (*StateReply, error)
	GetGroups(context.Context, *GroupRequest) (*GroupsReply, error)
	CreateGroup(context.Context, *GroupRequest) (*StateReply, error)
	GetGroup(context.Context, *GroupRequest) (*GroupReply, error)
	mustEmbedUnimplementedMessageSvcServer()
}

// UnimplementedMessageSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMessageSvcServer struct {
}

func (UnimplementedMessageSvcServer) List(context.Context, *MessageRequest) (*MessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMessageSvcServer) Get(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMessageSvcServer) Create(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMessageSvcServer) Delete(context.Context, *MessageRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMessageSvcServer) Send(context.Context, *MessageRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageSvcServer) Run(context.Context, *MessageRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedMessageSvcServer) GetActionMessages(context.Context, *TextRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionMessages not implemented")
}
func (UnimplementedMessageSvcServer) CreateActionMessage(context.Context, *TextRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActionMessage not implemented")
}
func (UnimplementedMessageSvcServer) DeleteWorkflowMessage(context.Context, *MessageRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowMessage not implemented")
}
func (UnimplementedMessageSvcServer) GetGroups(context.Context, *GroupRequest) (*GroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedMessageSvcServer) CreateGroup(context.Context, *GroupRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMessageSvcServer) GetGroup(context.Context, *GroupRequest) (*GroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedMessageSvcServer) mustEmbedUnimplementedMessageSvcServer() {}

// UnsafeMessageSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSvcServer will
// result in compilation errors.
type UnsafeMessageSvcServer interface {
	mustEmbedUnimplementedMessageSvcServer()
}

func RegisterMessageSvcServer(s grpc.ServiceRegistrar, srv MessageSvcServer) {
	s.RegisterService(&MessageSvc_ServiceDesc, srv)
}

func _MessageSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).List(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).Get(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).Create(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).Delete(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).Send(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).Run(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_GetActionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).GetActionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/GetActionMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).GetActionMessages(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_CreateActionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).CreateActionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/CreateActionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).CreateActionMessage(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_DeleteWorkflowMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).DeleteWorkflowMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/DeleteWorkflowMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).DeleteWorkflowMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).GetGroups(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageSvc/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSvcServer).GetGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageSvc_ServiceDesc is the grpc.ServiceDesc for MessageSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MessageSvc",
	HandlerType: (*MessageSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MessageSvc_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MessageSvc_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MessageSvc_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MessageSvc_Delete_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _MessageSvc_Send_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _MessageSvc_Run_Handler,
		},
		{
			MethodName: "GetActionMessages",
			Handler:    _MessageSvc_GetActionMessages_Handler,
		},
		{
			MethodName: "CreateActionMessage",
			Handler:    _MessageSvc_CreateActionMessage_Handler,
		},
		{
			MethodName: "DeleteWorkflowMessage",
			Handler:    _MessageSvc_DeleteWorkflowMessage_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _MessageSvc_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MessageSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _MessageSvc_GetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
