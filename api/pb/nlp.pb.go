// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nlp.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WordsReply struct {
	Text                 []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WordsReply) Reset()         { *m = WordsReply{} }
func (m *WordsReply) String() string { return proto.CompactTextString(m) }
func (*WordsReply) ProtoMessage()    {}
func (*WordsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebd3cd177a18baf, []int{0}
}
func (m *WordsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WordsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WordsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WordsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordsReply.Merge(m, src)
}
func (m *WordsReply) XXX_Size() int {
	return m.Size()
}
func (m *WordsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WordsReply.DiscardUnknown(m)
}

var xxx_messageInfo_WordsReply proto.InternalMessageInfo

func (m *WordsReply) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func init() {
	proto.RegisterType((*WordsReply)(nil), "pb.WordsReply")
}

func init() { proto.RegisterFile("nlp.proto", fileDescriptor_6ebd3cd177a18baf) }

var fileDescriptor_6ebd3cd177a18baf = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcb, 0x29, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x4a, 0x4a, 0x2c, 0x4e, 0x85,
	0xf0, 0x95, 0x14, 0xb8, 0xb8, 0xc2, 0xf3, 0x8b, 0x52, 0x8a, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x85,
	0x84, 0xb8, 0x58, 0x4a, 0x52, 0x2b, 0x4a, 0x24, 0x18, 0x15, 0x98, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0xa3, 0x19, 0x8c, 0x5c, 0x6c, 0x7e, 0x3e, 0x01, 0xc1, 0x65, 0xc9, 0x42, 0xda, 0x5c, 0x6c, 0x01,
	0x99, 0x79, 0x95, 0x99, 0x79, 0x42, 0xfc, 0x7a, 0x05, 0x49, 0x7a, 0x21, 0xa9, 0x15, 0x25, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x7c, 0x20, 0x01, 0x84, 0x49, 0x4a, 0x0c, 0x42, 0x86,
	0x5c, 0x3c, 0xc1, 0xa9, 0xe9, 0xb9, 0xa9, 0x79, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x44, 0x69, 0xd1,
	0xe3, 0xe2, 0x72, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xcb, 0x4c, 0x2d, 0xc2, 0xd4, 0xc0, 0x8b,
	0x10, 0x00, 0xab, 0x77, 0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x88, 0x62, 0x4b, 0x2c, 0xc8, 0xd4, 0x2f, 0x48, 0x4a, 0x62,
	0x03, 0xfb, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x6a, 0xbd, 0xe9, 0xfa, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NLPSvcClient is the client API for NLPSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NLPSvcClient interface {
	Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error)
	Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
}

type nLPSvcClient struct {
	cc *grpc.ClientConn
}

func NewNLPSvcClient(cc *grpc.ClientConn) NLPSvcClient {
	return &nLPSvcClient{cc}
}

func (c *nLPSvcClient) Pinyin(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Pinyin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPSvcClient) Segmentation(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Segmentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPSvcClient) Classifier(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/pb.NLPSvc/Classifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NLPSvcServer is the server API for NLPSvc service.
type NLPSvcServer interface {
	Pinyin(context.Context, *TextRequest) (*WordsReply, error)
	Segmentation(context.Context, *TextRequest) (*WordsReply, error)
	Classifier(context.Context, *TextRequest) (*TextReply, error)
}

// UnimplementedNLPSvcServer can be embedded to have forward compatible implementations.
type UnimplementedNLPSvcServer struct {
}

func (*UnimplementedNLPSvcServer) Pinyin(ctx context.Context, req *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pinyin not implemented")
}
func (*UnimplementedNLPSvcServer) Segmentation(ctx context.Context, req *TextRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Segmentation not implemented")
}
func (*UnimplementedNLPSvcServer) Classifier(ctx context.Context, req *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classifier not implemented")
}

func RegisterNLPSvcServer(s *grpc.Server, srv NLPSvcServer) {
	s.RegisterService(&_NLPSvc_serviceDesc, srv)
}

func _NLPSvc_Pinyin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Pinyin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Pinyin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Pinyin(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLPSvc_Segmentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Segmentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Segmentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Segmentation(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLPSvc_Classifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPSvcServer).Classifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLPSvc/Classifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPSvcServer).Classifier(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NLPSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NLPSvc",
	HandlerType: (*NLPSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pinyin",
			Handler:    _NLPSvc_Pinyin_Handler,
		},
		{
			MethodName: "Segmentation",
			Handler:    _NLPSvc_Segmentation_Handler,
		},
		{
			MethodName: "Classifier",
			Handler:    _NLPSvc_Classifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}

func (m *WordsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WordsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WordsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		for iNdEx := len(m.Text) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Text[iNdEx])
			copy(dAtA[i:], m.Text[iNdEx])
			i = encodeVarintNlp(dAtA, i, uint64(len(m.Text[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNlp(dAtA []byte, offset int, v uint64) int {
	offset -= sovNlp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WordsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovNlp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNlp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNlp(x uint64) (n int) {
	return sovNlp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WordsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNlp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WordsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WordsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNlp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNlp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNlp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNlp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNlp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNlp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNlp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNlp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNlp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNlp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNlp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNlp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNlp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNlp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNlp = fmt.Errorf("proto: unexpected end of group")
)
