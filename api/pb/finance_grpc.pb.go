// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinanceSvcClient is the client API for FinanceSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceSvcClient interface {
	CreateBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*BillReply, error)
	GetBills(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*BillsReply, error)
	DeleteBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetFund(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*FundReply, error)
	GetStock(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StockReply, error)
}

type financeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceSvcClient(cc grpc.ClientConnInterface) FinanceSvcClient {
	return &financeSvcClient{cc}
}

func (c *financeSvcClient) CreateBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/CreateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeSvcClient) GetBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*BillReply, error) {
	out := new(BillReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/GetBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeSvcClient) GetBills(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*BillsReply, error) {
	out := new(BillsReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/GetBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeSvcClient) DeleteBill(ctx context.Context, in *BillRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/DeleteBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeSvcClient) GetFund(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*FundReply, error) {
	out := new(FundReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/GetFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeSvcClient) GetStock(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*StockReply, error) {
	out := new(StockReply)
	err := c.cc.Invoke(ctx, "/pb.FinanceSvc/GetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceSvcServer is the server API for FinanceSvc service.
// All implementations should embed UnimplementedFinanceSvcServer
// for forward compatibility
type FinanceSvcServer interface {
	CreateBill(context.Context, *BillRequest) (*StateReply, error)
	GetBill(context.Context, *BillRequest) (*BillReply, error)
	GetBills(context.Context, *BillRequest) (*BillsReply, error)
	DeleteBill(context.Context, *BillRequest) (*StateReply, error)
	GetFund(context.Context, *TextRequest) (*FundReply, error)
	GetStock(context.Context, *TextRequest) (*StockReply, error)
}

// UnimplementedFinanceSvcServer should be embedded to have forward compatible implementations.
type UnimplementedFinanceSvcServer struct {
}

func (UnimplementedFinanceSvcServer) CreateBill(context.Context, *BillRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBill not implemented")
}
func (UnimplementedFinanceSvcServer) GetBill(context.Context, *BillRequest) (*BillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBill not implemented")
}
func (UnimplementedFinanceSvcServer) GetBills(context.Context, *BillRequest) (*BillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBills not implemented")
}
func (UnimplementedFinanceSvcServer) DeleteBill(context.Context, *BillRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBill not implemented")
}
func (UnimplementedFinanceSvcServer) GetFund(context.Context, *TextRequest) (*FundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFund not implemented")
}
func (UnimplementedFinanceSvcServer) GetStock(context.Context, *TextRequest) (*StockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}

// UnsafeFinanceSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceSvcServer will
// result in compilation errors.
type UnsafeFinanceSvcServer interface {
	mustEmbedUnimplementedFinanceSvcServer()
}

func RegisterFinanceSvcServer(s grpc.ServiceRegistrar, srv FinanceSvcServer) {
	s.RegisterService(&FinanceSvc_ServiceDesc, srv)
}

func _FinanceSvc_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).CreateBill(ctx, req.(*BillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceSvc_GetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).GetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/GetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).GetBill(ctx, req.(*BillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceSvc_GetBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).GetBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/GetBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).GetBills(ctx, req.(*BillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceSvc_DeleteBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).DeleteBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/DeleteBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).DeleteBill(ctx, req.(*BillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceSvc_GetFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).GetFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/GetFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).GetFund(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceSvc_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceSvcServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FinanceSvc/GetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceSvcServer).GetStock(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceSvc_ServiceDesc is the grpc.ServiceDesc for FinanceSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FinanceSvc",
	HandlerType: (*FinanceSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _FinanceSvc_CreateBill_Handler,
		},
		{
			MethodName: "GetBill",
			Handler:    _FinanceSvc_GetBill_Handler,
		},
		{
			MethodName: "GetBills",
			Handler:    _FinanceSvc_GetBills_Handler,
		},
		{
			MethodName: "DeleteBill",
			Handler:    _FinanceSvc_DeleteBill_Handler,
		},
		{
			MethodName: "GetFund",
			Handler:    _FinanceSvc_GetFund_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _FinanceSvc_GetStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
