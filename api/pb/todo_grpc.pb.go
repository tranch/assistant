// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoSvcClient is the client API for TodoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoSvcClient interface {
	CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error)
	GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error)
	GetRemindTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error)
	DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type todoSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoSvcClient(cc grpc.ClientConnInterface) TodoSvcClient {
	return &todoSvcClient{cc}
}

func (c *todoSvcClient) CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error) {
	out := new(TodoReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error) {
	out := new(TodosReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetRemindTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error) {
	out := new(TodosReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetRemindTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/CompleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoSvcServer is the server API for TodoSvc service.
// All implementations should embed UnimplementedTodoSvcServer
// for forward compatibility
type TodoSvcServer interface {
	CreateTodo(context.Context, *TodoRequest) (*StateReply, error)
	GetTodo(context.Context, *TodoRequest) (*TodoReply, error)
	GetTodos(context.Context, *TodoRequest) (*TodosReply, error)
	GetRemindTodos(context.Context, *TodoRequest) (*TodosReply, error)
	DeleteTodo(context.Context, *TodoRequest) (*StateReply, error)
	UpdateTodo(context.Context, *TodoRequest) (*StateReply, error)
	CompleteTodo(context.Context, *TodoRequest) (*StateReply, error)
}

// UnimplementedTodoSvcServer should be embedded to have forward compatible implementations.
type UnimplementedTodoSvcServer struct {
}

func (UnimplementedTodoSvcServer) CreateTodo(context.Context, *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoSvcServer) GetTodo(context.Context, *TodoRequest) (*TodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoSvcServer) GetTodos(context.Context, *TodoRequest) (*TodosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoSvcServer) GetRemindTodos(context.Context, *TodoRequest) (*TodosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemindTodos not implemented")
}
func (UnimplementedTodoSvcServer) DeleteTodo(context.Context, *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoSvcServer) UpdateTodo(context.Context, *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoSvcServer) CompleteTodo(context.Context, *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTodo not implemented")
}

// UnsafeTodoSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoSvcServer will
// result in compilation errors.
type UnsafeTodoSvcServer interface {
	mustEmbedUnimplementedTodoSvcServer()
}

func RegisterTodoSvcServer(s grpc.ServiceRegistrar, srv TodoSvcServer) {
	s.RegisterService(&TodoSvc_ServiceDesc, srv)
}

func _TodoSvc_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).CreateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetTodos(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetRemindTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetRemindTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetRemindTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetRemindTodos(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).DeleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).UpdateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_CompleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).CompleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/CompleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).CompleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoSvc_ServiceDesc is the grpc.ServiceDesc for TodoSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TodoSvc",
	HandlerType: (*TodoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoSvc_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodoSvc_GetTodo_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _TodoSvc_GetTodos_Handler,
		},
		{
			MethodName: "GetRemindTodos",
			Handler:    _TodoSvc_GetRemindTodos_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoSvc_DeleteTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodoSvc_UpdateTodo_Handler,
		},
		{
			MethodName: "CompleteTodo",
			Handler:    _TodoSvc_CompleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
