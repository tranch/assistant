// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowSvcClient is the client API for WorkflowSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowSvcClient interface {
	SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error)
	RunAction(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error)
	ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error)
	ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error)
}

type workflowSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowSvcClient(cc grpc.ClientConnInterface) WorkflowSvcClient {
	return &workflowSvcClient{cc}
}

func (c *workflowSvcClient) SyntaxCheck(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/SyntaxCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) RunAction(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/RunAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) WebhookTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/WebhookTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) CronTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/CronTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) CreateTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/CreateTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) DeleteTrigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/DeleteTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) ActionDoc(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WorkflowReply, error) {
	out := new(WorkflowReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/ActionDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowSvcClient) ListWebhook(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*WebhooksReply, error) {
	out := new(WebhooksReply)
	err := c.cc.Invoke(ctx, "/pb.WorkflowSvc/ListWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowSvcServer is the server API for WorkflowSvc service.
// All implementations should embed UnimplementedWorkflowSvcServer
// for forward compatibility
type WorkflowSvcServer interface {
	SyntaxCheck(context.Context, *WorkflowRequest) (*StateReply, error)
	RunAction(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	WebhookTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CronTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error)
	CreateTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	DeleteTrigger(context.Context, *TriggerRequest) (*StateReply, error)
	ActionDoc(context.Context, *WorkflowRequest) (*WorkflowReply, error)
	ListWebhook(context.Context, *WorkflowRequest) (*WebhooksReply, error)
}

// UnimplementedWorkflowSvcServer should be embedded to have forward compatible implementations.
type UnimplementedWorkflowSvcServer struct {
}

func (UnimplementedWorkflowSvcServer) SyntaxCheck(context.Context, *WorkflowRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyntaxCheck not implemented")
}
func (UnimplementedWorkflowSvcServer) RunAction(context.Context, *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAction not implemented")
}
func (UnimplementedWorkflowSvcServer) WebhookTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookTrigger not implemented")
}
func (UnimplementedWorkflowSvcServer) CronTrigger(context.Context, *TriggerRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronTrigger not implemented")
}
func (UnimplementedWorkflowSvcServer) CreateTrigger(context.Context, *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedWorkflowSvcServer) DeleteTrigger(context.Context, *TriggerRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrigger not implemented")
}
func (UnimplementedWorkflowSvcServer) ActionDoc(context.Context, *WorkflowRequest) (*WorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionDoc not implemented")
}
func (UnimplementedWorkflowSvcServer) ListWebhook(context.Context, *WorkflowRequest) (*WebhooksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhook not implemented")
}

// UnsafeWorkflowSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowSvcServer will
// result in compilation errors.
type UnsafeWorkflowSvcServer interface {
	mustEmbedUnimplementedWorkflowSvcServer()
}

func RegisterWorkflowSvcServer(s *grpc.Server, srv WorkflowSvcServer) {
	s.RegisterService(&_WorkflowSvc_serviceDesc, srv)
}

func _WorkflowSvc_SyntaxCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).SyntaxCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/SyntaxCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).SyntaxCheck(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_RunAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).RunAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/RunAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).RunAction(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_WebhookTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).WebhookTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/WebhookTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).WebhookTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_CronTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).CronTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/CronTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).CronTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/CreateTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).CreateTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_DeleteTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).DeleteTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/DeleteTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).DeleteTrigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_ActionDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).ActionDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/ActionDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).ActionDoc(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowSvc_ListWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowSvcServer).ListWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WorkflowSvc/ListWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowSvcServer).ListWebhook(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WorkflowSvc",
	HandlerType: (*WorkflowSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyntaxCheck",
			Handler:    _WorkflowSvc_SyntaxCheck_Handler,
		},
		{
			MethodName: "RunAction",
			Handler:    _WorkflowSvc_RunAction_Handler,
		},
		{
			MethodName: "WebhookTrigger",
			Handler:    _WorkflowSvc_WebhookTrigger_Handler,
		},
		{
			MethodName: "CronTrigger",
			Handler:    _WorkflowSvc_CronTrigger_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _WorkflowSvc_CreateTrigger_Handler,
		},
		{
			MethodName: "DeleteTrigger",
			Handler:    _WorkflowSvc_DeleteTrigger_Handler,
		},
		{
			MethodName: "ActionDoc",
			Handler:    _WorkflowSvc_ActionDoc_Handler,
		},
		{
			MethodName: "ListWebhook",
			Handler:    _WorkflowSvc_ListWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}
