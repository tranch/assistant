// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TodoRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TodoRequest) Reset()         { *m = TodoRequest{} }
func (m *TodoRequest) String() string { return proto.CompactTextString(m) }
func (*TodoRequest) ProtoMessage()    {}
func (*TodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}
func (m *TodoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoRequest.Unmarshal(m, b)
}
func (m *TodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoRequest.Marshal(b, m, deterministic)
}
func (m *TodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoRequest.Merge(m, src)
}
func (m *TodoRequest) XXX_Size() int {
	return xxx_messageInfo_TodoRequest.Size(m)
}
func (m *TodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TodoRequest proto.InternalMessageInfo

func (m *TodoRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TodoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TodoReply struct {
	Todo                 *TodoItem `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TodoReply) Reset()         { *m = TodoReply{} }
func (m *TodoReply) String() string { return proto.CompactTextString(m) }
func (*TodoReply) ProtoMessage()    {}
func (*TodoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}
func (m *TodoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoReply.Unmarshal(m, b)
}
func (m *TodoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoReply.Marshal(b, m, deterministic)
}
func (m *TodoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoReply.Merge(m, src)
}
func (m *TodoReply) XXX_Size() int {
	return xxx_messageInfo_TodoReply.Size(m)
}
func (m *TodoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodoReply proto.InternalMessageInfo

func (m *TodoReply) GetTodo() *TodoItem {
	if m != nil {
		return m.Todo
	}
	return nil
}

type TodosReply struct {
	Todos                []*TodoItem `protobuf:"bytes,1,rep,name=todos,proto3" json:"todos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TodosReply) Reset()         { *m = TodosReply{} }
func (m *TodosReply) String() string { return proto.CompactTextString(m) }
func (*TodosReply) ProtoMessage()    {}
func (*TodosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{2}
}
func (m *TodosReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodosReply.Unmarshal(m, b)
}
func (m *TodosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodosReply.Marshal(b, m, deterministic)
}
func (m *TodosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodosReply.Merge(m, src)
}
func (m *TodosReply) XXX_Size() int {
	return xxx_messageInfo_TodosReply.Size(m)
}
func (m *TodosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodosReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodosReply proto.InternalMessageInfo

func (m *TodosReply) GetTodos() []*TodoItem {
	if m != nil {
		return m.Todos
	}
	return nil
}

type TodoItem struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TodoItem) Reset()         { *m = TodoItem{} }
func (m *TodoItem) String() string { return proto.CompactTextString(m) }
func (*TodoItem) ProtoMessage()    {}
func (*TodoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{3}
}
func (m *TodoItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoItem.Unmarshal(m, b)
}
func (m *TodoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoItem.Marshal(b, m, deterministic)
}
func (m *TodoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoItem.Merge(m, src)
}
func (m *TodoItem) XXX_Size() int {
	return xxx_messageInfo_TodoItem.Size(m)
}
func (m *TodoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoItem.DiscardUnknown(m)
}

var xxx_messageInfo_TodoItem proto.InternalMessageInfo

func (m *TodoItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*TodoRequest)(nil), "pb.TodoRequest")
	proto.RegisterType((*TodoReply)(nil), "pb.TodoReply")
	proto.RegisterType((*TodosReply)(nil), "pb.TodosReply")
	proto.RegisterType((*TodoItem)(nil), "pb.TodoItem")
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639) }

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x6e, 0xd2, 0x50, 0xd2, 0xaf, 0xa5, 0x48, 0x9e, 0xa2, 0x0e, 0x28, 0xf2, 0x54, 0x09, 0x35,
	0xa1, 0xe5, 0x0d, 0x28, 0x12, 0x62, 0x0d, 0xb0, 0xb0, 0xd9, 0xf2, 0x0d, 0x91, 0x1a, 0x6c, 0x6a,
	0x33, 0xf0, 0x46, 0x3c, 0x26, 0xb2, 0xdd, 0x92, 0x01, 0x90, 0xda, 0xcd, 0xf7, 0xfd, 0xdd, 0x77,
	0x32, 0xe0, 0xb4, 0xd2, 0x95, 0xd9, 0x69, 0xa7, 0x59, 0x6a, 0xe4, 0x1c, 0x52, 0x58, 0x8a, 0x33,
	0x5f, 0x61, 0xf2, 0xac, 0x95, 0x6e, 0xe8, 0xfd, 0x83, 0xac, 0x63, 0x33, 0xa4, 0xad, 0x2a, 0x92,
	0x32, 0x59, 0x0c, 0x9b, 0xb4, 0x55, 0x8c, 0x21, 0x7b, 0x13, 0x1d, 0x15, 0x69, 0x99, 0x2c, 0xc6,
	0x4d, 0x78, 0xf3, 0x25, 0xc6, 0xd1, 0x62, 0xb6, 0x9f, 0xac, 0x44, 0xe6, 0xd3, 0x83, 0x65, 0xb2,
	0x9e, 0x56, 0x46, 0x56, 0x9e, 0x7c, 0x74, 0xd4, 0x35, 0x81, 0xe1, 0x37, 0x80, 0x47, 0x6c, 0xd4,
	0x73, 0x9c, 0x79, 0xd4, 0x16, 0x49, 0x39, 0xfc, 0x65, 0x88, 0x14, 0xbf, 0x42, 0x7e, 0x80, 0x7e,
	0x0a, 0x24, 0x7d, 0x81, 0xf5, 0x57, 0x8a, 0xcc, 0x0b, 0x58, 0x0d, 0x6c, 0x76, 0x24, 0x1c, 0x85,
	0xe9, 0xf2, 0x90, 0xb5, 0x3f, 0x66, 0x3e, 0xf3, 0xc0, 0x93, 0x13, 0x8e, 0xc2, 0x6e, 0x3e, 0x60,
	0xd7, 0x38, 0x7f, 0x20, 0xf7, 0xb7, 0xfa, 0xa2, 0x07, 0xa2, 0x78, 0x89, 0x7c, 0x2f, 0xb6, 0xff,
	0x64, 0xf7, 0x77, 0xf1, 0x81, 0x2f, 0x73, 0x4f, 0x5b, 0x3a, 0xbe, 0x4c, 0x0d, 0xbc, 0x18, 0x75,
	0x42, 0xfb, 0x15, 0xa6, 0x1b, 0xdd, 0x99, 0x13, 0x76, 0xdc, 0xe5, 0xaf, 0x23, 0x61, 0xda, 0xda,
	0x48, 0x39, 0x0a, 0xff, 0x7d, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x0a, 0xc8, 0x89, 0x0d,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodoClient interface {
	CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error)
	GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error)
	DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type todoClient struct {
	cc *grpc.ClientConn
}

func NewTodoClient(cc *grpc.ClientConn) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error) {
	out := new(TodoReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error) {
	out := new(TodosReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.Todo/CompleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
type TodoServer interface {
	CreateTodo(context.Context, *TodoRequest) (*StateReply, error)
	GetTodo(context.Context, *TodoRequest) (*TodoReply, error)
	GetTodos(context.Context, *TodoRequest) (*TodosReply, error)
	DeleteTodo(context.Context, *TodoRequest) (*StateReply, error)
	UpdateTodo(context.Context, *TodoRequest) (*StateReply, error)
	CompleteTodo(context.Context, *TodoRequest) (*StateReply, error)
}

// UnimplementedTodoServer can be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (*UnimplementedTodoServer) CreateTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (*UnimplementedTodoServer) GetTodo(ctx context.Context, req *TodoRequest) (*TodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (*UnimplementedTodoServer) GetTodos(ctx context.Context, req *TodoRequest) (*TodosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (*UnimplementedTodoServer) DeleteTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (*UnimplementedTodoServer) UpdateTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (*UnimplementedTodoServer) CompleteTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTodo not implemented")
}

func RegisterTodoServer(s *grpc.Server, srv TodoServer) {
	s.RegisterService(&_Todo_serviceDesc, srv)
}

func _Todo_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CreateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetTodos(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).UpdateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_CompleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CompleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Todo/CompleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CompleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Todo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _Todo_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _Todo_GetTodo_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _Todo_GetTodos_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _Todo_DeleteTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _Todo_UpdateTodo_Handler,
		},
		{
			MethodName: "CompleteTodo",
			Handler:    _Todo_CompleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
