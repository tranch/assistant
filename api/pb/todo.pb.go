// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TodoRequest struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *TodoRequest) Reset()         { *m = TodoRequest{} }
func (m *TodoRequest) String() string { return proto.CompactTextString(m) }
func (*TodoRequest) ProtoMessage()    {}
func (*TodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}
func (m *TodoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoRequest.Unmarshal(m, b)
}
func (m *TodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoRequest.Marshal(b, m, deterministic)
}
func (m *TodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoRequest.Merge(m, src)
}
func (m *TodoRequest) XXX_Size() int {
	return xxx_messageInfo_TodoRequest.Size(m)
}
func (m *TodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TodoRequest proto.InternalMessageInfo

func (m *TodoRequest) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type TodoReply struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *TodoReply) Reset()         { *m = TodoReply{} }
func (m *TodoReply) String() string { return proto.CompactTextString(m) }
func (*TodoReply) ProtoMessage()    {}
func (*TodoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}
func (m *TodoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoReply.Unmarshal(m, b)
}
func (m *TodoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoReply.Marshal(b, m, deterministic)
}
func (m *TodoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoReply.Merge(m, src)
}
func (m *TodoReply) XXX_Size() int {
	return xxx_messageInfo_TodoReply.Size(m)
}
func (m *TodoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodoReply proto.InternalMessageInfo

func (m *TodoReply) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type TodosReply struct {
	Todos []*Todo `protobuf:"bytes,1,rep,name=todos,proto3" json:"todos,omitempty"`
}

func (m *TodosReply) Reset()         { *m = TodosReply{} }
func (m *TodosReply) String() string { return proto.CompactTextString(m) }
func (*TodosReply) ProtoMessage()    {}
func (*TodosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{2}
}
func (m *TodosReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodosReply.Unmarshal(m, b)
}
func (m *TodosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodosReply.Marshal(b, m, deterministic)
}
func (m *TodosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodosReply.Merge(m, src)
}
func (m *TodosReply) XXX_Size() int {
	return xxx_messageInfo_TodosReply.Size(m)
}
func (m *TodosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodosReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodosReply proto.InternalMessageInfo

func (m *TodosReply) GetTodos() []*Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Todo struct {
	// @inject_tag: db:"id" gorm:"primaryKey"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" gorm:"primaryKey"`
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" db:"content"`
	// @inject_tag: db:"category"
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty" db:"category"`
	// @inject_tag: db:"remark"
	Remark string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty" db:"remark"`
	// @inject_tag: db:"priority"
	Priority int64 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty" db:"priority"`
	// @inject_tag: db:"is_remind_at_time"
	IsRemindAtTime bool `protobuf:"varint,6,opt,name=is_remind_at_time,json=isRemindAtTime,proto3" json:"is_remind_at_time,omitempty" db:"is_remind_at_time"`
	// @inject_tag: db:"remind_at"
	RemindAt int64 `protobuf:"varint,7,opt,name=remind_at,json=remindAt,proto3" json:"remind_at,omitempty" db:"remind_at"`
	// @inject_tag: db:"repeat_method"
	RepeatMethod string `protobuf:"bytes,8,opt,name=repeat_method,json=repeatMethod,proto3" json:"repeat_method,omitempty" db:"repeat_method"`
	// @inject_tag: db:"repeat_rule"
	RepeatRule string `protobuf:"bytes,9,opt,name=repeat_rule,json=repeatRule,proto3" json:"repeat_rule,omitempty" db:"repeat_rule"`
	// @inject_tag: db:"repeat_end_at"
	RepeatEndAt int64 `protobuf:"varint,10,opt,name=repeat_end_at,json=repeatEndAt,proto3" json:"repeat_end_at,omitempty" db:"repeat_end_at"`
	// @inject_tag: db:"complete"
	Complete bool `protobuf:"varint,11,opt,name=complete,proto3" json:"complete,omitempty" db:"complete"`
	// @inject_tag: db:"created_at"
	CreatedAt int64 `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" db:"created_at"`
	// @inject_tag: db:"updated_at"
	UpdatedAt int64 `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" db:"updated_at"`
}

func (m *Todo) Reset()         { *m = Todo{} }
func (m *Todo) String() string { return proto.CompactTextString(m) }
func (*Todo) ProtoMessage()    {}
func (*Todo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{3}
}
func (m *Todo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Todo.Unmarshal(m, b)
}
func (m *Todo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Todo.Marshal(b, m, deterministic)
}
func (m *Todo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Todo.Merge(m, src)
}
func (m *Todo) XXX_Size() int {
	return xxx_messageInfo_Todo.Size(m)
}
func (m *Todo) XXX_DiscardUnknown() {
	xxx_messageInfo_Todo.DiscardUnknown(m)
}

var xxx_messageInfo_Todo proto.InternalMessageInfo

func (m *Todo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Todo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Todo) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Todo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Todo) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Todo) GetIsRemindAtTime() bool {
	if m != nil {
		return m.IsRemindAtTime
	}
	return false
}

func (m *Todo) GetRemindAt() int64 {
	if m != nil {
		return m.RemindAt
	}
	return 0
}

func (m *Todo) GetRepeatMethod() string {
	if m != nil {
		return m.RepeatMethod
	}
	return ""
}

func (m *Todo) GetRepeatRule() string {
	if m != nil {
		return m.RepeatRule
	}
	return ""
}

func (m *Todo) GetRepeatEndAt() int64 {
	if m != nil {
		return m.RepeatEndAt
	}
	return 0
}

func (m *Todo) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *Todo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Todo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*TodoRequest)(nil), "pb.TodoRequest")
	proto.RegisterType((*TodoReply)(nil), "pb.TodoReply")
	proto.RegisterType((*TodosReply)(nil), "pb.TodosReply")
	proto.RegisterType((*Todo)(nil), "pb.Todo")
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639) }

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x93, 0x34, 0x3f, 0x93, 0x1f, 0xc4, 0x0a, 0xa1, 0x55, 0x28, 0x26, 0x32, 0x97, 0x54,
	0x85, 0x44, 0xb4, 0x4f, 0x10, 0x0a, 0xea, 0x89, 0x8b, 0x5b, 0x2e, 0x5c, 0x22, 0x27, 0x1e, 0x85,
	0x15, 0x71, 0x76, 0x59, 0x4f, 0x90, 0xf2, 0x0e, 0x1c, 0x78, 0x2c, 0x8e, 0x3d, 0x72, 0xa4, 0xca,
	0x8b, 0xa0, 0x9d, 0x75, 0x5d, 0x21, 0x81, 0x9a, 0xdb, 0x7e, 0x7f, 0x33, 0xeb, 0x99, 0x35, 0x00,
	0xe9, 0x4c, 0x4f, 0x8c, 0xd5, 0xa4, 0x45, 0xcd, 0x2c, 0x86, 0xb0, 0x48, 0x0b, 0xf4, 0x78, 0xf8,
	0x64, 0xa5, 0x57, 0x9a, 0x8f, 0x53, 0x77, 0xf2, 0x6c, 0x7c, 0x0a, 0xdd, 0x6b, 0x9d, 0xe9, 0x04,
	0xbf, 0x6e, 0xb1, 0x20, 0x71, 0x0c, 0x0d, 0x57, 0x42, 0x86, 0xa3, 0x70, 0xdc, 0x3d, 0x6b, 0x4f,
	0xcc, 0x62, 0xc2, 0x32, 0xb3, 0xf1, 0x09, 0x74, 0xbc, 0xd9, 0xac, 0x77, 0x0f, 0x58, 0x5f, 0x01,
	0x38, 0x54, 0x78, 0x6f, 0x04, 0x47, 0x8e, 0x2d, 0x64, 0x38, 0xaa, 0xff, 0x65, 0xf6, 0x74, 0xfc,
	0xbd, 0x0e, 0x0d, 0x87, 0xc5, 0x00, 0x6a, 0x2a, 0xe3, 0x92, 0xf5, 0xa4, 0xa6, 0x32, 0x21, 0xa1,
	0xb5, 0xd4, 0x1b, 0xc2, 0x0d, 0xc9, 0xda, 0x28, 0x1c, 0x77, 0x92, 0x3b, 0x28, 0x86, 0xd0, 0x5e,
	0xa6, 0x84, 0x2b, 0x6d, 0x77, 0xb2, 0xce, 0x52, 0x85, 0xc5, 0x53, 0x68, 0x5a, 0xcc, 0x53, 0xfb,
	0x45, 0x36, 0x58, 0x29, 0x91, 0xcb, 0x18, 0xab, 0xb4, 0x55, 0xb4, 0x93, 0x47, 0xdc, 0xa3, 0xc2,
	0xe2, 0x04, 0x1e, 0xab, 0x62, 0x6e, 0x31, 0x57, 0x9b, 0x6c, 0x9e, 0xd2, 0x9c, 0x54, 0x8e, 0xb2,
	0x39, 0x0a, 0xc7, 0xed, 0x64, 0xa0, 0x8a, 0x84, 0xf9, 0x19, 0x5d, 0xab, 0x1c, 0xc5, 0x33, 0xe8,
	0x54, 0x3e, 0xd9, 0xf2, 0x75, 0x6c, 0x69, 0x10, 0x2f, 0xa1, 0x6f, 0xd1, 0x60, 0x4a, 0xf3, 0x1c,
	0xe9, 0xb3, 0xce, 0x64, 0x9b, 0xaf, 0xd0, 0xf3, 0xe4, 0x07, 0xe6, 0xc4, 0x0b, 0xe8, 0x96, 0x26,
	0xbb, 0x5d, 0xa3, 0xec, 0xb0, 0x05, 0x3c, 0x95, 0x6c, 0xd7, 0x28, 0xe2, 0xaa, 0x0a, 0xfa, 0x36,
	0xc0, 0x6d, 0xca, 0xd4, 0x7b, 0xee, 0xe4, 0x26, 0xa0, 0x73, 0xb3, 0x46, 0x42, 0xd9, 0xe5, 0x8b,
	0x56, 0x58, 0x3c, 0x07, 0x58, 0x5a, 0x4c, 0x09, 0x39, 0xdc, 0xe3, 0x70, 0xa7, 0x64, 0x66, 0xe4,
	0xe4, 0xad, 0xc9, 0xee, 0xe4, 0xbe, 0x97, 0x4b, 0x66, 0x46, 0x67, 0xbf, 0x6b, 0xd0, 0x72, 0xeb,
	0xb8, 0xfa, 0xb6, 0x14, 0x53, 0x80, 0x0b, 0xce, 0xf1, 0x7e, 0x1e, 0x55, 0x9b, 0xf3, 0x0f, 0x66,
	0x38, 0x70, 0xc4, 0x15, 0xa5, 0x84, 0xbc, 0xe9, 0x38, 0x10, 0xa7, 0xd0, 0xba, 0x44, 0xfa, 0xb7,
	0xbb, 0x7f, 0x4f, 0x78, 0xf3, 0x6b, 0x68, 0x97, 0xe6, 0xe2, 0x3f, 0xb5, 0xef, 0x5f, 0x51, 0x1c,
	0x88, 0x73, 0x18, 0x5c, 0x22, 0xf9, 0x65, 0x1c, 0x1c, 0x9a, 0x02, 0xbc, 0x43, 0x37, 0x95, 0x43,
	0xbf, 0x60, 0x0a, 0xf0, 0x91, 0x67, 0x71, 0x68, 0xe0, 0x0d, 0xf4, 0x2e, 0xca, 0xc9, 0x1f, 0x18,
	0x79, 0x7b, 0xfc, 0xf3, 0x36, 0x0a, 0x6f, 0x6e, 0xa3, 0xe0, 0xc7, 0x3e, 0x0a, 0x6e, 0xf6, 0x51,
	0xf0, 0x6b, 0x1f, 0x05, 0x9f, 0x9a, 0xa9, 0x51, 0x53, 0xb3, 0x58, 0x34, 0xf9, 0xe7, 0x3c, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xa9, 0xa1, 0xbe, 0xd0, 0x03, 0x00, 0x00,
}
