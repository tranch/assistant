// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TodoRequest struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *TodoRequest) Reset()         { *m = TodoRequest{} }
func (m *TodoRequest) String() string { return proto.CompactTextString(m) }
func (*TodoRequest) ProtoMessage()    {}
func (*TodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}
func (m *TodoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoRequest.Unmarshal(m, b)
}
func (m *TodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoRequest.Marshal(b, m, deterministic)
}
func (m *TodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoRequest.Merge(m, src)
}
func (m *TodoRequest) XXX_Size() int {
	return xxx_messageInfo_TodoRequest.Size(m)
}
func (m *TodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TodoRequest proto.InternalMessageInfo

func (m *TodoRequest) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type TodoReply struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *TodoReply) Reset()         { *m = TodoReply{} }
func (m *TodoReply) String() string { return proto.CompactTextString(m) }
func (*TodoReply) ProtoMessage()    {}
func (*TodoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}
func (m *TodoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodoReply.Unmarshal(m, b)
}
func (m *TodoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodoReply.Marshal(b, m, deterministic)
}
func (m *TodoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodoReply.Merge(m, src)
}
func (m *TodoReply) XXX_Size() int {
	return xxx_messageInfo_TodoReply.Size(m)
}
func (m *TodoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodoReply proto.InternalMessageInfo

func (m *TodoReply) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type TodosReply struct {
	Todos []*Todo `protobuf:"bytes,1,rep,name=todos,proto3" json:"todos,omitempty"`
}

func (m *TodosReply) Reset()         { *m = TodosReply{} }
func (m *TodosReply) String() string { return proto.CompactTextString(m) }
func (*TodosReply) ProtoMessage()    {}
func (*TodosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{2}
}
func (m *TodosReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TodosReply.Unmarshal(m, b)
}
func (m *TodosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TodosReply.Marshal(b, m, deterministic)
}
func (m *TodosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TodosReply.Merge(m, src)
}
func (m *TodosReply) XXX_Size() int {
	return xxx_messageInfo_TodosReply.Size(m)
}
func (m *TodosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TodosReply.DiscardUnknown(m)
}

var xxx_messageInfo_TodosReply proto.InternalMessageInfo

func (m *TodosReply) GetTodos() []*Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Todo struct {
	// @inject_tag: db:"id" gorm:"primaryKey"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" gorm:"primaryKey"`
	// @inject_tag: db:"content"
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" db:"content"`
	// @inject_tag: db:"category"
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty" db:"category"`
	// @inject_tag: db:"remark"
	Remark string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty" db:"remark"`
	// @inject_tag: db:"priority"
	Priority int64 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty" db:"priority"`
	// @inject_tag: db:"is_remind_at_time"
	IsRemindAtTime bool `protobuf:"varint,6,opt,name=isRemindAtTime,proto3" json:"isRemindAtTime,omitempty" db:"is_remind_at_time"`
	// @inject_tag: db:"remind_at"
	RemindAt int64 `protobuf:"varint,7,opt,name=remindAt,proto3" json:"remindAt,omitempty" db:"remind_at"`
	// @inject_tag: db:"repeat_method"
	RepeatMethod string `protobuf:"bytes,8,opt,name=repeatMethod,proto3" json:"repeatMethod,omitempty" db:"repeat_method"`
	// @inject_tag: db:"repeat_rule"
	RepeatRule string `protobuf:"bytes,9,opt,name=repeatRule,proto3" json:"repeatRule,omitempty" db:"repeat_rule"`
	// @inject_tag: db:"repeat_end_at"
	RepeatEndAt int64 `protobuf:"varint,10,opt,name=repeatEndAt,proto3" json:"repeatEndAt,omitempty" db:"repeat_end_at"`
	// @inject_tag: db:"complete"
	Complete bool `protobuf:"varint,11,opt,name=complete,proto3" json:"complete,omitempty" db:"complete"`
	// @inject_tag: db:"created_at"
	CreatedAt int64 `protobuf:"varint,12,opt,name=createdAt,proto3" json:"createdAt,omitempty" db:"created_at"`
	// @inject_tag: db:"updated_at"
	UpdatedAt int64 `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty" db:"updated_at"`
}

func (m *Todo) Reset()         { *m = Todo{} }
func (m *Todo) String() string { return proto.CompactTextString(m) }
func (*Todo) ProtoMessage()    {}
func (*Todo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{3}
}
func (m *Todo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Todo.Unmarshal(m, b)
}
func (m *Todo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Todo.Marshal(b, m, deterministic)
}
func (m *Todo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Todo.Merge(m, src)
}
func (m *Todo) XXX_Size() int {
	return xxx_messageInfo_Todo.Size(m)
}
func (m *Todo) XXX_DiscardUnknown() {
	xxx_messageInfo_Todo.DiscardUnknown(m)
}

var xxx_messageInfo_Todo proto.InternalMessageInfo

func (m *Todo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Todo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Todo) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Todo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Todo) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Todo) GetIsRemindAtTime() bool {
	if m != nil {
		return m.IsRemindAtTime
	}
	return false
}

func (m *Todo) GetRemindAt() int64 {
	if m != nil {
		return m.RemindAt
	}
	return 0
}

func (m *Todo) GetRepeatMethod() string {
	if m != nil {
		return m.RepeatMethod
	}
	return ""
}

func (m *Todo) GetRepeatRule() string {
	if m != nil {
		return m.RepeatRule
	}
	return ""
}

func (m *Todo) GetRepeatEndAt() int64 {
	if m != nil {
		return m.RepeatEndAt
	}
	return 0
}

func (m *Todo) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *Todo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Todo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*TodoRequest)(nil), "pb.TodoRequest")
	proto.RegisterType((*TodoReply)(nil), "pb.TodoReply")
	proto.RegisterType((*TodosReply)(nil), "pb.TodosReply")
	proto.RegisterType((*Todo)(nil), "pb.Todo")
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639) }

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x9d, 0x34, 0x71, 0x26, 0x69, 0x90, 0x56, 0x08, 0xad, 0xa2, 0xc8, 0xb2, 0x7c, 0x40,
	0x41, 0x85, 0x58, 0xb4, 0x4f, 0x00, 0x05, 0xf5, 0xc4, 0xc5, 0x2d, 0x17, 0x6e, 0x76, 0x3c, 0x0a,
	0x2b, 0x92, 0xec, 0xb2, 0xde, 0x20, 0xe5, 0xca, 0x13, 0xf0, 0x58, 0x1c, 0x7b, 0xe4, 0x48, 0x95,
	0x17, 0x41, 0x3b, 0xeb, 0x3a, 0x0d, 0x02, 0xd5, 0xb7, 0xfd, 0xfe, 0x66, 0xbc, 0x33, 0x6b, 0x00,
	0x23, 0x4b, 0x39, 0x57, 0x5a, 0x1a, 0xc9, 0x02, 0x55, 0x4c, 0xa0, 0xc8, 0x2b, 0x74, 0x78, 0xf2,
	0x74, 0x29, 0x97, 0x92, 0x8e, 0xa9, 0x3d, 0x39, 0x36, 0x39, 0x83, 0xe1, 0x8d, 0x2c, 0x65, 0x86,
	0x5f, 0xb7, 0x58, 0x19, 0x36, 0x85, 0xae, 0x2d, 0xc1, 0xfd, 0xd8, 0x9f, 0x0d, 0xcf, 0xc3, 0xb9,
	0x2a, 0xe6, 0x24, 0x13, 0x9b, 0xbc, 0x80, 0x81, 0x33, 0xab, 0xd5, 0xee, 0x11, 0xeb, 0x4b, 0x00,
	0x8b, 0x2a, 0xe7, 0x8d, 0xe0, 0xc4, 0xb2, 0x15, 0xf7, 0xe3, 0xce, 0x91, 0xd9, 0xd1, 0xc9, 0xf7,
	0x0e, 0x74, 0x2d, 0x66, 0x63, 0x08, 0x44, 0x49, 0x25, 0x3b, 0x59, 0x20, 0x4a, 0xc6, 0xa1, 0xbf,
	0x90, 0x1b, 0x83, 0x1b, 0xc3, 0x83, 0xd8, 0x9f, 0x0d, 0xb2, 0x7b, 0xc8, 0x26, 0x10, 0x2e, 0x72,
	0x83, 0x4b, 0xa9, 0x77, 0xbc, 0x43, 0x52, 0x83, 0xd9, 0x33, 0xe8, 0x69, 0x5c, 0xe7, 0xfa, 0x0b,
	0xef, 0x92, 0x52, 0x23, 0x9b, 0x51, 0x5a, 0x48, 0x2d, 0xcc, 0x8e, 0x9f, 0x50, 0x8f, 0x06, 0xb3,
	0xe7, 0x30, 0x16, 0x55, 0x86, 0x6b, 0xb1, 0x29, 0xdf, 0x98, 0x1b, 0xb1, 0x46, 0xde, 0x8b, 0xfd,
	0x59, 0x98, 0xfd, 0xc5, 0xda, 0x1a, 0xba, 0xc6, 0xbc, 0xef, 0x6a, 0xdc, 0x63, 0x96, 0xc0, 0x48,
	0xa3, 0xc2, 0xdc, 0x7c, 0x40, 0xf3, 0x59, 0x96, 0x3c, 0xa4, 0xee, 0x47, 0x1c, 0x8b, 0x00, 0x1c,
	0xce, 0xb6, 0x2b, 0xe4, 0x03, 0x72, 0x3c, 0x60, 0x58, 0x0c, 0x43, 0x87, 0xde, 0x53, 0x0b, 0xa0,
	0x16, 0x0f, 0x29, 0xba, 0xb9, 0x5c, 0xab, 0x15, 0x1a, 0xe4, 0x43, 0xfa, 0xc6, 0x06, 0xb3, 0x29,
	0x0c, 0x16, 0x1a, 0x73, 0x83, 0x36, 0x3b, 0xa2, 0xec, 0x81, 0xb0, 0xea, 0x56, 0x95, 0xb5, 0x7a,
	0xea, 0xd4, 0x86, 0x38, 0xff, 0x1d, 0x40, 0xdf, 0x2e, 0xe1, 0xfa, 0xdb, 0x82, 0xa5, 0x00, 0x97,
	0x14, 0xa3, 0xad, 0x3c, 0x69, 0xf6, 0xe5, 0x9e, 0xc9, 0x64, 0x6c, 0x89, 0x6b, 0x93, 0x1b, 0xa4,
	0xfd, 0x26, 0x1e, 0x3b, 0x83, 0xfe, 0x15, 0x9a, 0x7f, 0xbb, 0x4f, 0x0f, 0x84, 0x33, 0xbf, 0x82,
	0xb0, 0x36, 0x57, 0xff, 0xa9, 0x7d, 0x78, 0x3b, 0x89, 0xc7, 0x2e, 0x60, 0x7c, 0x85, 0xc6, 0x6d,
	0xa1, 0x75, 0x28, 0x05, 0x78, 0x87, 0x76, 0x26, 0x6d, 0x6f, 0x90, 0x02, 0x7c, 0xa4, 0x59, 0xb4,
	0x0d, 0xbc, 0x86, 0xd1, 0x65, 0x3d, 0xf7, 0x96, 0x91, 0xb7, 0xd3, 0x9f, 0x77, 0x91, 0x7f, 0x7b,
	0x17, 0x79, 0x3f, 0xf6, 0x91, 0x77, 0xbb, 0x8f, 0xbc, 0x5f, 0xfb, 0xc8, 0xfb, 0xd4, 0xcb, 0x95,
	0x48, 0x55, 0x51, 0xf4, 0xe8, 0x97, 0xbc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x11, 0xa7, 0x56,
	0x90, 0xc6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TodoSvcClient is the client API for TodoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodoSvcClient interface {
	CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error)
	GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error)
	GetRemindTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error)
	DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
	CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error)
}

type todoSvcClient struct {
	cc *grpc.ClientConn
}

func NewTodoSvcClient(cc *grpc.ClientConn) TodoSvcClient {
	return &todoSvcClient{cc}
}

func (c *todoSvcClient) CreateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoReply, error) {
	out := new(TodoReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error) {
	out := new(TodosReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) GetRemindTodos(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodosReply, error) {
	out := new(TodosReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/GetRemindTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) DeleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) UpdateTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) CompleteTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := c.cc.Invoke(ctx, "/pb.TodoSvc/CompleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoSvcServer is the server API for TodoSvc service.
type TodoSvcServer interface {
	CreateTodo(context.Context, *TodoRequest) (*StateReply, error)
	GetTodo(context.Context, *TodoRequest) (*TodoReply, error)
	GetTodos(context.Context, *TodoRequest) (*TodosReply, error)
	GetRemindTodos(context.Context, *TodoRequest) (*TodosReply, error)
	DeleteTodo(context.Context, *TodoRequest) (*StateReply, error)
	UpdateTodo(context.Context, *TodoRequest) (*StateReply, error)
	CompleteTodo(context.Context, *TodoRequest) (*StateReply, error)
}

// UnimplementedTodoSvcServer can be embedded to have forward compatible implementations.
type UnimplementedTodoSvcServer struct {
}

func (*UnimplementedTodoSvcServer) CreateTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (*UnimplementedTodoSvcServer) GetTodo(ctx context.Context, req *TodoRequest) (*TodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (*UnimplementedTodoSvcServer) GetTodos(ctx context.Context, req *TodoRequest) (*TodosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (*UnimplementedTodoSvcServer) GetRemindTodos(ctx context.Context, req *TodoRequest) (*TodosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemindTodos not implemented")
}
func (*UnimplementedTodoSvcServer) DeleteTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (*UnimplementedTodoSvcServer) UpdateTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (*UnimplementedTodoSvcServer) CompleteTodo(ctx context.Context, req *TodoRequest) (*StateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTodo not implemented")
}

func RegisterTodoSvcServer(s *grpc.Server, srv TodoSvcServer) {
	s.RegisterService(&_TodoSvc_serviceDesc, srv)
}

func _TodoSvc_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).CreateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetTodos(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_GetRemindTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).GetRemindTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/GetRemindTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).GetRemindTodos(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).DeleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).UpdateTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_CompleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).CompleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TodoSvc/CompleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).CompleteTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TodoSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TodoSvc",
	HandlerType: (*TodoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoSvc_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodoSvc_GetTodo_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _TodoSvc_GetTodos_Handler,
		},
		{
			MethodName: "GetRemindTodos",
			Handler:    _TodoSvc_GetRemindTodos_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoSvc_DeleteTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodoSvc_UpdateTodo_Handler,
		},
		{
			MethodName: "CompleteTodo",
			Handler:    _TodoSvc_CompleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
