syntax = "proto3";
package pb;

import "base.proto";
import "message.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

option go_package = "api/pb";

service ChatbotSvc {
  rpc Handle(ChatbotRequest) returns (ChatbotReply) {}
  rpc Register(BotRequest) returns (StateReply) {}
  rpc Action(BotRequest) returns (StateReply) {}
  rpc GetBot(BotRequest) returns (BotReply) {}
  rpc GetBots(BotsRequest) returns (BotsReply) {}
  rpc CreateGroupBot(GroupBotRequest) returns (StateReply) {}
  rpc DeleteGroupBot(GroupBotRequest) returns (StateReply) {}
  rpc UpdateGroupBotSetting(BotSettingRequest) returns (StateReply) {}
  rpc UpdateGroupSetting(GroupSettingRequest) returns (StateReply) {}
  rpc GetGroupBotSetting(BotSettingRequest) returns (BotSettingReply) {}
  rpc GetGroupSetting(GroupSettingRequest) returns (GroupSettingReply) {}
  rpc GetGroups(GroupRequest) returns (GetGroupsReply) {}
  rpc CreateGroup(GroupRequest) returns (StateReply) {}
  rpc GetGroup(GroupRequest) returns (GetGroupReply) {}
  rpc GetGroupId(UuidRequest) returns (IdReply) {}
  rpc DeleteGroup(GroupRequest) returns (StateReply) {}
  rpc UpdateGroup(GroupRequest) returns (StateReply) {}
  rpc SyntaxCheck(WorkflowRequest) returns (StateReply) {}
  rpc RunActionScript(WorkflowRequest) returns (WorkflowReply) {}
  rpc WebhookTrigger(TriggerRequest) returns (WorkflowReply) {}
  rpc CronTrigger(TriggerRequest) returns (WorkflowReply) {}
  rpc CreateTrigger(TriggerRequest) returns (StateReply) {}
  rpc DeleteTrigger(TriggerRequest) returns (StateReply) {}
  rpc ActionDoc(WorkflowRequest) returns (WorkflowReply) {}
  rpc ListWebhook(WorkflowRequest) returns (WebhooksReply) {}
}

message ChatbotRequest {
  int64 message_id = 1;
  string message_uuid = 2;
}

message ChatbotReply {
  bool state = 1;
}

message GroupBotRequest {
  int64 group_id = 1;
  Bot bot = 2;
}

message BotSettingRequest {
  int64 group_id = 1;
  // @inject_tag: query:"group_uuid"
  string group_uuid = 2;
  int64 bot_id = 3;
  // @inject_tag: query:"bot_uuid"
  string bot_uuid = 4;
  repeated KV kvs = 5;
}

message BotSettingReply {
  int64 group_id = 1;
  int64 bot_id = 2;
  repeated KV kvs = 3;
}

message GroupSettingRequest {
  int64 group_id = 1;
  // @inject_tag: query:"group_uuid"
  string group_uuid = 2;
  repeated KV kvs = 3;
}

message GroupSettingReply {
  int64 group_id = 1;
  string group_uuid = 2;
  repeated KV kvs = 3;
}

message Group {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"sequence"
  int64 sequence = 2;
  // @inject_tag: db:"type"
  int32 type = 3;
  // @inject_tag: db:"uuid"
  string uuid = 4;
  // @inject_tag: db:"user_id"
  int64 user_id = 5;
  // @inject_tag: db:"name"
  string name = 6;
  // @inject_tag: db:"avatar"
  string avatar = 7;
  // @inject_tag: db:"created_at"
  int64 created_at = 8;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 9;
}

message GroupBot {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"group_id"
  int64 group_id = 2;
  // @inject_tag: db:"bot_id"
  int64 bot_id = 3;
  // @inject_tag: db:"created_at"
  int64 created_at = 4;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 5;
}

message GroupBotSetting {
  // @inject_tag: db:"group_id" json:"group_id,string"
  int64 group_id = 1;
  // @inject_tag: db:"bot_id"
  int64 bot_id = 2;
  // @inject_tag: db:"key"
  string key = 3;
  // @inject_tag: db:"value"
  string value = 4;
  // @inject_tag: db:"created_at"
  int64 created_at = 5;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 6;
}

message GroupSetting {
  // @inject_tag: db:"group_id" json:"group_id,string"
  int64 group_id = 1;
  // @inject_tag: db:"key"
  string key = 2;
  // @inject_tag: db:"value"
  string value = 3;
  // @inject_tag: db:"created_at"
  int64 created_at = 4;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 5;
}

message GroupTag {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"group_id"
  int64 group_id = 2;
  // @inject_tag: db:"tag"
  string tag = 3;
  // @inject_tag: db:"created_at"
  int64 created_at = 4;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 5;
}

message Bot {
  // @inject_tag: db:"id" gorm:"primaryKey" json:"id,string"
  int64 id = 1;
  // @inject_tag: db:"uuid"
  string uuid = 2;
  // @inject_tag: db:"name"
  string name = 4;
  // @inject_tag: db:"identifier"
  string identifier = 5;
  // @inject_tag: db:"detail"
  string detail = 6;
  // @inject_tag: db:"avatar"
  string avatar = 7;
  // @inject_tag: db:"extend"
  string extend = 8;
  // @inject_tag: db:"status"
  int32 status = 9;
  // @inject_tag: db:"created_at"
  int64 created_at = 10;
  // @inject_tag: db:"updated_at"
  int64 updated_at = 11;
  // @inject_tag: db:"group_id" gorm:"->"
  int64 group_id = 12;
}

message BotRequest {
  Bot bot = 1;
  // @inject_tag: query:"group_uuid"
  string group_uuid = 2;
  // @inject_tag: query:"bot_uuid"
  string bot_uuid = 3;
  int64 group_id = 4;
  int64 bot_id = 5;
  string action_id = 6;
  string value = 7;
}

message BotReply {
  Bot bot = 1;
}

message BotsRequest {
  int64 group_id = 1;
  // @inject_tag: query:"group_uuid"
  string group_uuid = 2;
  repeated int64 bot_id = 3;
}

message BotsReply {
  repeated Bot bots = 1;
}

message GroupRequest {
  Group group = 1;
}

message GroupReply {
  Group group = 1;
}

message GroupItem {
  int64 sequence = 1;
  int32 type = 2;
  string uuid = 3;
  string name = 4;
  string avatar = 5;
  int32 unread_count = 7;
  LastMessage last_message = 8;
  repeated Avatar bot_avatar = 9;
  // @inject_tag: json:"id,string"
  int64 id = 10;
}

message LastMessage {
  string last_sender = 1;
  string content = 2;
}

message GetGroupsReply {
  repeated GroupItem groups = 1;
}

message GetGroupReply {
  GroupItem group = 1;
}

message WorkflowRequest {
  string text = 1;
  string type = 2;
  Message message = 3;
}

message WorkflowReply {
  string text = 1;
}

message TriggerRequest {
  Trigger trigger = 1;
  TriggerInfo info = 2;
}

message Trigger {
  // @inject_tag: db:"id" gorm:"primaryKey"
  int64 id = 1;
  // @inject_tag: db:"type"
  string type = 2;
  // @inject_tag: db:"kind"
  string kind = 3;
  // @inject_tag: db:"flag"
  string flag = 4;
  // @inject_tag: db:"secret"
  string secret = 5;
  // @inject_tag: db:"when"
  string when = 6;
  // @inject_tag: db:"message_id"
  int64 message_id = 7;
  // @inject_tag: db:"created_at"
  int64 created_at = 8;
}

message TriggerInfo {
  string message_text = 9;
  string header = 10;
  string body = 11;
}

message WebhooksReply {
  repeated string flag = 1;
}
