// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/tsundata/assistant/internal/pkg/model"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// CompleteTodo provides a mock function with given fields: id
func (_m *TodoRepository) CompleteTodo(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTodo provides a mock function with given fields: todo
func (_m *TodoRepository) CreateTodo(todo model.Todo) (int64, error) {
	ret := _m.Called(todo)

	var r0 int64
	if rf, ok := ret.Get(0).(func(model.Todo) int64); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: id
func (_m *TodoRepository) DeleteTodo(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: id
func (_m *TodoRepository) GetTodo(id int) (model.Todo, error) {
	ret := _m.Called(id)

	var r0 model.Todo
	if rf, ok := ret.Get(0).(func(int) model.Todo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodos provides a mock function with given fields:
func (_m *TodoRepository) ListTodos() ([]model.Todo, error) {
	ret := _m.Called()

	var r0 []model.Todo
	if rf, ok := ret.Get(0).(func() []model.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: todo
func (_m *TodoRepository) UpdateTodo(todo model.Todo) error {
	ret := _m.Called(todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
