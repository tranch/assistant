// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/tsundata/assistant/internal/pkg/model"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *MessageRepository) Create(message model.Message) (int64, error) {
	ret := _m.Called(message)

	var r0 int64
	if rf, ok := ret.Get(0).(func(model.Message) int64); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MessageRepository) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *MessageRepository) GetByID(id int64) (model.Message, error) {
	ret := _m.Called(id)

	var r0 model.Message
	if rf, ok := ret.Get(0).(func(int64) model.Message); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: uuid
func (_m *MessageRepository) GetByUUID(uuid string) (model.Message, error) {
	ret := _m.Called(uuid)

	var r0 model.Message
	if rf, ok := ret.Get(0).(func(string) model.Message); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(model.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MessageRepository) List() ([]model.Message, error) {
	ret := _m.Called()

	var r0 []model.Message
	if rf, ok := ret.Get(0).(func() []model.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByType provides a mock function with given fields: t
func (_m *MessageRepository) ListByType(t string) ([]model.Message, error) {
	ret := _m.Called(t)

	var r0 []model.Message
	if rf, ok := ret.Get(0).(func(string) []model.Message); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
