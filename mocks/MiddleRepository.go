// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/tsundata/assistant/internal/pkg/model"
)

// MiddleRepository is an autogenerated mock type for the MiddleRepository type
type MiddleRepository struct {
	mock.Mock
}

// CreateApp provides a mock function with given fields: app
func (_m *MiddleRepository) CreateApp(app model.App) (int64, error) {
	ret := _m.Called(app)

	var r0 int64
	if rf, ok := ret.Get(0).(func(model.App) int64); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.App) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCredential provides a mock function with given fields: credential
func (_m *MiddleRepository) CreateCredential(credential model.Credential) (int64, error) {
	ret := _m.Called(credential)

	var r0 int64
	if rf, ok := ret.Get(0).(func(model.Credential) int64); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Credential) error); ok {
		r1 = rf(credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePage provides a mock function with given fields: page
func (_m *MiddleRepository) CreatePage(page model.Page) (int64, error) {
	ret := _m.Called(page)

	var r0 int64
	if rf, ok := ret.Get(0).(func(model.Page) int64); ok {
		r0 = rf(page)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Page) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppByType provides a mock function with given fields: t
func (_m *MiddleRepository) GetAppByType(t string) (model.App, error) {
	ret := _m.Called(t)

	var r0 model.App
	if rf, ok := ret.Get(0).(func(string) model.App); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(model.App)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableAppByType provides a mock function with given fields: t
func (_m *MiddleRepository) GetAvailableAppByType(t string) (model.App, error) {
	ret := _m.Called(t)

	var r0 model.App
	if rf, ok := ret.Get(0).(func(string) model.App); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(model.App)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentialByName provides a mock function with given fields: name
func (_m *MiddleRepository) GetCredentialByName(name string) (model.Credential, error) {
	ret := _m.Called(name)

	var r0 model.Credential
	if rf, ok := ret.Get(0).(func(string) model.Credential); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.Credential)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentialByType provides a mock function with given fields: t
func (_m *MiddleRepository) GetCredentialByType(t string) (model.Credential, error) {
	ret := _m.Called(t)

	var r0 model.Credential
	if rf, ok := ret.Get(0).(func(string) model.Credential); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(model.Credential)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageByUUID provides a mock function with given fields: uuid
func (_m *MiddleRepository) GetPageByUUID(uuid string) (model.Page, error) {
	ret := _m.Called(uuid)

	var r0 model.Page
	if rf, ok := ret.Get(0).(func(string) model.Page); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(model.Page)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields:
func (_m *MiddleRepository) ListApps() ([]model.App, error) {
	ret := _m.Called()

	var r0 []model.App
	if rf, ok := ret.Get(0).(func() []model.App); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.App)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCredentials provides a mock function with given fields:
func (_m *MiddleRepository) ListCredentials() ([]model.Credential, error) {
	ret := _m.Called()

	var r0 []model.Credential
	if rf, ok := ret.Get(0).(func() []model.Credential); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppByID provides a mock function with given fields: id, token, extra
func (_m *MiddleRepository) UpdateAppByID(id int64, token string, extra string) error {
	ret := _m.Called(id, token, extra)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, string) error); ok {
		r0 = rf(id, token, extra)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
