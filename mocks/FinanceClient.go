// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/tsundata/assistant/api/pb"
)

// FinanceClient is an autogenerated mock type for the FinanceClient type
type FinanceClient struct {
	mock.Mock
}

// CreateBill provides a mock function with given fields: ctx, in, opts
func (_m *FinanceClient) CreateBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StateReply
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) *pb.StateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBill provides a mock function with given fields: ctx, in, opts
func (_m *FinanceClient) DeleteBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StateReply
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) *pb.StateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBill provides a mock function with given fields: ctx, in, opts
func (_m *FinanceClient) GetBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.BillReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.BillReply
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) *pb.BillReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BillReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBills provides a mock function with given fields: ctx, in, opts
func (_m *FinanceClient) GetBills(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.BillsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.BillsReply
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) *pb.BillsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BillsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
