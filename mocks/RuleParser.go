// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rulebot "github.com/tsundata/assistant/internal/pkg/rulebot"
)

// RuleParser is an autogenerated mock type for the RuleParser type
type RuleParser struct {
	mock.Mock
}

// Boot provides a mock function with given fields: _a0
func (_m *RuleParser) Boot(_a0 *rulebot.RuleBot) {
	_m.Called(_a0)
}

// HelpMessage provides a mock function with given fields: _a0, _a1
func (_m *RuleParser) HelpMessage(_a0 *rulebot.RuleBot, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(*rulebot.RuleBot, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *RuleParser) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseMessage provides a mock function with given fields: _a0, _a1
func (_m *RuleParser) ParseMessage(_a0 *rulebot.RuleBot, _a1 string) []string {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*rulebot.RuleBot, string) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
