version: '3'

services:
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: gateway
      MYSQL_USER: gateway
      MYSQL_PASSWORD: 123456
    volumes:
      - ../scripts/app.sql:/docker-entrypoint-initdb.d/app.sql

  redis:
    image: redis:latest
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - /tmp/redis/data:/data
      - ../configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "63790:6379"

  etcd:
    image: docker.io/bitnami/etcd:3-debian-10
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    volumes:
      - /tmp/etcd_data:/bitnami/etcd
    ports:
      - "2379:2379"
      - "2380:2380"

  ### jaeger ###

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    command: [ "--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra", "--collector.zipkin.http-port=9411" ]
    ports:
      - "14269"
      - "14268:14268"
      - "14267"
      - "14250"
      - "9411:9411"
    restart: on-failure
    depends_on:
      - cassandra-schema

  jaeger-query:
    image: jaegertracing/jaeger-query
    command: [ "--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra" ]
    ports:
      - "16686:16686"
      - "16687"
    restart: on-failure
    depends_on:
      - cassandra-schema

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    command: [ "--reporter.grpc.host-port=jaeger-collector:14250" ]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    restart: on-failure
    depends_on:
      - jaeger-collector

  cassandra:
    image: cassandra:3.9

  cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema
    depends_on:
      - cassandra

  ### prometheus/grafana ###

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    command:
      - '--config.file=/prometheus/prometheus.yml'
      - "--web.external-url=http://localhost:9090"
    volumes:
      - "../configs/prometheus/prometheus.yml:/prometheus/prometheus.yml"
      - "../configs/prometheus/rules:/rules"

  alertmanager:
    image: prom/alertmanager
    volumes:
      - "../configs/prometheus/alertmanager.yml:/prometheus/alertmanager.yml"
      - "/tmp/alermanager:/data"
    command:
      - '--config.file=/prometheus/alertmanager.yml'
      - '--storage.path=/data'
    ports:
      - 9093:9093

  grafana-db:
    image: mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: grafana
      MYSQL_USER: grafana
      MYSQL_PASSWORD: password
    ports:
      - 3306

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ../configs/grafana/provisioning/:/etc/grafana/provisioning/
      - ../configs/grafana/dashboards/:/tmp/dashboards/
    environment:
      # - VIRTUAL_HOST=grafana.loc
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=password
      - GF_DATABASE_TYPE=mysql
      - GF_DATABASE_HOST=grafana-db:3306
      - GF_DATABASE_MAX_OPEN_CONN=300
      - GF_SESSION_PROVIDER=mysql
      - GF_SESSION_PROVIDER_CONFIG=grafana:password@tcp(db:3306)/grafana?allowNativePasswords=true
      # - GF_DATABASE_TYPE=postgres
      # - GF_DATABASE_HOST=db:5432
      # - GF_DATABASE_SSL_MODE=disable
      # - GF_SESSION_PROVIDER=postgres
      # - GF_SESSION_PROVIDER_CONFIG=user=grafana password=password host=db port=5432 dbname=grafana sslmode=disable
      - GF_SERVER_ROUTER_LOGGING=true
      - GF_LOG_CONSOLE_FORMAT=json
      - GF_LOG_FILTERS=alerting.notifier:debug,alerting.notifier.slack:debug,auth:debug
      - GF_AUTH_TOKEN_ROTATION_INTERVAL_MINUTES=2
    ports:
      - "3000:3000"
    depends_on:
      - grafana-db
    restart: always

  ### app ###

  gateway:
    build:
      context: ..
      dockerfile: "build/gateway/Dockerfile"
    command: ./wait-for db:3306 -t 30 -- ./app
    depends_on:
      - db
      - redis
    ports:
      - "5122:5000"

  message:
    build:
      context: ..
      dockerfile: "build/message/Dockerfile"
    command: ./wait-for db:3306 -t 30 -- ./app
    depends_on:
      - db

  subscribe:
    build:
      context: ..
      dockerfile: "build/subscribe/Dockerfile"
    command: ./wait-for db:3306 -t 30 -- ./app
    depends_on:
      - db
      - redis

  middle:
    build:
      context: ..
      dockerfile: "build/middle/Dockerfile"
    command: ./wait-for db:3306 -t 30 -- ./app
    depends_on:
      - db
      - redis

  web:
    build:
      context: ..
      dockerfile: "build/web/Dockerfile"
    command: ./wait-for db:3306 -t 30 -- ./app
    depends_on:
      - db
    ports:
      - "7000:5001"
