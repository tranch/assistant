version: '3'

tasks:
  default:
    cmds:
      - go env
      - git version
      - docker version

  check:
    desc: Check befor submitting the code
    cmds:
      - task: lint
      - task: test
      - task: coverage
      - echo "Both done"

  build:
    desc: Build the go binary.
    cmds:
      - GOVERSION=`go version` goreleaser --snapshot --skip-publish --rm-dist

  wire:
    desc: Code generated by Wire
    cmds:
      - wire ./cmd/...
      - wire ./internal/...

  lint:
    desc: Run golangci-lint check
    cmds:
      - golangci-lint run ./... --timeout=5m

  proto:
    desc: Generate proto.pb.go
    cmds:
      - go run github.com/tsundata/assistant/cmd/cli clear
      - protoc -I api/pb ./api/pb/*.proto --gogo_out=plugins=grpc:.
      - protoc-go-inject-tag -input=./api/pb/middle.pb.go
      - protoc-go-inject-tag -input=./api/pb/todo.pb.go
      - protoc-go-inject-tag -input=./api/pb/workflow.pb.go
      - protoc-go-inject-tag -input=./api/pb/user.pb.go
      - protoc-go-inject-tag -input=./api/pb/message.pb.go
      - protoc-go-inject-tag -input=./api/pb/middle.pb.go
      - git add api/pb/*.pb.go

  release:
    desc: Push github release
    cmds:
      - goreleaser release --snapshot --rm-dist

  docker:
    desc: Docker-compose run
    cmds:
      - docker-compose -f deployments/docker-compose/docker-compose.yml up --build -d

  changelog:
    desc: Generate changelog
    cmds:
      - git-chglog -o CHANGELOG.md

  gentest:
    desc: Generate test cases
    cmds:
      - gotests -w -all internal/{{.CLI_ARGS}}

  cli:
    desc: Run cli
    cmds:
      - go run github.com/tsundata/assistant/cmd/cli {{.CLI_ARGS}}

  cve:
    desc: Vulnerability Scanner
    cmds:
      - trivy fs ./

  test:
    desc: Go test
    cmds:
      - go test -cover -coverprofile=./coverage.out -timeout=10m -short github.com/tsundata/assistant/internal/...

  coverage:
    desc: Go coverage
    cmds:
      - go tool cover -func ./coverage.out

  mock:
    desc: Generate mock files
    cmds:
      - mockgen -package=mock -source=./api/pb/message.pb.go -destination=./mock/message_client.go
      - mockgen -package=mock -source=./api/pb/middle.pb.go -destination=./mock/middle_client.go
      - mockgen -package=mock -source=./api/pb/nlp.pb.go -destination=./mock/nlp_client.go
      - mockgen -package=mock -source=./api/pb/todo.pb.go -destination=./mock/todo_client.go
      - mockgen -package=mock -source=./api/pb/user.pb.go -destination=./mock/user_client.go
      - mockgen -package=mock -source=./api/pb/workflow.pb.go -destination=./mock/workflow_client.go
      - mockgen -package=mock -source=./api/pb/chatbot.pb.go -destination=./mock/chatbot_client.go
      - mockgen -package=mock -source=./internal/app/todo/repository/todo.go -destination=./mock/todo_repository.go
      - mockgen -package=mock -source=./internal/app/message/repository/message.go -destination=./mock/message_repository.go
      - mockgen -package=mock -source=./internal/app/middle/repository/middle.go -destination=./mock/middle_repository.go
      - mockgen -package=mock -source=./internal/app/user/repository/user.go -destination=./mock/user_repository.go
      - mockgen -package=mock -source=./internal/app/workflow/repository/workflow.go -destination=./mock/workflow_repository.go
