name: Dev

on:
  push:
    branches:
      - '*'
  pull_request:

jobs:
  dev:
    runs-on: ubuntu-latest

    services:
      nats:
        image: nats:latest
        ports:
          - 4222:4222
          - 6222:6222
          - 8222:8222
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      etcd:
        image: bitnami/etcd:3.5.0
        env:
          ALLOW_NONE_AUTHENTICATION: yes
        ports:
          - 2379:2379
          - 2380:2380
      rqlite:
        image: rqlite/rqlite:latest
        ports:
          - 4001:4001
          - 4002:4002

    steps:
      - uses: actions/checkout@v2

      - name: Count Lines of Code (cloc)
        uses: djdefi/cloc-action@main

      - name: Upload cloc output as a build artifact
        uses: actions/upload-artifact@v2
        with:
          name: cloc
          path: cloc.txt

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Install Task
        uses: arduino/setup-task@v1

      - name: Get dependencies
        run: go mod download

      ### Lint ###

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.40.1

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --timeout=5m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

      ### Build ###

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          install-only: true

      - name: Build
        run: task build

      ### Test ###

      - name: Setup rqlite
        run: |
          task cli -- rqlite

      - name: Import Config
        run: |
          export ETCD_ADDRESS=127.0.0.1:2379
          cp configs/common.yml.example configs/common.yml
          cp configs/gateway.yml.example configs/gateway.yml
          cp configs/web.yml.example configs/web.yml
          cp configs/classifier.yml.example configs/classifier.yml
          ls -all configs
          go run github.com/tsundata/assistant/cmd/cli config

      - name: Run test cases
        run: |
          export ETCD_ADDRESS=127.0.0.1:2379
          task test
          task coverage

      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
