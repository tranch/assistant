// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/workflow.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockWorkflowClient is a mock of WorkflowClient interface.
type MockWorkflowClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowClientMockRecorder
}

// MockWorkflowClientMockRecorder is the mock recorder for MockWorkflowClient.
type MockWorkflowClientMockRecorder struct {
	mock *MockWorkflowClient
}

// NewMockWorkflowClient creates a new mock instance.
func NewMockWorkflowClient(ctrl *gomock.Controller) *MockWorkflowClient {
	mock := &MockWorkflowClient{ctrl: ctrl}
	mock.recorder = &MockWorkflowClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowClient) EXPECT() *MockWorkflowClientMockRecorder {
	return m.recorder
}

// ActionDoc mocks base method.
func (m *MockWorkflowClient) ActionDoc(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionDoc", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDoc indicates an expected call of ActionDoc.
func (mr *MockWorkflowClientMockRecorder) ActionDoc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDoc", reflect.TypeOf((*MockWorkflowClient)(nil).ActionDoc), varargs...)
}

// CreateTrigger mocks base method.
func (m *MockWorkflowClient) CreateTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrigger", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockWorkflowClientMockRecorder) CreateTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockWorkflowClient)(nil).CreateTrigger), varargs...)
}

// CronTrigger mocks base method.
func (m *MockWorkflowClient) CronTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CronTrigger", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronTrigger indicates an expected call of CronTrigger.
func (mr *MockWorkflowClientMockRecorder) CronTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronTrigger", reflect.TypeOf((*MockWorkflowClient)(nil).CronTrigger), varargs...)
}

// DeleteTrigger mocks base method.
func (m *MockWorkflowClient) DeleteTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrigger", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockWorkflowClientMockRecorder) DeleteTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockWorkflowClient)(nil).DeleteTrigger), varargs...)
}

// RunAction mocks base method.
func (m *MockWorkflowClient) RunAction(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAction", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAction indicates an expected call of RunAction.
func (mr *MockWorkflowClientMockRecorder) RunAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAction", reflect.TypeOf((*MockWorkflowClient)(nil).RunAction), varargs...)
}

// SyntaxCheck mocks base method.
func (m *MockWorkflowClient) SyntaxCheck(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyntaxCheck", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyntaxCheck indicates an expected call of SyntaxCheck.
func (mr *MockWorkflowClientMockRecorder) SyntaxCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyntaxCheck", reflect.TypeOf((*MockWorkflowClient)(nil).SyntaxCheck), varargs...)
}

// WebhookTrigger mocks base method.
func (m *MockWorkflowClient) WebhookTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookTrigger", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookTrigger indicates an expected call of WebhookTrigger.
func (mr *MockWorkflowClientMockRecorder) WebhookTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookTrigger", reflect.TypeOf((*MockWorkflowClient)(nil).WebhookTrigger), varargs...)
}

// MockWorkflowServer is a mock of WorkflowServer interface.
type MockWorkflowServer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowServerMockRecorder
}

// MockWorkflowServerMockRecorder is the mock recorder for MockWorkflowServer.
type MockWorkflowServerMockRecorder struct {
	mock *MockWorkflowServer
}

// NewMockWorkflowServer creates a new mock instance.
func NewMockWorkflowServer(ctrl *gomock.Controller) *MockWorkflowServer {
	mock := &MockWorkflowServer{ctrl: ctrl}
	mock.recorder = &MockWorkflowServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowServer) EXPECT() *MockWorkflowServerMockRecorder {
	return m.recorder
}

// ActionDoc mocks base method.
func (m *MockWorkflowServer) ActionDoc(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDoc", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDoc indicates an expected call of ActionDoc.
func (mr *MockWorkflowServerMockRecorder) ActionDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDoc", reflect.TypeOf((*MockWorkflowServer)(nil).ActionDoc), arg0, arg1)
}

// CreateTrigger mocks base method.
func (m *MockWorkflowServer) CreateTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockWorkflowServerMockRecorder) CreateTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockWorkflowServer)(nil).CreateTrigger), arg0, arg1)
}

// CronTrigger mocks base method.
func (m *MockWorkflowServer) CronTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronTrigger indicates an expected call of CronTrigger.
func (mr *MockWorkflowServerMockRecorder) CronTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronTrigger", reflect.TypeOf((*MockWorkflowServer)(nil).CronTrigger), arg0, arg1)
}

// DeleteTrigger mocks base method.
func (m *MockWorkflowServer) DeleteTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockWorkflowServerMockRecorder) DeleteTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockWorkflowServer)(nil).DeleteTrigger), arg0, arg1)
}

// RunAction mocks base method.
func (m *MockWorkflowServer) RunAction(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAction", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAction indicates an expected call of RunAction.
func (mr *MockWorkflowServerMockRecorder) RunAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAction", reflect.TypeOf((*MockWorkflowServer)(nil).RunAction), arg0, arg1)
}

// SyntaxCheck mocks base method.
func (m *MockWorkflowServer) SyntaxCheck(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyntaxCheck", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyntaxCheck indicates an expected call of SyntaxCheck.
func (mr *MockWorkflowServerMockRecorder) SyntaxCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyntaxCheck", reflect.TypeOf((*MockWorkflowServer)(nil).SyntaxCheck), arg0, arg1)
}

// WebhookTrigger mocks base method.
func (m *MockWorkflowServer) WebhookTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookTrigger indicates an expected call of WebhookTrigger.
func (mr *MockWorkflowServerMockRecorder) WebhookTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookTrigger", reflect.TypeOf((*MockWorkflowServer)(nil).WebhookTrigger), arg0, arg1)
}
