// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/id/repository/id.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockIdRepository is a mock of IdRepository interface.
type MockIdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdRepositoryMockRecorder
}

// MockIdRepositoryMockRecorder is the mock recorder for MockIdRepository.
type MockIdRepositoryMockRecorder struct {
	mock *MockIdRepository
}

// NewMockIdRepository creates a new mock instance.
func NewMockIdRepository(ctrl *gomock.Controller) *MockIdRepository {
	mock := &MockIdRepository{ctrl: ctrl}
	mock.recorder = &MockIdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdRepository) EXPECT() *MockIdRepositoryMockRecorder {
	return m.recorder
}

// GetOrCreateNode mocks base method.
func (m *MockIdRepository) GetOrCreateNode(ctx context.Context, node *pb.Node) (pb.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateNode", ctx, node)
	ret0, _ := ret[0].(pb.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateNode indicates an expected call of GetOrCreateNode.
func (mr *MockIdRepositoryMockRecorder) GetOrCreateNode(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateNode", reflect.TypeOf((*MockIdRepository)(nil).GetOrCreateNode), ctx, node)
}
