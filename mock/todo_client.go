// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/todo.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockTodoClient is a mock of TodoClient interface.
type MockTodoClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoClientMockRecorder
}

// MockTodoClientMockRecorder is the mock recorder for MockTodoClient.
type MockTodoClientMockRecorder struct {
	mock *MockTodoClient
}

// NewMockTodoClient creates a new mock instance.
func NewMockTodoClient(ctrl *gomock.Controller) *MockTodoClient {
	mock := &MockTodoClient{ctrl: ctrl}
	mock.recorder = &MockTodoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoClient) EXPECT() *MockTodoClientMockRecorder {
	return m.recorder
}

// CompleteTodo mocks base method.
func (m *MockTodoClient) CompleteTodo(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTodo", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTodo indicates an expected call of CompleteTodo.
func (mr *MockTodoClientMockRecorder) CompleteTodo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTodo", reflect.TypeOf((*MockTodoClient)(nil).CompleteTodo), varargs...)
}

// CreateTodo mocks base method.
func (m *MockTodoClient) CreateTodo(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTodo", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoClientMockRecorder) CreateTodo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoClient)(nil).CreateTodo), varargs...)
}

// DeleteTodo mocks base method.
func (m *MockTodoClient) DeleteTodo(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTodo", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoClientMockRecorder) DeleteTodo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoClient)(nil).DeleteTodo), varargs...)
}

// GetTodo mocks base method.
func (m *MockTodoClient) GetTodo(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.TodoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodo", varargs...)
	ret0, _ := ret[0].(*pb.TodoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoClientMockRecorder) GetTodo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoClient)(nil).GetTodo), varargs...)
}

// GetTodos mocks base method.
func (m *MockTodoClient) GetTodos(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.TodosReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodos", varargs...)
	ret0, _ := ret[0].(*pb.TodosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoClientMockRecorder) GetTodos(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoClient)(nil).GetTodos), varargs...)
}

// UpdateTodo mocks base method.
func (m *MockTodoClient) UpdateTodo(ctx context.Context, in *pb.TodoRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTodo", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoClientMockRecorder) UpdateTodo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoClient)(nil).UpdateTodo), varargs...)
}

// MockTodoServer is a mock of TodoServer interface.
type MockTodoServer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServerMockRecorder
}

// MockTodoServerMockRecorder is the mock recorder for MockTodoServer.
type MockTodoServerMockRecorder struct {
	mock *MockTodoServer
}

// NewMockTodoServer creates a new mock instance.
func NewMockTodoServer(ctrl *gomock.Controller) *MockTodoServer {
	mock := &MockTodoServer{ctrl: ctrl}
	mock.recorder = &MockTodoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoServer) EXPECT() *MockTodoServerMockRecorder {
	return m.recorder
}

// CompleteTodo mocks base method.
func (m *MockTodoServer) CompleteTodo(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTodo", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTodo indicates an expected call of CompleteTodo.
func (mr *MockTodoServerMockRecorder) CompleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTodo", reflect.TypeOf((*MockTodoServer)(nil).CompleteTodo), arg0, arg1)
}

// CreateTodo mocks base method.
func (m *MockTodoServer) CreateTodo(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoServerMockRecorder) CreateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoServer)(nil).CreateTodo), arg0, arg1)
}

// DeleteTodo mocks base method.
func (m *MockTodoServer) DeleteTodo(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServerMockRecorder) DeleteTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoServer)(nil).DeleteTodo), arg0, arg1)
}

// GetTodo mocks base method.
func (m *MockTodoServer) GetTodo(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.TodoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0, arg1)
	ret0, _ := ret[0].(*pb.TodoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoServerMockRecorder) GetTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoServer)(nil).GetTodo), arg0, arg1)
}

// GetTodos mocks base method.
func (m *MockTodoServer) GetTodos(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.TodosReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", arg0, arg1)
	ret0, _ := ret[0].(*pb.TodosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoServerMockRecorder) GetTodos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoServer)(nil).GetTodos), arg0, arg1)
}

// UpdateTodo mocks base method.
func (m *MockTodoServer) UpdateTodo(arg0 context.Context, arg1 *pb.TodoRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServerMockRecorder) UpdateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoServer)(nil).UpdateTodo), arg0, arg1)
}
