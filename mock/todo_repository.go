// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/todo/repository/todo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// CompleteTodo mocks base method.
func (m *MockTodoRepository) CompleteTodo(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTodo indicates an expected call of CompleteTodo.
func (mr *MockTodoRepositoryMockRecorder) CompleteTodo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).CompleteTodo), ctx, id)
}

// CreateTodo mocks base method.
func (m *MockTodoRepository) CreateTodo(ctx context.Context, todo *pb.Todo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, todo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoRepositoryMockRecorder) CreateTodo(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoRepository)(nil).CreateTodo), ctx, todo)
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), ctx, id)
}

// GetTodo mocks base method.
func (m *MockTodoRepository) GetTodo(ctx context.Context, id int64) (*pb.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx, id)
	ret0, _ := ret[0].(*pb.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoRepositoryMockRecorder) GetTodo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoRepository)(nil).GetTodo), ctx, id)
}

// ListRemindTodos mocks base method.
func (m *MockTodoRepository) ListRemindTodos(ctx context.Context) ([]*pb.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemindTodos", ctx)
	ret0, _ := ret[0].([]*pb.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemindTodos indicates an expected call of ListRemindTodos.
func (mr *MockTodoRepositoryMockRecorder) ListRemindTodos(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemindTodos", reflect.TypeOf((*MockTodoRepository)(nil).ListRemindTodos), ctx)
}

// ListTodos mocks base method.
func (m *MockTodoRepository) ListTodos(ctx context.Context) ([]*pb.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos", ctx)
	ret0, _ := ret[0].([]*pb.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodoRepositoryMockRecorder) ListTodos(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodoRepository)(nil).ListTodos), ctx)
}

// UpdateTodo mocks base method.
func (m *MockTodoRepository) UpdateTodo(ctx context.Context, todo *pb.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoRepositoryMockRecorder) UpdateTodo(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoRepository)(nil).UpdateTodo), ctx, todo)
}
