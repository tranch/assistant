// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/chatbot/bot/okr/repository/okr.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockOkrRepository is a mock of OkrRepository interface.
type MockOkrRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOkrRepositoryMockRecorder
}

// MockOkrRepositoryMockRecorder is the mock recorder for MockOkrRepository.
type MockOkrRepositoryMockRecorder struct {
	mock *MockOkrRepository
}

// NewMockOkrRepository creates a new mock instance.
func NewMockOkrRepository(ctrl *gomock.Controller) *MockOkrRepository {
	mock := &MockOkrRepository{ctrl: ctrl}
	mock.recorder = &MockOkrRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOkrRepository) EXPECT() *MockOkrRepositoryMockRecorder {
	return m.recorder
}

// CreateKeyResult mocks base method.
func (m *MockOkrRepository) CreateKeyResult(ctx context.Context, keyResult *pb.KeyResult) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyResult", ctx, keyResult)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyResult indicates an expected call of CreateKeyResult.
func (mr *MockOkrRepositoryMockRecorder) CreateKeyResult(ctx, keyResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyResult", reflect.TypeOf((*MockOkrRepository)(nil).CreateKeyResult), ctx, keyResult)
}

// CreateObjective mocks base method.
func (m *MockOkrRepository) CreateObjective(ctx context.Context, objective *pb.Objective) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjective", ctx, objective)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjective indicates an expected call of CreateObjective.
func (mr *MockOkrRepositoryMockRecorder) CreateObjective(ctx, objective interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjective", reflect.TypeOf((*MockOkrRepository)(nil).CreateObjective), ctx, objective)
}

// DeleteKeyResult mocks base method.
func (m *MockOkrRepository) DeleteKeyResult(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyResult", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyResult indicates an expected call of DeleteKeyResult.
func (mr *MockOkrRepositoryMockRecorder) DeleteKeyResult(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyResult", reflect.TypeOf((*MockOkrRepository)(nil).DeleteKeyResult), ctx, id)
}

// DeleteObjective mocks base method.
func (m *MockOkrRepository) DeleteObjective(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjective", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjective indicates an expected call of DeleteObjective.
func (mr *MockOkrRepositoryMockRecorder) DeleteObjective(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjective", reflect.TypeOf((*MockOkrRepository)(nil).DeleteObjective), ctx, id)
}

// GetKeyResultByID mocks base method.
func (m *MockOkrRepository) GetKeyResultByID(ctx context.Context, id int64) (*pb.KeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyResultByID", ctx, id)
	ret0, _ := ret[0].(*pb.KeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResultByID indicates an expected call of GetKeyResultByID.
func (mr *MockOkrRepositoryMockRecorder) GetKeyResultByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResultByID", reflect.TypeOf((*MockOkrRepository)(nil).GetKeyResultByID), ctx, id)
}

// GetObjectiveByID mocks base method.
func (m *MockOkrRepository) GetObjectiveByID(ctx context.Context, id int64) (*pb.Objective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectiveByID", ctx, id)
	ret0, _ := ret[0].(*pb.Objective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectiveByID indicates an expected call of GetObjectiveByID.
func (mr *MockOkrRepositoryMockRecorder) GetObjectiveByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectiveByID", reflect.TypeOf((*MockOkrRepository)(nil).GetObjectiveByID), ctx, id)
}

// ListKeyResults mocks base method.
func (m *MockOkrRepository) ListKeyResults(ctx context.Context) ([]*pb.KeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyResults", ctx)
	ret0, _ := ret[0].([]*pb.KeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyResults indicates an expected call of ListKeyResults.
func (mr *MockOkrRepositoryMockRecorder) ListKeyResults(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyResults", reflect.TypeOf((*MockOkrRepository)(nil).ListKeyResults), ctx)
}

// ListObjectives mocks base method.
func (m *MockOkrRepository) ListObjectives(ctx context.Context) ([]*pb.Objective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectives", ctx)
	ret0, _ := ret[0].([]*pb.Objective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectives indicates an expected call of ListObjectives.
func (mr *MockOkrRepositoryMockRecorder) ListObjectives(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectives", reflect.TypeOf((*MockOkrRepository)(nil).ListObjectives), ctx)
}
