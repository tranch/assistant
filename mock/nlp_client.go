// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/nlp.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockNLPClient is a mock of NLPClient interface.
type MockNLPClient struct {
	ctrl     *gomock.Controller
	recorder *MockNLPClientMockRecorder
}

// MockNLPClientMockRecorder is the mock recorder for MockNLPClient.
type MockNLPClientMockRecorder struct {
	mock *MockNLPClient
}

// NewMockNLPClient creates a new mock instance.
func NewMockNLPClient(ctrl *gomock.Controller) *MockNLPClient {
	mock := &MockNLPClient{ctrl: ctrl}
	mock.recorder = &MockNLPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNLPClient) EXPECT() *MockNLPClientMockRecorder {
	return m.recorder
}

// Pinyin mocks base method.
func (m *MockNLPClient) Pinyin(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.WordsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pinyin", varargs...)
	ret0, _ := ret[0].(*pb.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pinyin indicates an expected call of Pinyin.
func (mr *MockNLPClientMockRecorder) Pinyin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinyin", reflect.TypeOf((*MockNLPClient)(nil).Pinyin), varargs...)
}

// Segmentation mocks base method.
func (m *MockNLPClient) Segmentation(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.WordsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Segmentation", varargs...)
	ret0, _ := ret[0].(*pb.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segmentation indicates an expected call of Segmentation.
func (mr *MockNLPClientMockRecorder) Segmentation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segmentation", reflect.TypeOf((*MockNLPClient)(nil).Segmentation), varargs...)
}

// MockNLPServer is a mock of NLPServer interface.
type MockNLPServer struct {
	ctrl     *gomock.Controller
	recorder *MockNLPServerMockRecorder
}

// MockNLPServerMockRecorder is the mock recorder for MockNLPServer.
type MockNLPServerMockRecorder struct {
	mock *MockNLPServer
}

// NewMockNLPServer creates a new mock instance.
func NewMockNLPServer(ctrl *gomock.Controller) *MockNLPServer {
	mock := &MockNLPServer{ctrl: ctrl}
	mock.recorder = &MockNLPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNLPServer) EXPECT() *MockNLPServerMockRecorder {
	return m.recorder
}

// Pinyin mocks base method.
func (m *MockNLPServer) Pinyin(arg0 context.Context, arg1 *pb.TextRequest) (*pb.WordsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pinyin", arg0, arg1)
	ret0, _ := ret[0].(*pb.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pinyin indicates an expected call of Pinyin.
func (mr *MockNLPServerMockRecorder) Pinyin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinyin", reflect.TypeOf((*MockNLPServer)(nil).Pinyin), arg0, arg1)
}

// Segmentation mocks base method.
func (m *MockNLPServer) Segmentation(arg0 context.Context, arg1 *pb.TextRequest) (*pb.WordsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Segmentation", arg0, arg1)
	ret0, _ := ret[0].(*pb.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segmentation indicates an expected call of Segmentation.
func (mr *MockNLPServerMockRecorder) Segmentation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segmentation", reflect.TypeOf((*MockNLPServer)(nil).Segmentation), arg0, arg1)
}
