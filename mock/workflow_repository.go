// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/workflow/repository/workflow.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tsundata/assistant/internal/pkg/model"
)

// MockWorkflowRepository is a mock of WorkflowRepository interface.
type MockWorkflowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepositoryMockRecorder
}

// MockWorkflowRepositoryMockRecorder is the mock recorder for MockWorkflowRepository.
type MockWorkflowRepositoryMockRecorder struct {
	mock *MockWorkflowRepository
}

// NewMockWorkflowRepository creates a new mock instance.
func NewMockWorkflowRepository(ctrl *gomock.Controller) *MockWorkflowRepository {
	mock := &MockWorkflowRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRepository) EXPECT() *MockWorkflowRepositoryMockRecorder {
	return m.recorder
}

// CreateTrigger mocks base method.
func (m *MockWorkflowRepository) CreateTrigger(trigger model.Trigger) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", trigger)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockWorkflowRepositoryMockRecorder) CreateTrigger(trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateTrigger), trigger)
}

// DeleteTriggerByMessageID mocks base method.
func (m *MockWorkflowRepository) DeleteTriggerByMessageID(messageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerByMessageID", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerByMessageID indicates an expected call of DeleteTriggerByMessageID.
func (mr *MockWorkflowRepositoryMockRecorder) DeleteTriggerByMessageID(messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerByMessageID", reflect.TypeOf((*MockWorkflowRepository)(nil).DeleteTriggerByMessageID), messageID)
}

// GetTriggerByFlag mocks base method.
func (m *MockWorkflowRepository) GetTriggerByFlag(t, flag string) (model.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerByFlag", t, flag)
	ret0, _ := ret[0].(model.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerByFlag indicates an expected call of GetTriggerByFlag.
func (mr *MockWorkflowRepositoryMockRecorder) GetTriggerByFlag(t, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerByFlag", reflect.TypeOf((*MockWorkflowRepository)(nil).GetTriggerByFlag), t, flag)
}

// ListTriggersByType mocks base method.
func (m *MockWorkflowRepository) ListTriggersByType(t string) ([]model.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggersByType", t)
	ret0, _ := ret[0].([]model.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTriggersByType indicates an expected call of ListTriggersByType.
func (mr *MockWorkflowRepositoryMockRecorder) ListTriggersByType(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggersByType", reflect.TypeOf((*MockWorkflowRepository)(nil).ListTriggersByType), t)
}
