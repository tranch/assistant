// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/system_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockSystemSvcClient is a mock of SystemSvcClient interface.
type MockSystemSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemSvcClientMockRecorder
}

// MockSystemSvcClientMockRecorder is the mock recorder for MockSystemSvcClient.
type MockSystemSvcClientMockRecorder struct {
	mock *MockSystemSvcClient
}

// NewMockSystemSvcClient creates a new mock instance.
func NewMockSystemSvcClient(ctrl *gomock.Controller) *MockSystemSvcClient {
	mock := &MockSystemSvcClient{ctrl: ctrl}
	mock.recorder = &MockSystemSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemSvcClient) EXPECT() *MockSystemSvcClientMockRecorder {
	return m.recorder
}

// ChangeCounter mocks base method.
func (m *MockSystemSvcClient) ChangeCounter(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeCounter", varargs...)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCounter indicates an expected call of ChangeCounter.
func (mr *MockSystemSvcClientMockRecorder) ChangeCounter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCounter", reflect.TypeOf((*MockSystemSvcClient)(nil).ChangeCounter), varargs...)
}

// CreateCounter mocks base method.
func (m *MockSystemSvcClient) CreateCounter(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCounter", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCounter indicates an expected call of CreateCounter.
func (mr *MockSystemSvcClientMockRecorder) CreateCounter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCounter", reflect.TypeOf((*MockSystemSvcClient)(nil).CreateCounter), varargs...)
}

// GetCounter mocks base method.
func (m *MockSystemSvcClient) GetCounter(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCounter", varargs...)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockSystemSvcClientMockRecorder) GetCounter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockSystemSvcClient)(nil).GetCounter), varargs...)
}

// GetCounterByFlag mocks base method.
func (m *MockSystemSvcClient) GetCounterByFlag(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCounterByFlag", varargs...)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterByFlag indicates an expected call of GetCounterByFlag.
func (mr *MockSystemSvcClientMockRecorder) GetCounterByFlag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterByFlag", reflect.TypeOf((*MockSystemSvcClient)(nil).GetCounterByFlag), varargs...)
}

// GetCounters mocks base method.
func (m *MockSystemSvcClient) GetCounters(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.CountersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCounters", varargs...)
	ret0, _ := ret[0].(*pb.CountersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockSystemSvcClientMockRecorder) GetCounters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockSystemSvcClient)(nil).GetCounters), varargs...)
}

// ResetCounter mocks base method.
func (m *MockSystemSvcClient) ResetCounter(ctx context.Context, in *pb.CounterRequest, opts ...grpc.CallOption) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetCounter", varargs...)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCounter indicates an expected call of ResetCounter.
func (mr *MockSystemSvcClientMockRecorder) ResetCounter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCounter", reflect.TypeOf((*MockSystemSvcClient)(nil).ResetCounter), varargs...)
}

// MockSystemSvcServer is a mock of SystemSvcServer interface.
type MockSystemSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockSystemSvcServerMockRecorder
}

// MockSystemSvcServerMockRecorder is the mock recorder for MockSystemSvcServer.
type MockSystemSvcServerMockRecorder struct {
	mock *MockSystemSvcServer
}

// NewMockSystemSvcServer creates a new mock instance.
func NewMockSystemSvcServer(ctrl *gomock.Controller) *MockSystemSvcServer {
	mock := &MockSystemSvcServer{ctrl: ctrl}
	mock.recorder = &MockSystemSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemSvcServer) EXPECT() *MockSystemSvcServerMockRecorder {
	return m.recorder
}

// ChangeCounter mocks base method.
func (m *MockSystemSvcServer) ChangeCounter(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCounter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCounter indicates an expected call of ChangeCounter.
func (mr *MockSystemSvcServerMockRecorder) ChangeCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCounter", reflect.TypeOf((*MockSystemSvcServer)(nil).ChangeCounter), arg0, arg1)
}

// CreateCounter mocks base method.
func (m *MockSystemSvcServer) CreateCounter(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCounter", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCounter indicates an expected call of CreateCounter.
func (mr *MockSystemSvcServerMockRecorder) CreateCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCounter", reflect.TypeOf((*MockSystemSvcServer)(nil).CreateCounter), arg0, arg1)
}

// GetCounter mocks base method.
func (m *MockSystemSvcServer) GetCounter(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockSystemSvcServerMockRecorder) GetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockSystemSvcServer)(nil).GetCounter), arg0, arg1)
}

// GetCounterByFlag mocks base method.
func (m *MockSystemSvcServer) GetCounterByFlag(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterByFlag", arg0, arg1)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterByFlag indicates an expected call of GetCounterByFlag.
func (mr *MockSystemSvcServerMockRecorder) GetCounterByFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterByFlag", reflect.TypeOf((*MockSystemSvcServer)(nil).GetCounterByFlag), arg0, arg1)
}

// GetCounters mocks base method.
func (m *MockSystemSvcServer) GetCounters(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.CountersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters", arg0, arg1)
	ret0, _ := ret[0].(*pb.CountersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockSystemSvcServerMockRecorder) GetCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockSystemSvcServer)(nil).GetCounters), arg0, arg1)
}

// ResetCounter mocks base method.
func (m *MockSystemSvcServer) ResetCounter(arg0 context.Context, arg1 *pb.CounterRequest) (*pb.CounterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCounter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CounterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCounter indicates an expected call of ResetCounter.
func (mr *MockSystemSvcServerMockRecorder) ResetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCounter", reflect.TypeOf((*MockSystemSvcServer)(nil).ResetCounter), arg0, arg1)
}

// MockUnsafeSystemSvcServer is a mock of UnsafeSystemSvcServer interface.
type MockUnsafeSystemSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSystemSvcServerMockRecorder
}

// MockUnsafeSystemSvcServerMockRecorder is the mock recorder for MockUnsafeSystemSvcServer.
type MockUnsafeSystemSvcServerMockRecorder struct {
	mock *MockUnsafeSystemSvcServer
}

// NewMockUnsafeSystemSvcServer creates a new mock instance.
func NewMockUnsafeSystemSvcServer(ctrl *gomock.Controller) *MockUnsafeSystemSvcServer {
	mock := &MockUnsafeSystemSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSystemSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSystemSvcServer) EXPECT() *MockUnsafeSystemSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSystemSvcServer mocks base method.
func (m *MockUnsafeSystemSvcServer) mustEmbedUnimplementedSystemSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSystemSvcServer")
}

// mustEmbedUnimplementedSystemSvcServer indicates an expected call of mustEmbedUnimplementedSystemSvcServer.
func (mr *MockUnsafeSystemSvcServerMockRecorder) mustEmbedUnimplementedSystemSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSystemSvcServer", reflect.TypeOf((*MockUnsafeSystemSvcServer)(nil).mustEmbedUnimplementedSystemSvcServer))
}
