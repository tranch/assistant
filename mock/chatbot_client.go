// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/chatbot_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockChatbotSvcClient is a mock of ChatbotSvcClient interface.
type MockChatbotSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotSvcClientMockRecorder
}

// MockChatbotSvcClientMockRecorder is the mock recorder for MockChatbotSvcClient.
type MockChatbotSvcClientMockRecorder struct {
	mock *MockChatbotSvcClient
}

// NewMockChatbotSvcClient creates a new mock instance.
func NewMockChatbotSvcClient(ctrl *gomock.Controller) *MockChatbotSvcClient {
	mock := &MockChatbotSvcClient{ctrl: ctrl}
	mock.recorder = &MockChatbotSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotSvcClient) EXPECT() *MockChatbotSvcClientMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockChatbotSvcClient) Action(ctx context.Context, in *pb.BotRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Action", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Action indicates an expected call of Action.
func (mr *MockChatbotSvcClientMockRecorder) Action(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockChatbotSvcClient)(nil).Action), varargs...)
}

// ActionDoc mocks base method.
func (m *MockChatbotSvcClient) ActionDoc(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActionDoc", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDoc indicates an expected call of ActionDoc.
func (mr *MockChatbotSvcClientMockRecorder) ActionDoc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDoc", reflect.TypeOf((*MockChatbotSvcClient)(nil).ActionDoc), varargs...)
}

// CreateGroup mocks base method.
func (m *MockChatbotSvcClient) CreateGroup(ctx context.Context, in *pb.GroupRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockChatbotSvcClientMockRecorder) CreateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockChatbotSvcClient)(nil).CreateGroup), varargs...)
}

// CreateGroupBot mocks base method.
func (m *MockChatbotSvcClient) CreateGroupBot(ctx context.Context, in *pb.GroupBotRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupBot", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupBot indicates an expected call of CreateGroupBot.
func (mr *MockChatbotSvcClientMockRecorder) CreateGroupBot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupBot", reflect.TypeOf((*MockChatbotSvcClient)(nil).CreateGroupBot), varargs...)
}

// CreateTrigger mocks base method.
func (m *MockChatbotSvcClient) CreateTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrigger", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockChatbotSvcClientMockRecorder) CreateTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockChatbotSvcClient)(nil).CreateTrigger), varargs...)
}

// CronTrigger mocks base method.
func (m *MockChatbotSvcClient) CronTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CronTrigger", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronTrigger indicates an expected call of CronTrigger.
func (mr *MockChatbotSvcClientMockRecorder) CronTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronTrigger", reflect.TypeOf((*MockChatbotSvcClient)(nil).CronTrigger), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockChatbotSvcClient) DeleteGroup(ctx context.Context, in *pb.GroupRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockChatbotSvcClientMockRecorder) DeleteGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockChatbotSvcClient)(nil).DeleteGroup), varargs...)
}

// DeleteGroupBot mocks base method.
func (m *MockChatbotSvcClient) DeleteGroupBot(ctx context.Context, in *pb.GroupBotRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupBot", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupBot indicates an expected call of DeleteGroupBot.
func (mr *MockChatbotSvcClientMockRecorder) DeleteGroupBot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupBot", reflect.TypeOf((*MockChatbotSvcClient)(nil).DeleteGroupBot), varargs...)
}

// DeleteTrigger mocks base method.
func (m *MockChatbotSvcClient) DeleteTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrigger", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockChatbotSvcClientMockRecorder) DeleteTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockChatbotSvcClient)(nil).DeleteTrigger), varargs...)
}

// Form mocks base method.
func (m *MockChatbotSvcClient) Form(ctx context.Context, in *pb.BotRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Form", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Form indicates an expected call of Form.
func (mr *MockChatbotSvcClientMockRecorder) Form(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Form", reflect.TypeOf((*MockChatbotSvcClient)(nil).Form), varargs...)
}

// GetBot mocks base method.
func (m *MockChatbotSvcClient) GetBot(ctx context.Context, in *pb.BotRequest, opts ...grpc.CallOption) (*pb.BotReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBot", varargs...)
	ret0, _ := ret[0].(*pb.BotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBot indicates an expected call of GetBot.
func (mr *MockChatbotSvcClientMockRecorder) GetBot(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBot", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetBot), varargs...)
}

// GetBots mocks base method.
func (m *MockChatbotSvcClient) GetBots(ctx context.Context, in *pb.BotsRequest, opts ...grpc.CallOption) (*pb.BotsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBots", varargs...)
	ret0, _ := ret[0].(*pb.BotsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBots indicates an expected call of GetBots.
func (mr *MockChatbotSvcClientMockRecorder) GetBots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBots", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetBots), varargs...)
}

// GetGroup mocks base method.
func (m *MockChatbotSvcClient) GetGroup(ctx context.Context, in *pb.GroupRequest, opts ...grpc.CallOption) (*pb.GetGroupReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroup", varargs...)
	ret0, _ := ret[0].(*pb.GetGroupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockChatbotSvcClientMockRecorder) GetGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetGroup), varargs...)
}

// GetGroupBotSetting mocks base method.
func (m *MockChatbotSvcClient) GetGroupBotSetting(ctx context.Context, in *pb.BotSettingRequest, opts ...grpc.CallOption) (*pb.BotSettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupBotSetting", varargs...)
	ret0, _ := ret[0].(*pb.BotSettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupBotSetting indicates an expected call of GetGroupBotSetting.
func (mr *MockChatbotSvcClientMockRecorder) GetGroupBotSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupBotSetting", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetGroupBotSetting), varargs...)
}

// GetGroupId mocks base method.
func (m *MockChatbotSvcClient) GetGroupId(ctx context.Context, in *pb.UuidRequest, opts ...grpc.CallOption) (*pb.IdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupId", varargs...)
	ret0, _ := ret[0].(*pb.IdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupId indicates an expected call of GetGroupId.
func (mr *MockChatbotSvcClientMockRecorder) GetGroupId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupId", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetGroupId), varargs...)
}

// GetGroupSetting mocks base method.
func (m *MockChatbotSvcClient) GetGroupSetting(ctx context.Context, in *pb.GroupSettingRequest, opts ...grpc.CallOption) (*pb.GroupSettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupSetting", varargs...)
	ret0, _ := ret[0].(*pb.GroupSettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSetting indicates an expected call of GetGroupSetting.
func (mr *MockChatbotSvcClientMockRecorder) GetGroupSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSetting", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetGroupSetting), varargs...)
}

// GetGroups mocks base method.
func (m *MockChatbotSvcClient) GetGroups(ctx context.Context, in *pb.GroupRequest, opts ...grpc.CallOption) (*pb.GetGroupsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroups", varargs...)
	ret0, _ := ret[0].(*pb.GetGroupsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockChatbotSvcClientMockRecorder) GetGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockChatbotSvcClient)(nil).GetGroups), varargs...)
}

// Handle mocks base method.
func (m *MockChatbotSvcClient) Handle(ctx context.Context, in *pb.ChatbotRequest, opts ...grpc.CallOption) (*pb.ChatbotReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(*pb.ChatbotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockChatbotSvcClientMockRecorder) Handle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockChatbotSvcClient)(nil).Handle), varargs...)
}

// ListWebhook mocks base method.
func (m *MockChatbotSvcClient) ListWebhook(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.WebhooksReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebhook", varargs...)
	ret0, _ := ret[0].(*pb.WebhooksReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhook indicates an expected call of ListWebhook.
func (mr *MockChatbotSvcClientMockRecorder) ListWebhook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhook", reflect.TypeOf((*MockChatbotSvcClient)(nil).ListWebhook), varargs...)
}

// Register mocks base method.
func (m *MockChatbotSvcClient) Register(ctx context.Context, in *pb.BotRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockChatbotSvcClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockChatbotSvcClient)(nil).Register), varargs...)
}

// RunActionScript mocks base method.
func (m *MockChatbotSvcClient) RunActionScript(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunActionScript", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunActionScript indicates an expected call of RunActionScript.
func (mr *MockChatbotSvcClientMockRecorder) RunActionScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActionScript", reflect.TypeOf((*MockChatbotSvcClient)(nil).RunActionScript), varargs...)
}

// SyntaxCheck mocks base method.
func (m *MockChatbotSvcClient) SyntaxCheck(ctx context.Context, in *pb.WorkflowRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyntaxCheck", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyntaxCheck indicates an expected call of SyntaxCheck.
func (mr *MockChatbotSvcClientMockRecorder) SyntaxCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyntaxCheck", reflect.TypeOf((*MockChatbotSvcClient)(nil).SyntaxCheck), varargs...)
}

// UpdateGroup mocks base method.
func (m *MockChatbotSvcClient) UpdateGroup(ctx context.Context, in *pb.GroupRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroup", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockChatbotSvcClientMockRecorder) UpdateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockChatbotSvcClient)(nil).UpdateGroup), varargs...)
}

// UpdateGroupBotSetting mocks base method.
func (m *MockChatbotSvcClient) UpdateGroupBotSetting(ctx context.Context, in *pb.BotSettingRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupBotSetting", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupBotSetting indicates an expected call of UpdateGroupBotSetting.
func (mr *MockChatbotSvcClientMockRecorder) UpdateGroupBotSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupBotSetting", reflect.TypeOf((*MockChatbotSvcClient)(nil).UpdateGroupBotSetting), varargs...)
}

// UpdateGroupSetting mocks base method.
func (m *MockChatbotSvcClient) UpdateGroupSetting(ctx context.Context, in *pb.GroupSettingRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupSetting", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupSetting indicates an expected call of UpdateGroupSetting.
func (mr *MockChatbotSvcClientMockRecorder) UpdateGroupSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupSetting", reflect.TypeOf((*MockChatbotSvcClient)(nil).UpdateGroupSetting), varargs...)
}

// WebhookTrigger mocks base method.
func (m *MockChatbotSvcClient) WebhookTrigger(ctx context.Context, in *pb.TriggerRequest, opts ...grpc.CallOption) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookTrigger", varargs...)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookTrigger indicates an expected call of WebhookTrigger.
func (mr *MockChatbotSvcClientMockRecorder) WebhookTrigger(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookTrigger", reflect.TypeOf((*MockChatbotSvcClient)(nil).WebhookTrigger), varargs...)
}

// MockChatbotSvcServer is a mock of ChatbotSvcServer interface.
type MockChatbotSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotSvcServerMockRecorder
}

// MockChatbotSvcServerMockRecorder is the mock recorder for MockChatbotSvcServer.
type MockChatbotSvcServerMockRecorder struct {
	mock *MockChatbotSvcServer
}

// NewMockChatbotSvcServer creates a new mock instance.
func NewMockChatbotSvcServer(ctrl *gomock.Controller) *MockChatbotSvcServer {
	mock := &MockChatbotSvcServer{ctrl: ctrl}
	mock.recorder = &MockChatbotSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotSvcServer) EXPECT() *MockChatbotSvcServerMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockChatbotSvcServer) Action(arg0 context.Context, arg1 *pb.BotRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Action indicates an expected call of Action.
func (mr *MockChatbotSvcServerMockRecorder) Action(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockChatbotSvcServer)(nil).Action), arg0, arg1)
}

// ActionDoc mocks base method.
func (m *MockChatbotSvcServer) ActionDoc(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionDoc", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionDoc indicates an expected call of ActionDoc.
func (mr *MockChatbotSvcServerMockRecorder) ActionDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionDoc", reflect.TypeOf((*MockChatbotSvcServer)(nil).ActionDoc), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockChatbotSvcServer) CreateGroup(arg0 context.Context, arg1 *pb.GroupRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockChatbotSvcServerMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockChatbotSvcServer)(nil).CreateGroup), arg0, arg1)
}

// CreateGroupBot mocks base method.
func (m *MockChatbotSvcServer) CreateGroupBot(arg0 context.Context, arg1 *pb.GroupBotRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupBot", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupBot indicates an expected call of CreateGroupBot.
func (mr *MockChatbotSvcServerMockRecorder) CreateGroupBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupBot", reflect.TypeOf((*MockChatbotSvcServer)(nil).CreateGroupBot), arg0, arg1)
}

// CreateTrigger mocks base method.
func (m *MockChatbotSvcServer) CreateTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockChatbotSvcServerMockRecorder) CreateTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockChatbotSvcServer)(nil).CreateTrigger), arg0, arg1)
}

// CronTrigger mocks base method.
func (m *MockChatbotSvcServer) CronTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronTrigger indicates an expected call of CronTrigger.
func (mr *MockChatbotSvcServerMockRecorder) CronTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronTrigger", reflect.TypeOf((*MockChatbotSvcServer)(nil).CronTrigger), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockChatbotSvcServer) DeleteGroup(arg0 context.Context, arg1 *pb.GroupRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockChatbotSvcServerMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockChatbotSvcServer)(nil).DeleteGroup), arg0, arg1)
}

// DeleteGroupBot mocks base method.
func (m *MockChatbotSvcServer) DeleteGroupBot(arg0 context.Context, arg1 *pb.GroupBotRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupBot", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupBot indicates an expected call of DeleteGroupBot.
func (mr *MockChatbotSvcServerMockRecorder) DeleteGroupBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupBot", reflect.TypeOf((*MockChatbotSvcServer)(nil).DeleteGroupBot), arg0, arg1)
}

// DeleteTrigger mocks base method.
func (m *MockChatbotSvcServer) DeleteTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockChatbotSvcServerMockRecorder) DeleteTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockChatbotSvcServer)(nil).DeleteTrigger), arg0, arg1)
}

// Form mocks base method.
func (m *MockChatbotSvcServer) Form(arg0 context.Context, arg1 *pb.BotRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Form", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Form indicates an expected call of Form.
func (mr *MockChatbotSvcServerMockRecorder) Form(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Form", reflect.TypeOf((*MockChatbotSvcServer)(nil).Form), arg0, arg1)
}

// GetBot mocks base method.
func (m *MockChatbotSvcServer) GetBot(arg0 context.Context, arg1 *pb.BotRequest) (*pb.BotReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBot", arg0, arg1)
	ret0, _ := ret[0].(*pb.BotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBot indicates an expected call of GetBot.
func (mr *MockChatbotSvcServerMockRecorder) GetBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBot", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetBot), arg0, arg1)
}

// GetBots mocks base method.
func (m *MockChatbotSvcServer) GetBots(arg0 context.Context, arg1 *pb.BotsRequest) (*pb.BotsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBots", arg0, arg1)
	ret0, _ := ret[0].(*pb.BotsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBots indicates an expected call of GetBots.
func (mr *MockChatbotSvcServerMockRecorder) GetBots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBots", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetBots), arg0, arg1)
}

// GetGroup mocks base method.
func (m *MockChatbotSvcServer) GetGroup(arg0 context.Context, arg1 *pb.GroupRequest) (*pb.GetGroupReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetGroupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockChatbotSvcServerMockRecorder) GetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetGroup), arg0, arg1)
}

// GetGroupBotSetting mocks base method.
func (m *MockChatbotSvcServer) GetGroupBotSetting(arg0 context.Context, arg1 *pb.BotSettingRequest) (*pb.BotSettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupBotSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.BotSettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupBotSetting indicates an expected call of GetGroupBotSetting.
func (mr *MockChatbotSvcServerMockRecorder) GetGroupBotSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupBotSetting", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetGroupBotSetting), arg0, arg1)
}

// GetGroupId mocks base method.
func (m *MockChatbotSvcServer) GetGroupId(arg0 context.Context, arg1 *pb.UuidRequest) (*pb.IdReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupId", arg0, arg1)
	ret0, _ := ret[0].(*pb.IdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupId indicates an expected call of GetGroupId.
func (mr *MockChatbotSvcServerMockRecorder) GetGroupId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupId", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetGroupId), arg0, arg1)
}

// GetGroupSetting mocks base method.
func (m *MockChatbotSvcServer) GetGroupSetting(arg0 context.Context, arg1 *pb.GroupSettingRequest) (*pb.GroupSettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.GroupSettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSetting indicates an expected call of GetGroupSetting.
func (mr *MockChatbotSvcServerMockRecorder) GetGroupSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSetting", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetGroupSetting), arg0, arg1)
}

// GetGroups mocks base method.
func (m *MockChatbotSvcServer) GetGroups(arg0 context.Context, arg1 *pb.GroupRequest) (*pb.GetGroupsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetGroupsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockChatbotSvcServerMockRecorder) GetGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockChatbotSvcServer)(nil).GetGroups), arg0, arg1)
}

// Handle mocks base method.
func (m *MockChatbotSvcServer) Handle(arg0 context.Context, arg1 *pb.ChatbotRequest) (*pb.ChatbotReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChatbotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockChatbotSvcServerMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockChatbotSvcServer)(nil).Handle), arg0, arg1)
}

// ListWebhook mocks base method.
func (m *MockChatbotSvcServer) ListWebhook(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.WebhooksReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhook", arg0, arg1)
	ret0, _ := ret[0].(*pb.WebhooksReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhook indicates an expected call of ListWebhook.
func (mr *MockChatbotSvcServerMockRecorder) ListWebhook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhook", reflect.TypeOf((*MockChatbotSvcServer)(nil).ListWebhook), arg0, arg1)
}

// Register mocks base method.
func (m *MockChatbotSvcServer) Register(arg0 context.Context, arg1 *pb.BotRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockChatbotSvcServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockChatbotSvcServer)(nil).Register), arg0, arg1)
}

// RunActionScript mocks base method.
func (m *MockChatbotSvcServer) RunActionScript(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunActionScript", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunActionScript indicates an expected call of RunActionScript.
func (mr *MockChatbotSvcServerMockRecorder) RunActionScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActionScript", reflect.TypeOf((*MockChatbotSvcServer)(nil).RunActionScript), arg0, arg1)
}

// SyntaxCheck mocks base method.
func (m *MockChatbotSvcServer) SyntaxCheck(arg0 context.Context, arg1 *pb.WorkflowRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyntaxCheck", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyntaxCheck indicates an expected call of SyntaxCheck.
func (mr *MockChatbotSvcServerMockRecorder) SyntaxCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyntaxCheck", reflect.TypeOf((*MockChatbotSvcServer)(nil).SyntaxCheck), arg0, arg1)
}

// UpdateGroup mocks base method.
func (m *MockChatbotSvcServer) UpdateGroup(arg0 context.Context, arg1 *pb.GroupRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockChatbotSvcServerMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockChatbotSvcServer)(nil).UpdateGroup), arg0, arg1)
}

// UpdateGroupBotSetting mocks base method.
func (m *MockChatbotSvcServer) UpdateGroupBotSetting(arg0 context.Context, arg1 *pb.BotSettingRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupBotSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupBotSetting indicates an expected call of UpdateGroupBotSetting.
func (mr *MockChatbotSvcServerMockRecorder) UpdateGroupBotSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupBotSetting", reflect.TypeOf((*MockChatbotSvcServer)(nil).UpdateGroupBotSetting), arg0, arg1)
}

// UpdateGroupSetting mocks base method.
func (m *MockChatbotSvcServer) UpdateGroupSetting(arg0 context.Context, arg1 *pb.GroupSettingRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupSetting indicates an expected call of UpdateGroupSetting.
func (mr *MockChatbotSvcServerMockRecorder) UpdateGroupSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupSetting", reflect.TypeOf((*MockChatbotSvcServer)(nil).UpdateGroupSetting), arg0, arg1)
}

// WebhookTrigger mocks base method.
func (m *MockChatbotSvcServer) WebhookTrigger(arg0 context.Context, arg1 *pb.TriggerRequest) (*pb.WorkflowReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookTrigger", arg0, arg1)
	ret0, _ := ret[0].(*pb.WorkflowReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookTrigger indicates an expected call of WebhookTrigger.
func (mr *MockChatbotSvcServerMockRecorder) WebhookTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookTrigger", reflect.TypeOf((*MockChatbotSvcServer)(nil).WebhookTrigger), arg0, arg1)
}

// MockUnsafeChatbotSvcServer is a mock of UnsafeChatbotSvcServer interface.
type MockUnsafeChatbotSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeChatbotSvcServerMockRecorder
}

// MockUnsafeChatbotSvcServerMockRecorder is the mock recorder for MockUnsafeChatbotSvcServer.
type MockUnsafeChatbotSvcServerMockRecorder struct {
	mock *MockUnsafeChatbotSvcServer
}

// NewMockUnsafeChatbotSvcServer creates a new mock instance.
func NewMockUnsafeChatbotSvcServer(ctrl *gomock.Controller) *MockUnsafeChatbotSvcServer {
	mock := &MockUnsafeChatbotSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeChatbotSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeChatbotSvcServer) EXPECT() *MockUnsafeChatbotSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedChatbotSvcServer mocks base method.
func (m *MockUnsafeChatbotSvcServer) mustEmbedUnimplementedChatbotSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatbotSvcServer")
}

// mustEmbedUnimplementedChatbotSvcServer indicates an expected call of mustEmbedUnimplementedChatbotSvcServer.
func (mr *MockUnsafeChatbotSvcServerMockRecorder) mustEmbedUnimplementedChatbotSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatbotSvcServer", reflect.TypeOf((*MockUnsafeChatbotSvcServer)(nil).mustEmbedUnimplementedChatbotSvcServer))
}
