// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/chatbot.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockChatbotClient is a mock of ChatbotClient interface.
type MockChatbotClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotClientMockRecorder
}

// MockChatbotClientMockRecorder is the mock recorder for MockChatbotClient.
type MockChatbotClientMockRecorder struct {
	mock *MockChatbotClient
}

// NewMockChatbotClient creates a new mock instance.
func NewMockChatbotClient(ctrl *gomock.Controller) *MockChatbotClient {
	mock := &MockChatbotClient{ctrl: ctrl}
	mock.recorder = &MockChatbotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotClient) EXPECT() *MockChatbotClientMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockChatbotClient) Handle(ctx context.Context, in *pb.ChatbotRequest, opts ...grpc.CallOption) (*pb.ChatbotReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handle", varargs...)
	ret0, _ := ret[0].(*pb.ChatbotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockChatbotClientMockRecorder) Handle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockChatbotClient)(nil).Handle), varargs...)
}

// MockChatbotServer is a mock of ChatbotServer interface.
type MockChatbotServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotServerMockRecorder
}

// MockChatbotServerMockRecorder is the mock recorder for MockChatbotServer.
type MockChatbotServerMockRecorder struct {
	mock *MockChatbotServer
}

// NewMockChatbotServer creates a new mock instance.
func NewMockChatbotServer(ctrl *gomock.Controller) *MockChatbotServer {
	mock := &MockChatbotServer{ctrl: ctrl}
	mock.recorder = &MockChatbotServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotServer) EXPECT() *MockChatbotServerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockChatbotServer) Handle(arg0 context.Context, arg1 *pb.ChatbotRequest) (*pb.ChatbotReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChatbotReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockChatbotServerMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockChatbotServer)(nil).Handle), arg0, arg1)
}
