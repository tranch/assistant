// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/user.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockUserSvcClient is a mock of UserSvcClient interface.
type MockUserSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcClientMockRecorder
}

// MockUserSvcClientMockRecorder is the mock recorder for MockUserSvcClient.
type MockUserSvcClientMockRecorder struct {
	mock *MockUserSvcClient
}

// NewMockUserSvcClient creates a new mock instance.
func NewMockUserSvcClient(ctrl *gomock.Controller) *MockUserSvcClient {
	mock := &MockUserSvcClient{ctrl: ctrl}
	mock.recorder = &MockUserSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvcClient) EXPECT() *MockUserSvcClientMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockUserSvcClient) Authorization(ctx context.Context, in *pb.AuthRequest, opts ...grpc.CallOption) (*pb.AuthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authorization", varargs...)
	ret0, _ := ret[0].(*pb.AuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockUserSvcClientMockRecorder) Authorization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockUserSvcClient)(nil).Authorization), varargs...)
}

// CreateUser mocks base method.
func (m *MockUserSvcClient) CreateUser(ctx context.Context, in *pb.UserRequest, opts ...grpc.CallOption) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserSvcClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserSvcClient)(nil).CreateUser), varargs...)
}

// GetAuthToken mocks base method.
func (m *MockUserSvcClient) GetAuthToken(ctx context.Context, in *pb.AuthRequest, opts ...grpc.CallOption) (*pb.AuthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthToken", varargs...)
	ret0, _ := ret[0].(*pb.AuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockUserSvcClientMockRecorder) GetAuthToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockUserSvcClient)(nil).GetAuthToken), varargs...)
}

// GetRole mocks base method.
func (m *MockUserSvcClient) GetRole(ctx context.Context, in *pb.RoleRequest, opts ...grpc.CallOption) (*pb.RoleReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*pb.RoleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserSvcClientMockRecorder) GetRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserSvcClient)(nil).GetRole), varargs...)
}

// GetRoleImage mocks base method.
func (m *MockUserSvcClient) GetRoleImage(ctx context.Context, in *pb.RoleRequest, opts ...grpc.CallOption) (*pb.BytesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleImage", varargs...)
	ret0, _ := ret[0].(*pb.BytesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleImage indicates an expected call of GetRoleImage.
func (mr *MockUserSvcClientMockRecorder) GetRoleImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleImage", reflect.TypeOf((*MockUserSvcClient)(nil).GetRoleImage), varargs...)
}

// GetUser mocks base method.
func (m *MockUserSvcClient) GetUser(ctx context.Context, in *pb.UserRequest, opts ...grpc.CallOption) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserSvcClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserSvcClient)(nil).GetUser), varargs...)
}

// GetUserByName mocks base method.
func (m *MockUserSvcClient) GetUserByName(ctx context.Context, in *pb.UserRequest, opts ...grpc.CallOption) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByName", varargs...)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserSvcClientMockRecorder) GetUserByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserSvcClient)(nil).GetUserByName), varargs...)
}

// GetUsers mocks base method.
func (m *MockUserSvcClient) GetUsers(ctx context.Context, in *pb.UserRequest, opts ...grpc.CallOption) (*pb.UsersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*pb.UsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserSvcClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserSvcClient)(nil).GetUsers), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserSvcClient) UpdateUser(ctx context.Context, in *pb.UserRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserSvcClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserSvcClient)(nil).UpdateUser), varargs...)
}

// MockUserSvcServer is a mock of UserSvcServer interface.
type MockUserSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcServerMockRecorder
}

// MockUserSvcServerMockRecorder is the mock recorder for MockUserSvcServer.
type MockUserSvcServerMockRecorder struct {
	mock *MockUserSvcServer
}

// NewMockUserSvcServer creates a new mock instance.
func NewMockUserSvcServer(ctrl *gomock.Controller) *MockUserSvcServer {
	mock := &MockUserSvcServer{ctrl: ctrl}
	mock.recorder = &MockUserSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvcServer) EXPECT() *MockUserSvcServerMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockUserSvcServer) Authorization(arg0 context.Context, arg1 *pb.AuthRequest) (*pb.AuthReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", arg0, arg1)
	ret0, _ := ret[0].(*pb.AuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockUserSvcServerMockRecorder) Authorization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockUserSvcServer)(nil).Authorization), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserSvcServer) CreateUser(arg0 context.Context, arg1 *pb.UserRequest) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserSvcServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserSvcServer)(nil).CreateUser), arg0, arg1)
}

// GetAuthToken mocks base method.
func (m *MockUserSvcServer) GetAuthToken(arg0 context.Context, arg1 *pb.AuthRequest) (*pb.AuthReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", arg0, arg1)
	ret0, _ := ret[0].(*pb.AuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockUserSvcServerMockRecorder) GetAuthToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockUserSvcServer)(nil).GetAuthToken), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockUserSvcServer) GetRole(arg0 context.Context, arg1 *pb.RoleRequest) (*pb.RoleReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*pb.RoleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserSvcServerMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserSvcServer)(nil).GetRole), arg0, arg1)
}

// GetRoleImage mocks base method.
func (m *MockUserSvcServer) GetRoleImage(arg0 context.Context, arg1 *pb.RoleRequest) (*pb.BytesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleImage", arg0, arg1)
	ret0, _ := ret[0].(*pb.BytesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleImage indicates an expected call of GetRoleImage.
func (mr *MockUserSvcServerMockRecorder) GetRoleImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleImage", reflect.TypeOf((*MockUserSvcServer)(nil).GetRoleImage), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserSvcServer) GetUser(arg0 context.Context, arg1 *pb.UserRequest) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserSvcServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserSvcServer)(nil).GetUser), arg0, arg1)
}

// GetUserByName mocks base method.
func (m *MockUserSvcServer) GetUserByName(arg0 context.Context, arg1 *pb.UserRequest) (*pb.UserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserSvcServerMockRecorder) GetUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserSvcServer)(nil).GetUserByName), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockUserSvcServer) GetUsers(arg0 context.Context, arg1 *pb.UserRequest) (*pb.UsersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*pb.UsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserSvcServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserSvcServer)(nil).GetUsers), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserSvcServer) UpdateUser(arg0 context.Context, arg1 *pb.UserRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserSvcServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserSvcServer)(nil).UpdateUser), arg0, arg1)
}
