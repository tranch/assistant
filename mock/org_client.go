// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/org_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockOrgSvcClient is a mock of OrgSvcClient interface.
type MockOrgSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrgSvcClientMockRecorder
}

// MockOrgSvcClientMockRecorder is the mock recorder for MockOrgSvcClient.
type MockOrgSvcClientMockRecorder struct {
	mock *MockOrgSvcClient
}

// NewMockOrgSvcClient creates a new mock instance.
func NewMockOrgSvcClient(ctrl *gomock.Controller) *MockOrgSvcClient {
	mock := &MockOrgSvcClient{ctrl: ctrl}
	mock.recorder = &MockOrgSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgSvcClient) EXPECT() *MockOrgSvcClientMockRecorder {
	return m.recorder
}

// CreateKeyResult mocks base method.
func (m *MockOrgSvcClient) CreateKeyResult(ctx context.Context, in *pb.KeyResultRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyResult", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyResult indicates an expected call of CreateKeyResult.
func (mr *MockOrgSvcClientMockRecorder) CreateKeyResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyResult", reflect.TypeOf((*MockOrgSvcClient)(nil).CreateKeyResult), varargs...)
}

// CreateObjective mocks base method.
func (m *MockOrgSvcClient) CreateObjective(ctx context.Context, in *pb.ObjectiveRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObjective", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjective indicates an expected call of CreateObjective.
func (mr *MockOrgSvcClientMockRecorder) CreateObjective(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjective", reflect.TypeOf((*MockOrgSvcClient)(nil).CreateObjective), varargs...)
}

// DeleteKeyResult mocks base method.
func (m *MockOrgSvcClient) DeleteKeyResult(ctx context.Context, in *pb.KeyResultRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyResult", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyResult indicates an expected call of DeleteKeyResult.
func (mr *MockOrgSvcClientMockRecorder) DeleteKeyResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyResult", reflect.TypeOf((*MockOrgSvcClient)(nil).DeleteKeyResult), varargs...)
}

// DeleteObjective mocks base method.
func (m *MockOrgSvcClient) DeleteObjective(ctx context.Context, in *pb.ObjectiveRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjective", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjective indicates an expected call of DeleteObjective.
func (mr *MockOrgSvcClientMockRecorder) DeleteObjective(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjective", reflect.TypeOf((*MockOrgSvcClient)(nil).DeleteObjective), varargs...)
}

// GetKeyResult mocks base method.
func (m *MockOrgSvcClient) GetKeyResult(ctx context.Context, in *pb.KeyResultRequest, opts ...grpc.CallOption) (*pb.KeyResultReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyResult", varargs...)
	ret0, _ := ret[0].(*pb.KeyResultReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResult indicates an expected call of GetKeyResult.
func (mr *MockOrgSvcClientMockRecorder) GetKeyResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResult", reflect.TypeOf((*MockOrgSvcClient)(nil).GetKeyResult), varargs...)
}

// GetKeyResults mocks base method.
func (m *MockOrgSvcClient) GetKeyResults(ctx context.Context, in *pb.KeyResultRequest, opts ...grpc.CallOption) (*pb.KeyResultsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyResults", varargs...)
	ret0, _ := ret[0].(*pb.KeyResultsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResults indicates an expected call of GetKeyResults.
func (mr *MockOrgSvcClientMockRecorder) GetKeyResults(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResults", reflect.TypeOf((*MockOrgSvcClient)(nil).GetKeyResults), varargs...)
}

// GetObjective mocks base method.
func (m *MockOrgSvcClient) GetObjective(ctx context.Context, in *pb.ObjectiveRequest, opts ...grpc.CallOption) (*pb.ObjectiveReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjective", varargs...)
	ret0, _ := ret[0].(*pb.ObjectiveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjective indicates an expected call of GetObjective.
func (mr *MockOrgSvcClientMockRecorder) GetObjective(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjective", reflect.TypeOf((*MockOrgSvcClient)(nil).GetObjective), varargs...)
}

// GetObjectives mocks base method.
func (m *MockOrgSvcClient) GetObjectives(ctx context.Context, in *pb.ObjectiveRequest, opts ...grpc.CallOption) (*pb.ObjectivesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectives", varargs...)
	ret0, _ := ret[0].(*pb.ObjectivesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectives indicates an expected call of GetObjectives.
func (mr *MockOrgSvcClientMockRecorder) GetObjectives(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectives", reflect.TypeOf((*MockOrgSvcClient)(nil).GetObjectives), varargs...)
}

// MockOrgSvcServer is a mock of OrgSvcServer interface.
type MockOrgSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrgSvcServerMockRecorder
}

// MockOrgSvcServerMockRecorder is the mock recorder for MockOrgSvcServer.
type MockOrgSvcServerMockRecorder struct {
	mock *MockOrgSvcServer
}

// NewMockOrgSvcServer creates a new mock instance.
func NewMockOrgSvcServer(ctrl *gomock.Controller) *MockOrgSvcServer {
	mock := &MockOrgSvcServer{ctrl: ctrl}
	mock.recorder = &MockOrgSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgSvcServer) EXPECT() *MockOrgSvcServerMockRecorder {
	return m.recorder
}

// CreateKeyResult mocks base method.
func (m *MockOrgSvcServer) CreateKeyResult(arg0 context.Context, arg1 *pb.KeyResultRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyResult", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyResult indicates an expected call of CreateKeyResult.
func (mr *MockOrgSvcServerMockRecorder) CreateKeyResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyResult", reflect.TypeOf((*MockOrgSvcServer)(nil).CreateKeyResult), arg0, arg1)
}

// CreateObjective mocks base method.
func (m *MockOrgSvcServer) CreateObjective(arg0 context.Context, arg1 *pb.ObjectiveRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjective", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjective indicates an expected call of CreateObjective.
func (mr *MockOrgSvcServerMockRecorder) CreateObjective(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjective", reflect.TypeOf((*MockOrgSvcServer)(nil).CreateObjective), arg0, arg1)
}

// DeleteKeyResult mocks base method.
func (m *MockOrgSvcServer) DeleteKeyResult(arg0 context.Context, arg1 *pb.KeyResultRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyResult", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyResult indicates an expected call of DeleteKeyResult.
func (mr *MockOrgSvcServerMockRecorder) DeleteKeyResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyResult", reflect.TypeOf((*MockOrgSvcServer)(nil).DeleteKeyResult), arg0, arg1)
}

// DeleteObjective mocks base method.
func (m *MockOrgSvcServer) DeleteObjective(arg0 context.Context, arg1 *pb.ObjectiveRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjective", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjective indicates an expected call of DeleteObjective.
func (mr *MockOrgSvcServerMockRecorder) DeleteObjective(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjective", reflect.TypeOf((*MockOrgSvcServer)(nil).DeleteObjective), arg0, arg1)
}

// GetKeyResult mocks base method.
func (m *MockOrgSvcServer) GetKeyResult(arg0 context.Context, arg1 *pb.KeyResultRequest) (*pb.KeyResultReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyResult", arg0, arg1)
	ret0, _ := ret[0].(*pb.KeyResultReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResult indicates an expected call of GetKeyResult.
func (mr *MockOrgSvcServerMockRecorder) GetKeyResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResult", reflect.TypeOf((*MockOrgSvcServer)(nil).GetKeyResult), arg0, arg1)
}

// GetKeyResults mocks base method.
func (m *MockOrgSvcServer) GetKeyResults(arg0 context.Context, arg1 *pb.KeyResultRequest) (*pb.KeyResultsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyResults", arg0, arg1)
	ret0, _ := ret[0].(*pb.KeyResultsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyResults indicates an expected call of GetKeyResults.
func (mr *MockOrgSvcServerMockRecorder) GetKeyResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyResults", reflect.TypeOf((*MockOrgSvcServer)(nil).GetKeyResults), arg0, arg1)
}

// GetObjective mocks base method.
func (m *MockOrgSvcServer) GetObjective(arg0 context.Context, arg1 *pb.ObjectiveRequest) (*pb.ObjectiveReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjective", arg0, arg1)
	ret0, _ := ret[0].(*pb.ObjectiveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjective indicates an expected call of GetObjective.
func (mr *MockOrgSvcServerMockRecorder) GetObjective(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjective", reflect.TypeOf((*MockOrgSvcServer)(nil).GetObjective), arg0, arg1)
}

// GetObjectives mocks base method.
func (m *MockOrgSvcServer) GetObjectives(arg0 context.Context, arg1 *pb.ObjectiveRequest) (*pb.ObjectivesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectives", arg0, arg1)
	ret0, _ := ret[0].(*pb.ObjectivesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectives indicates an expected call of GetObjectives.
func (mr *MockOrgSvcServerMockRecorder) GetObjectives(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectives", reflect.TypeOf((*MockOrgSvcServer)(nil).GetObjectives), arg0, arg1)
}

// MockUnsafeOrgSvcServer is a mock of UnsafeOrgSvcServer interface.
type MockUnsafeOrgSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrgSvcServerMockRecorder
}

// MockUnsafeOrgSvcServerMockRecorder is the mock recorder for MockUnsafeOrgSvcServer.
type MockUnsafeOrgSvcServerMockRecorder struct {
	mock *MockUnsafeOrgSvcServer
}

// NewMockUnsafeOrgSvcServer creates a new mock instance.
func NewMockUnsafeOrgSvcServer(ctrl *gomock.Controller) *MockUnsafeOrgSvcServer {
	mock := &MockUnsafeOrgSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrgSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrgSvcServer) EXPECT() *MockUnsafeOrgSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrgSvcServer mocks base method.
func (m *MockUnsafeOrgSvcServer) mustEmbedUnimplementedOrgSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrgSvcServer")
}

// mustEmbedUnimplementedOrgSvcServer indicates an expected call of mustEmbedUnimplementedOrgSvcServer.
func (mr *MockUnsafeOrgSvcServerMockRecorder) mustEmbedUnimplementedOrgSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrgSvcServer", reflect.TypeOf((*MockUnsafeOrgSvcServer)(nil).mustEmbedUnimplementedOrgSvcServer))
}
