// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/message.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockMessageClient is a mock of MessageClient interface.
type MockMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageClientMockRecorder
}

// MockMessageClientMockRecorder is the mock recorder for MockMessageClient.
type MockMessageClientMockRecorder struct {
	mock *MockMessageClient
}

// NewMockMessageClient creates a new mock instance.
func NewMockMessageClient(ctrl *gomock.Controller) *MockMessageClient {
	mock := &MockMessageClient{ctrl: ctrl}
	mock.recorder = &MockMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageClient) EXPECT() *MockMessageClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageClient) Create(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.TextsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*pb.TextsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageClient)(nil).Create), varargs...)
}

// CreateActionMessage mocks base method.
func (m *MockMessageClient) CreateActionMessage(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateActionMessage", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionMessage indicates an expected call of CreateActionMessage.
func (mr *MockMessageClientMockRecorder) CreateActionMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionMessage", reflect.TypeOf((*MockMessageClient)(nil).CreateActionMessage), varargs...)
}

// Delete mocks base method.
func (m *MockMessageClient) Delete(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageClient)(nil).Delete), varargs...)
}

// DeleteWorkflowMessage mocks base method.
func (m *MockMessageClient) DeleteWorkflowMessage(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowMessage", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowMessage indicates an expected call of DeleteWorkflowMessage.
func (mr *MockMessageClientMockRecorder) DeleteWorkflowMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowMessage", reflect.TypeOf((*MockMessageClient)(nil).DeleteWorkflowMessage), varargs...)
}

// Get mocks base method.
func (m *MockMessageClient) Get(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.MessageReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*pb.MessageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageClient)(nil).Get), varargs...)
}

// GetActionMessages mocks base method.
func (m *MockMessageClient) GetActionMessages(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.ActionReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActionMessages", varargs...)
	ret0, _ := ret[0].(*pb.ActionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionMessages indicates an expected call of GetActionMessages.
func (mr *MockMessageClientMockRecorder) GetActionMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionMessages", reflect.TypeOf((*MockMessageClient)(nil).GetActionMessages), varargs...)
}

// List mocks base method.
func (m *MockMessageClient) List(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.MessageListReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*pb.MessageListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMessageClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMessageClient)(nil).List), varargs...)
}

// Run mocks base method.
func (m *MockMessageClient) Run(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockMessageClientMockRecorder) Run(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMessageClient)(nil).Run), varargs...)
}

// Send mocks base method.
func (m *MockMessageClient) Send(ctx context.Context, in *pb.MessageRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageClientMockRecorder) Send(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageClient)(nil).Send), varargs...)
}

// MockMessageServer is a mock of MessageServer interface.
type MockMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServerMockRecorder
}

// MockMessageServerMockRecorder is the mock recorder for MockMessageServer.
type MockMessageServerMockRecorder struct {
	mock *MockMessageServer
}

// NewMockMessageServer creates a new mock instance.
func NewMockMessageServer(ctrl *gomock.Controller) *MockMessageServer {
	mock := &MockMessageServer{ctrl: ctrl}
	mock.recorder = &MockMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServer) EXPECT() *MockMessageServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageServer) Create(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.TextsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageServer)(nil).Create), arg0, arg1)
}

// CreateActionMessage mocks base method.
func (m *MockMessageServer) CreateActionMessage(arg0 context.Context, arg1 *pb.TextRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionMessage indicates an expected call of CreateActionMessage.
func (mr *MockMessageServerMockRecorder) CreateActionMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionMessage", reflect.TypeOf((*MockMessageServer)(nil).CreateActionMessage), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMessageServer) Delete(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageServer)(nil).Delete), arg0, arg1)
}

// DeleteWorkflowMessage mocks base method.
func (m *MockMessageServer) DeleteWorkflowMessage(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowMessage indicates an expected call of DeleteWorkflowMessage.
func (mr *MockMessageServerMockRecorder) DeleteWorkflowMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowMessage", reflect.TypeOf((*MockMessageServer)(nil).DeleteWorkflowMessage), arg0, arg1)
}

// Get mocks base method.
func (m *MockMessageServer) Get(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.MessageReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*pb.MessageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageServer)(nil).Get), arg0, arg1)
}

// GetActionMessages mocks base method.
func (m *MockMessageServer) GetActionMessages(arg0 context.Context, arg1 *pb.TextRequest) (*pb.ActionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionMessages", arg0, arg1)
	ret0, _ := ret[0].(*pb.ActionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionMessages indicates an expected call of GetActionMessages.
func (mr *MockMessageServerMockRecorder) GetActionMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionMessages", reflect.TypeOf((*MockMessageServer)(nil).GetActionMessages), arg0, arg1)
}

// List mocks base method.
func (m *MockMessageServer) List(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.MessageListReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*pb.MessageListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMessageServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMessageServer)(nil).List), arg0, arg1)
}

// Run mocks base method.
func (m *MockMessageServer) Run(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockMessageServerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMessageServer)(nil).Run), arg0, arg1)
}

// Send mocks base method.
func (m *MockMessageServer) Send(arg0 context.Context, arg1 *pb.MessageRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageServerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageServer)(nil).Send), arg0, arg1)
}
