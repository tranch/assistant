// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/finance_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockFinanceSvcClient is a mock of FinanceSvcClient interface.
type MockFinanceSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockFinanceSvcClientMockRecorder
}

// MockFinanceSvcClientMockRecorder is the mock recorder for MockFinanceSvcClient.
type MockFinanceSvcClientMockRecorder struct {
	mock *MockFinanceSvcClient
}

// NewMockFinanceSvcClient creates a new mock instance.
func NewMockFinanceSvcClient(ctrl *gomock.Controller) *MockFinanceSvcClient {
	mock := &MockFinanceSvcClient{ctrl: ctrl}
	mock.recorder = &MockFinanceSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinanceSvcClient) EXPECT() *MockFinanceSvcClientMockRecorder {
	return m.recorder
}

// CreateBill mocks base method.
func (m *MockFinanceSvcClient) CreateBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBill", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockFinanceSvcClientMockRecorder) CreateBill(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockFinanceSvcClient)(nil).CreateBill), varargs...)
}

// DeleteBill mocks base method.
func (m *MockFinanceSvcClient) DeleteBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBill", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBill indicates an expected call of DeleteBill.
func (mr *MockFinanceSvcClientMockRecorder) DeleteBill(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBill", reflect.TypeOf((*MockFinanceSvcClient)(nil).DeleteBill), varargs...)
}

// GetBill mocks base method.
func (m *MockFinanceSvcClient) GetBill(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.BillReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBill", varargs...)
	ret0, _ := ret[0].(*pb.BillReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockFinanceSvcClientMockRecorder) GetBill(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockFinanceSvcClient)(nil).GetBill), varargs...)
}

// GetBills mocks base method.
func (m *MockFinanceSvcClient) GetBills(ctx context.Context, in *pb.BillRequest, opts ...grpc.CallOption) (*pb.BillsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBills", varargs...)
	ret0, _ := ret[0].(*pb.BillsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBills indicates an expected call of GetBills.
func (mr *MockFinanceSvcClientMockRecorder) GetBills(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBills", reflect.TypeOf((*MockFinanceSvcClient)(nil).GetBills), varargs...)
}

// GetFund mocks base method.
func (m *MockFinanceSvcClient) GetFund(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.FundReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFund", varargs...)
	ret0, _ := ret[0].(*pb.FundReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFund indicates an expected call of GetFund.
func (mr *MockFinanceSvcClientMockRecorder) GetFund(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFund", reflect.TypeOf((*MockFinanceSvcClient)(nil).GetFund), varargs...)
}

// GetStock mocks base method.
func (m *MockFinanceSvcClient) GetStock(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.StockReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStock", varargs...)
	ret0, _ := ret[0].(*pb.StockReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStock indicates an expected call of GetStock.
func (mr *MockFinanceSvcClientMockRecorder) GetStock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStock", reflect.TypeOf((*MockFinanceSvcClient)(nil).GetStock), varargs...)
}

// MockFinanceSvcServer is a mock of FinanceSvcServer interface.
type MockFinanceSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockFinanceSvcServerMockRecorder
}

// MockFinanceSvcServerMockRecorder is the mock recorder for MockFinanceSvcServer.
type MockFinanceSvcServerMockRecorder struct {
	mock *MockFinanceSvcServer
}

// NewMockFinanceSvcServer creates a new mock instance.
func NewMockFinanceSvcServer(ctrl *gomock.Controller) *MockFinanceSvcServer {
	mock := &MockFinanceSvcServer{ctrl: ctrl}
	mock.recorder = &MockFinanceSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinanceSvcServer) EXPECT() *MockFinanceSvcServerMockRecorder {
	return m.recorder
}

// CreateBill mocks base method.
func (m *MockFinanceSvcServer) CreateBill(arg0 context.Context, arg1 *pb.BillRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockFinanceSvcServerMockRecorder) CreateBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockFinanceSvcServer)(nil).CreateBill), arg0, arg1)
}

// DeleteBill mocks base method.
func (m *MockFinanceSvcServer) DeleteBill(arg0 context.Context, arg1 *pb.BillRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBill", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBill indicates an expected call of DeleteBill.
func (mr *MockFinanceSvcServerMockRecorder) DeleteBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBill", reflect.TypeOf((*MockFinanceSvcServer)(nil).DeleteBill), arg0, arg1)
}

// GetBill mocks base method.
func (m *MockFinanceSvcServer) GetBill(arg0 context.Context, arg1 *pb.BillRequest) (*pb.BillReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", arg0, arg1)
	ret0, _ := ret[0].(*pb.BillReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBill indicates an expected call of GetBill.
func (mr *MockFinanceSvcServerMockRecorder) GetBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockFinanceSvcServer)(nil).GetBill), arg0, arg1)
}

// GetBills mocks base method.
func (m *MockFinanceSvcServer) GetBills(arg0 context.Context, arg1 *pb.BillRequest) (*pb.BillsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBills", arg0, arg1)
	ret0, _ := ret[0].(*pb.BillsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBills indicates an expected call of GetBills.
func (mr *MockFinanceSvcServerMockRecorder) GetBills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBills", reflect.TypeOf((*MockFinanceSvcServer)(nil).GetBills), arg0, arg1)
}

// GetFund mocks base method.
func (m *MockFinanceSvcServer) GetFund(arg0 context.Context, arg1 *pb.TextRequest) (*pb.FundReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFund", arg0, arg1)
	ret0, _ := ret[0].(*pb.FundReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFund indicates an expected call of GetFund.
func (mr *MockFinanceSvcServerMockRecorder) GetFund(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFund", reflect.TypeOf((*MockFinanceSvcServer)(nil).GetFund), arg0, arg1)
}

// GetStock mocks base method.
func (m *MockFinanceSvcServer) GetStock(arg0 context.Context, arg1 *pb.TextRequest) (*pb.StockReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStock", arg0, arg1)
	ret0, _ := ret[0].(*pb.StockReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStock indicates an expected call of GetStock.
func (mr *MockFinanceSvcServerMockRecorder) GetStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStock", reflect.TypeOf((*MockFinanceSvcServer)(nil).GetStock), arg0, arg1)
}

// MockUnsafeFinanceSvcServer is a mock of UnsafeFinanceSvcServer interface.
type MockUnsafeFinanceSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFinanceSvcServerMockRecorder
}

// MockUnsafeFinanceSvcServerMockRecorder is the mock recorder for MockUnsafeFinanceSvcServer.
type MockUnsafeFinanceSvcServerMockRecorder struct {
	mock *MockUnsafeFinanceSvcServer
}

// NewMockUnsafeFinanceSvcServer creates a new mock instance.
func NewMockUnsafeFinanceSvcServer(ctrl *gomock.Controller) *MockUnsafeFinanceSvcServer {
	mock := &MockUnsafeFinanceSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFinanceSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFinanceSvcServer) EXPECT() *MockUnsafeFinanceSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFinanceSvcServer mocks base method.
func (m *MockUnsafeFinanceSvcServer) mustEmbedUnimplementedFinanceSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFinanceSvcServer")
}

// mustEmbedUnimplementedFinanceSvcServer indicates an expected call of mustEmbedUnimplementedFinanceSvcServer.
func (mr *MockUnsafeFinanceSvcServerMockRecorder) mustEmbedUnimplementedFinanceSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFinanceSvcServer", reflect.TypeOf((*MockUnsafeFinanceSvcServer)(nil).mustEmbedUnimplementedFinanceSvcServer))
}
