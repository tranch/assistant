// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/id.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockIdSvcClient is a mock of IdSvcClient interface.
type MockIdSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdSvcClientMockRecorder
}

// MockIdSvcClientMockRecorder is the mock recorder for MockIdSvcClient.
type MockIdSvcClientMockRecorder struct {
	mock *MockIdSvcClient
}

// NewMockIdSvcClient creates a new mock instance.
func NewMockIdSvcClient(ctrl *gomock.Controller) *MockIdSvcClient {
	mock := &MockIdSvcClient{ctrl: ctrl}
	mock.recorder = &MockIdSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdSvcClient) EXPECT() *MockIdSvcClientMockRecorder {
	return m.recorder
}

// GetGlobalId mocks base method.
func (m *MockIdSvcClient) GetGlobalId(ctx context.Context, in *pb.IdRequest, opts ...grpc.CallOption) (*pb.IdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalId", varargs...)
	ret0, _ := ret[0].(*pb.IdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalId indicates an expected call of GetGlobalId.
func (mr *MockIdSvcClientMockRecorder) GetGlobalId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalId", reflect.TypeOf((*MockIdSvcClient)(nil).GetGlobalId), varargs...)
}

// MockIdSvcServer is a mock of IdSvcServer interface.
type MockIdSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdSvcServerMockRecorder
}

// MockIdSvcServerMockRecorder is the mock recorder for MockIdSvcServer.
type MockIdSvcServerMockRecorder struct {
	mock *MockIdSvcServer
}

// NewMockIdSvcServer creates a new mock instance.
func NewMockIdSvcServer(ctrl *gomock.Controller) *MockIdSvcServer {
	mock := &MockIdSvcServer{ctrl: ctrl}
	mock.recorder = &MockIdSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdSvcServer) EXPECT() *MockIdSvcServerMockRecorder {
	return m.recorder
}

// GetGlobalId mocks base method.
func (m *MockIdSvcServer) GetGlobalId(arg0 context.Context, arg1 *pb.IdRequest) (*pb.IdReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalId", arg0, arg1)
	ret0, _ := ret[0].(*pb.IdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalId indicates an expected call of GetGlobalId.
func (mr *MockIdSvcServerMockRecorder) GetGlobalId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalId", reflect.TypeOf((*MockIdSvcServer)(nil).GetGlobalId), arg0, arg1)
}
