// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/chatbot/repository/chatbot.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockChatbotRepository is a mock of ChatbotRepository interface.
type MockChatbotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatbotRepositoryMockRecorder
}

// MockChatbotRepositoryMockRecorder is the mock recorder for MockChatbotRepository.
type MockChatbotRepositoryMockRecorder struct {
	mock *MockChatbotRepository
}

// NewMockChatbotRepository creates a new mock instance.
func NewMockChatbotRepository(ctrl *gomock.Controller) *MockChatbotRepository {
	mock := &MockChatbotRepository{ctrl: ctrl}
	mock.recorder = &MockChatbotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatbotRepository) EXPECT() *MockChatbotRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatbotRepository) Create(ctx context.Context, message *pb.Bot) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatbotRepositoryMockRecorder) Create(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatbotRepository)(nil).Create), ctx, message)
}

// Delete mocks base method.
func (m *MockChatbotRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChatbotRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatbotRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockChatbotRepository) GetByID(ctx context.Context, id int64) (*pb.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*pb.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockChatbotRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockChatbotRepository)(nil).GetByID), ctx, id)
}

// GetByUUID mocks base method.
func (m *MockChatbotRepository) GetByUUID(ctx context.Context, uuid string) (*pb.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(*pb.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockChatbotRepositoryMockRecorder) GetByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockChatbotRepository)(nil).GetByUUID), ctx, uuid)
}

// List mocks base method.
func (m *MockChatbotRepository) List(ctx context.Context) ([]*pb.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*pb.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockChatbotRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockChatbotRepository)(nil).List), ctx)
}
