// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/message/repository/message.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageRepository) Create(ctx context.Context, message *pb.Message) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageRepositoryMockRecorder) Create(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageRepository)(nil).Create), ctx, message)
}

// CreateInbox mocks base method.
func (m *MockMessageRepository) CreateInbox(ctx context.Context, inbox pb.Inbox) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInbox", ctx, inbox)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInbox indicates an expected call of CreateInbox.
func (mr *MockMessageRepositoryMockRecorder) CreateInbox(ctx, inbox interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInbox", reflect.TypeOf((*MockMessageRepository)(nil).CreateInbox), ctx, inbox)
}

// Delete mocks base method.
func (m *MockMessageRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockMessageRepository) GetByID(ctx context.Context, id int64) (pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMessageRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMessageRepository)(nil).GetByID), ctx, id)
}

// GetBySequence mocks base method.
func (m *MockMessageRepository) GetBySequence(ctx context.Context, userId, sequence int64) (pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySequence", ctx, userId, sequence)
	ret0, _ := ret[0].(pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySequence indicates an expected call of GetBySequence.
func (mr *MockMessageRepositoryMockRecorder) GetBySequence(ctx, userId, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySequence", reflect.TypeOf((*MockMessageRepository)(nil).GetBySequence), ctx, userId, sequence)
}

// GetInbox mocks base method.
func (m *MockMessageRepository) GetInbox(ctx context.Context, id int64) (pb.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInbox", ctx, id)
	ret0, _ := ret[0].(pb.Inbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInbox indicates an expected call of GetInbox.
func (mr *MockMessageRepositoryMockRecorder) GetInbox(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInbox", reflect.TypeOf((*MockMessageRepository)(nil).GetInbox), ctx, id)
}

// GetLastByGroup mocks base method.
func (m *MockMessageRepository) GetLastByGroup(ctx context.Context, groupId int64) (pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastByGroup", ctx, groupId)
	ret0, _ := ret[0].(pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastByGroup indicates an expected call of GetLastByGroup.
func (mr *MockMessageRepositoryMockRecorder) GetLastByGroup(ctx, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastByGroup", reflect.TypeOf((*MockMessageRepository)(nil).GetLastByGroup), ctx, groupId)
}

// LastInbox mocks base method.
func (m *MockMessageRepository) LastInbox(ctx context.Context, userId int64) (pb.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInbox", ctx, userId)
	ret0, _ := ret[0].(pb.Inbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInbox indicates an expected call of LastInbox.
func (mr *MockMessageRepositoryMockRecorder) LastInbox(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInbox", reflect.TypeOf((*MockMessageRepository)(nil).LastInbox), ctx, userId)
}

// List mocks base method.
func (m *MockMessageRepository) List(ctx context.Context) ([]*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMessageRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMessageRepository)(nil).List), ctx)
}

// ListByGroup mocks base method.
func (m *MockMessageRepository) ListByGroup(ctx context.Context, groupId int64, page, limit int) (int64, []*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGroup", ctx, groupId, page, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*pb.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByGroup indicates an expected call of ListByGroup.
func (mr *MockMessageRepositoryMockRecorder) ListByGroup(ctx, groupId, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGroup", reflect.TypeOf((*MockMessageRepository)(nil).ListByGroup), ctx, groupId, page, limit)
}

// ListByIds mocks base method.
func (m *MockMessageRepository) ListByIds(ctx context.Context, messageId []int64) ([]*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIds", ctx, messageId)
	ret0, _ := ret[0].([]*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIds indicates an expected call of ListByIds.
func (mr *MockMessageRepositoryMockRecorder) ListByIds(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIds", reflect.TypeOf((*MockMessageRepository)(nil).ListByIds), ctx, messageId)
}

// ListByType mocks base method.
func (m *MockMessageRepository) ListByType(ctx context.Context, t string) ([]*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByType", ctx, t)
	ret0, _ := ret[0].([]*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByType indicates an expected call of ListByType.
func (mr *MockMessageRepositoryMockRecorder) ListByType(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByType", reflect.TypeOf((*MockMessageRepository)(nil).ListByType), ctx, t)
}

// ListInbox mocks base method.
func (m *MockMessageRepository) ListInbox(ctx context.Context, userId int64, page, limit int) (int64, []*pb.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInbox", ctx, userId, page, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*pb.Inbox)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInbox indicates an expected call of ListInbox.
func (mr *MockMessageRepositoryMockRecorder) ListInbox(ctx, userId, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInbox", reflect.TypeOf((*MockMessageRepository)(nil).ListInbox), ctx, userId, page, limit)
}

// Save mocks base method.
func (m *MockMessageRepository) Save(ctx context.Context, message *pb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMessageRepositoryMockRecorder) Save(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMessageRepository)(nil).Save), ctx, message)
}

// SavePayload mocks base method.
func (m *MockMessageRepository) SavePayload(ctx context.Context, id int64, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePayload", ctx, id, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePayload indicates an expected call of SavePayload.
func (mr *MockMessageRepositoryMockRecorder) SavePayload(ctx, id, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePayload", reflect.TypeOf((*MockMessageRepository)(nil).SavePayload), ctx, id, payload)
}

// UpdateInboxStatus mocks base method.
func (m *MockMessageRepository) UpdateInboxStatus(ctx context.Context, id int64, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInboxStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInboxStatus indicates an expected call of UpdateInboxStatus.
func (mr *MockMessageRepositoryMockRecorder) UpdateInboxStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInboxStatus", reflect.TypeOf((*MockMessageRepository)(nil).UpdateInboxStatus), ctx, id, status)
}
