// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/storage_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockStorageSvcClient is a mock of StorageSvcClient interface.
type MockStorageSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSvcClientMockRecorder
}

// MockStorageSvcClientMockRecorder is the mock recorder for MockStorageSvcClient.
type MockStorageSvcClientMockRecorder struct {
	mock *MockStorageSvcClient
}

// NewMockStorageSvcClient creates a new mock instance.
func NewMockStorageSvcClient(ctrl *gomock.Controller) *MockStorageSvcClient {
	mock := &MockStorageSvcClient{ctrl: ctrl}
	mock.recorder = &MockStorageSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSvcClient) EXPECT() *MockStorageSvcClientMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockStorageSvcClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (pb.StorageSvc_UploadFileClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(pb.StorageSvc_UploadFileClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockStorageSvcClientMockRecorder) UploadFile(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorageSvcClient)(nil).UploadFile), varargs...)
}

// MockStorageSvc_UploadFileClient is a mock of StorageSvc_UploadFileClient interface.
type MockStorageSvc_UploadFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSvc_UploadFileClientMockRecorder
}

// MockStorageSvc_UploadFileClientMockRecorder is the mock recorder for MockStorageSvc_UploadFileClient.
type MockStorageSvc_UploadFileClientMockRecorder struct {
	mock *MockStorageSvc_UploadFileClient
}

// NewMockStorageSvc_UploadFileClient creates a new mock instance.
func NewMockStorageSvc_UploadFileClient(ctrl *gomock.Controller) *MockStorageSvc_UploadFileClient {
	mock := &MockStorageSvc_UploadFileClient{ctrl: ctrl}
	mock.recorder = &MockStorageSvc_UploadFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSvc_UploadFileClient) EXPECT() *MockStorageSvc_UploadFileClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockStorageSvc_UploadFileClient) CloseAndRecv() (*pb.FileReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*pb.FileReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockStorageSvc_UploadFileClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStorageSvc_UploadFileClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStorageSvc_UploadFileClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockStorageSvc_UploadFileClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStorageSvc_UploadFileClient) Send(arg0 *pb.FileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStorageSvc_UploadFileClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStorageSvc_UploadFileClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStorageSvc_UploadFileClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStorageSvc_UploadFileClient)(nil).Trailer))
}

// MockStorageSvcServer is a mock of StorageSvcServer interface.
type MockStorageSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSvcServerMockRecorder
}

// MockStorageSvcServerMockRecorder is the mock recorder for MockStorageSvcServer.
type MockStorageSvcServerMockRecorder struct {
	mock *MockStorageSvcServer
}

// NewMockStorageSvcServer creates a new mock instance.
func NewMockStorageSvcServer(ctrl *gomock.Controller) *MockStorageSvcServer {
	mock := &MockStorageSvcServer{ctrl: ctrl}
	mock.recorder = &MockStorageSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSvcServer) EXPECT() *MockStorageSvcServerMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockStorageSvcServer) UploadFile(arg0 pb.StorageSvc_UploadFileServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockStorageSvcServerMockRecorder) UploadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockStorageSvcServer)(nil).UploadFile), arg0)
}

// MockUnsafeStorageSvcServer is a mock of UnsafeStorageSvcServer interface.
type MockUnsafeStorageSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStorageSvcServerMockRecorder
}

// MockUnsafeStorageSvcServerMockRecorder is the mock recorder for MockUnsafeStorageSvcServer.
type MockUnsafeStorageSvcServerMockRecorder struct {
	mock *MockUnsafeStorageSvcServer
}

// NewMockUnsafeStorageSvcServer creates a new mock instance.
func NewMockUnsafeStorageSvcServer(ctrl *gomock.Controller) *MockUnsafeStorageSvcServer {
	mock := &MockUnsafeStorageSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStorageSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStorageSvcServer) EXPECT() *MockUnsafeStorageSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStorageSvcServer mocks base method.
func (m *MockUnsafeStorageSvcServer) mustEmbedUnimplementedStorageSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageSvcServer")
}

// mustEmbedUnimplementedStorageSvcServer indicates an expected call of mustEmbedUnimplementedStorageSvcServer.
func (mr *MockUnsafeStorageSvcServerMockRecorder) mustEmbedUnimplementedStorageSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageSvcServer", reflect.TypeOf((*MockUnsafeStorageSvcServer)(nil).mustEmbedUnimplementedStorageSvcServer))
}

// MockStorageSvc_UploadFileServer is a mock of StorageSvc_UploadFileServer interface.
type MockStorageSvc_UploadFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSvc_UploadFileServerMockRecorder
}

// MockStorageSvc_UploadFileServerMockRecorder is the mock recorder for MockStorageSvc_UploadFileServer.
type MockStorageSvc_UploadFileServerMockRecorder struct {
	mock *MockStorageSvc_UploadFileServer
}

// NewMockStorageSvc_UploadFileServer creates a new mock instance.
func NewMockStorageSvc_UploadFileServer(ctrl *gomock.Controller) *MockStorageSvc_UploadFileServer {
	mock := &MockStorageSvc_UploadFileServer{ctrl: ctrl}
	mock.recorder = &MockStorageSvc_UploadFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSvc_UploadFileServer) EXPECT() *MockStorageSvc_UploadFileServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStorageSvc_UploadFileServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStorageSvc_UploadFileServer) Recv() (*pb.FileRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.FileRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStorageSvc_UploadFileServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockStorageSvc_UploadFileServer) SendAndClose(arg0 *pb.FileReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockStorageSvc_UploadFileServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStorageSvc_UploadFileServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStorageSvc_UploadFileServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStorageSvc_UploadFileServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStorageSvc_UploadFileServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStorageSvc_UploadFileServer)(nil).SetTrailer), arg0)
}
