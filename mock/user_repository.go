// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/user/repository/user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ChangeRoleAttr mocks base method.
func (m *MockUserRepository) ChangeRoleAttr(ctx context.Context, userID int64, attr string, val int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRoleAttr", ctx, userID, attr, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeRoleAttr indicates an expected call of ChangeRoleAttr.
func (mr *MockUserRepositoryMockRecorder) ChangeRoleAttr(ctx, userID, attr, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRoleAttr", reflect.TypeOf((*MockUserRepository)(nil).ChangeRoleAttr), ctx, userID, attr, val)
}

// ChangeRoleExp mocks base method.
func (m *MockUserRepository) ChangeRoleExp(ctx context.Context, userID, exp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRoleExp", ctx, userID, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeRoleExp indicates an expected call of ChangeRoleExp.
func (mr *MockUserRepositoryMockRecorder) ChangeRoleExp(ctx, userID, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRoleExp", reflect.TypeOf((*MockUserRepository)(nil).ChangeRoleExp), ctx, userID, exp)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *pb.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// CreateDevice mocks base method.
func (m *MockUserRepository) CreateDevice(ctx context.Context, device *pb.Device) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockUserRepositoryMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockUserRepository)(nil).CreateDevice), ctx, device)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, id int64) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockUserRepository) GetByName(ctx context.Context, username string) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, username)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockUserRepositoryMockRecorder) GetByName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUserRepository)(nil).GetByName), ctx, username)
}

// GetDevice mocks base method.
func (m *MockUserRepository) GetDevice(ctx context.Context, id int64) (*pb.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, id)
	ret0, _ := ret[0].(*pb.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockUserRepositoryMockRecorder) GetDevice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockUserRepository)(nil).GetDevice), ctx, id)
}

// GetRole mocks base method.
func (m *MockUserRepository) GetRole(ctx context.Context, userID int) (*pb.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, userID)
	ret0, _ := ret[0].(*pb.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserRepositoryMockRecorder) GetRole(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserRepository)(nil).GetRole), ctx, userID)
}

// List mocks base method.
func (m *MockUserRepository) List(ctx context.Context) ([]*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepository)(nil).List), ctx)
}

// ListDevice mocks base method.
func (m *MockUserRepository) ListDevice(ctx context.Context, userID int64) ([]*pb.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevice", ctx, userID)
	ret0, _ := ret[0].([]*pb.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevice indicates an expected call of ListDevice.
func (mr *MockUserRepositoryMockRecorder) ListDevice(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevice", reflect.TypeOf((*MockUserRepository)(nil).ListDevice), ctx, userID)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}
