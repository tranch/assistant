// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/middle.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockMiddleSvcClient is a mock of MiddleSvcClient interface.
type MockMiddleSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockMiddleSvcClientMockRecorder
}

// MockMiddleSvcClientMockRecorder is the mock recorder for MockMiddleSvcClient.
type MockMiddleSvcClientMockRecorder struct {
	mock *MockMiddleSvcClient
}

// NewMockMiddleSvcClient creates a new mock instance.
func NewMockMiddleSvcClient(ctrl *gomock.Controller) *MockMiddleSvcClient {
	mock := &MockMiddleSvcClient{ctrl: ctrl}
	mock.recorder = &MockMiddleSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleSvcClient) EXPECT() *MockMiddleSvcClientMockRecorder {
	return m.recorder
}

// CloseSubscribe mocks base method.
func (m *MockMiddleSvcClient) CloseSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSubscribe indicates an expected call of CloseSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) CloseSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).CloseSubscribe), varargs...)
}

// CreateCredential mocks base method.
func (m *MockMiddleSvcClient) CreateCredential(ctx context.Context, in *pb.KVsRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCredential", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockMiddleSvcClientMockRecorder) CreateCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreateCredential), varargs...)
}

// CreatePage mocks base method.
func (m *MockMiddleSvcClient) CreatePage(ctx context.Context, in *pb.PageRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePage", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockMiddleSvcClientMockRecorder) CreatePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreatePage), varargs...)
}

// CreateSetting mocks base method.
func (m *MockMiddleSvcClient) CreateSetting(ctx context.Context, in *pb.KVRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSetting", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSetting indicates an expected call of CreateSetting.
func (mr *MockMiddleSvcClientMockRecorder) CreateSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetting", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreateSetting), varargs...)
}

// GetApps mocks base method.
func (m *MockMiddleSvcClient) GetApps(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.AppsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApps", varargs...)
	ret0, _ := ret[0].(*pb.AppsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockMiddleSvcClientMockRecorder) GetApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetApps), varargs...)
}

// GetAvailableApp mocks base method.
func (m *MockMiddleSvcClient) GetAvailableApp(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.AppReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableApp", varargs...)
	ret0, _ := ret[0].(*pb.AppReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableApp indicates an expected call of GetAvailableApp.
func (mr *MockMiddleSvcClientMockRecorder) GetAvailableApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableApp", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetAvailableApp), varargs...)
}

// GetCredential mocks base method.
func (m *MockMiddleSvcClient) GetCredential(ctx context.Context, in *pb.CredentialRequest, opts ...grpc.CallOption) (*pb.CredentialReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredential", varargs...)
	ret0, _ := ret[0].(*pb.CredentialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockMiddleSvcClientMockRecorder) GetCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetCredential), varargs...)
}

// GetCredentials mocks base method.
func (m *MockMiddleSvcClient) GetCredentials(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.CredentialsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentials", varargs...)
	ret0, _ := ret[0].(*pb.CredentialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockMiddleSvcClientMockRecorder) GetCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetCredentials), varargs...)
}

// GetMaskingCredentials mocks base method.
func (m *MockMiddleSvcClient) GetMaskingCredentials(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.MaskingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaskingCredentials", varargs...)
	ret0, _ := ret[0].(*pb.MaskingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingCredentials indicates an expected call of GetMaskingCredentials.
func (mr *MockMiddleSvcClientMockRecorder) GetMaskingCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingCredentials", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetMaskingCredentials), varargs...)
}

// GetMenu mocks base method.
func (m *MockMiddleSvcClient) GetMenu(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMenu", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockMiddleSvcClientMockRecorder) GetMenu(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetMenu), varargs...)
}

// GetPage mocks base method.
func (m *MockMiddleSvcClient) GetPage(ctx context.Context, in *pb.PageRequest, opts ...grpc.CallOption) (*pb.PageReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*pb.PageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockMiddleSvcClientMockRecorder) GetPage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetPage), varargs...)
}

// GetQrUrl mocks base method.
func (m *MockMiddleSvcClient) GetQrUrl(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQrUrl", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQrUrl indicates an expected call of GetQrUrl.
func (mr *MockMiddleSvcClientMockRecorder) GetQrUrl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrUrl", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetQrUrl), varargs...)
}

// GetRoleImageUrl mocks base method.
func (m *MockMiddleSvcClient) GetRoleImageUrl(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleImageUrl", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleImageUrl indicates an expected call of GetRoleImageUrl.
func (mr *MockMiddleSvcClientMockRecorder) GetRoleImageUrl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleImageUrl", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetRoleImageUrl), varargs...)
}

// GetSetting mocks base method.
func (m *MockMiddleSvcClient) GetSetting(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.SettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSetting", varargs...)
	ret0, _ := ret[0].(*pb.SettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockMiddleSvcClientMockRecorder) GetSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSetting), varargs...)
}

// GetSettings mocks base method.
func (m *MockMiddleSvcClient) GetSettings(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.SettingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*pb.SettingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockMiddleSvcClientMockRecorder) GetSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSettings), varargs...)
}

// GetStats mocks base method.
func (m *MockMiddleSvcClient) GetStats(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStats", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockMiddleSvcClientMockRecorder) GetStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetStats), varargs...)
}

// GetSubscribeStatus mocks base method.
func (m *MockMiddleSvcClient) GetSubscribeStatus(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscribeStatus", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribeStatus indicates an expected call of GetSubscribeStatus.
func (mr *MockMiddleSvcClientMockRecorder) GetSubscribeStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribeStatus", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSubscribeStatus), varargs...)
}

// ListSubscribe mocks base method.
func (m *MockMiddleSvcClient) ListSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.SubscribeReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.SubscribeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribe indicates an expected call of ListSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) ListSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).ListSubscribe), varargs...)
}

// OpenSubscribe mocks base method.
func (m *MockMiddleSvcClient) OpenSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSubscribe indicates an expected call of OpenSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) OpenSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).OpenSubscribe), varargs...)
}

// RegisterSubscribe mocks base method.
func (m *MockMiddleSvcClient) RegisterSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscribe indicates an expected call of RegisterSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) RegisterSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).RegisterSubscribe), varargs...)
}

// StoreAppOAuth mocks base method.
func (m *MockMiddleSvcClient) StoreAppOAuth(ctx context.Context, in *pb.AppRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreAppOAuth", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAppOAuth indicates an expected call of StoreAppOAuth.
func (mr *MockMiddleSvcClientMockRecorder) StoreAppOAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAppOAuth", reflect.TypeOf((*MockMiddleSvcClient)(nil).StoreAppOAuth), varargs...)
}

// MockMiddleSvcServer is a mock of MiddleSvcServer interface.
type MockMiddleSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockMiddleSvcServerMockRecorder
}

// MockMiddleSvcServerMockRecorder is the mock recorder for MockMiddleSvcServer.
type MockMiddleSvcServerMockRecorder struct {
	mock *MockMiddleSvcServer
}

// NewMockMiddleSvcServer creates a new mock instance.
func NewMockMiddleSvcServer(ctrl *gomock.Controller) *MockMiddleSvcServer {
	mock := &MockMiddleSvcServer{ctrl: ctrl}
	mock.recorder = &MockMiddleSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleSvcServer) EXPECT() *MockMiddleSvcServerMockRecorder {
	return m.recorder
}

// CloseSubscribe mocks base method.
func (m *MockMiddleSvcServer) CloseSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSubscribe indicates an expected call of CloseSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) CloseSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).CloseSubscribe), arg0, arg1)
}

// CreateCredential mocks base method.
func (m *MockMiddleSvcServer) CreateCredential(arg0 context.Context, arg1 *pb.KVsRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockMiddleSvcServerMockRecorder) CreateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreateCredential), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockMiddleSvcServer) CreatePage(arg0 context.Context, arg1 *pb.PageRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockMiddleSvcServerMockRecorder) CreatePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreatePage), arg0, arg1)
}

// CreateSetting mocks base method.
func (m *MockMiddleSvcServer) CreateSetting(arg0 context.Context, arg1 *pb.KVRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSetting indicates an expected call of CreateSetting.
func (mr *MockMiddleSvcServerMockRecorder) CreateSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetting", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreateSetting), arg0, arg1)
}

// GetApps mocks base method.
func (m *MockMiddleSvcServer) GetApps(arg0 context.Context, arg1 *pb.TextRequest) (*pb.AppsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", arg0, arg1)
	ret0, _ := ret[0].(*pb.AppsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockMiddleSvcServerMockRecorder) GetApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetApps), arg0, arg1)
}

// GetAvailableApp mocks base method.
func (m *MockMiddleSvcServer) GetAvailableApp(arg0 context.Context, arg1 *pb.TextRequest) (*pb.AppReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableApp", arg0, arg1)
	ret0, _ := ret[0].(*pb.AppReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableApp indicates an expected call of GetAvailableApp.
func (mr *MockMiddleSvcServerMockRecorder) GetAvailableApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableApp", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetAvailableApp), arg0, arg1)
}

// GetCredential mocks base method.
func (m *MockMiddleSvcServer) GetCredential(arg0 context.Context, arg1 *pb.CredentialRequest) (*pb.CredentialReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", arg0, arg1)
	ret0, _ := ret[0].(*pb.CredentialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockMiddleSvcServerMockRecorder) GetCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetCredential), arg0, arg1)
}

// GetCredentials mocks base method.
func (m *MockMiddleSvcServer) GetCredentials(arg0 context.Context, arg1 *pb.TextRequest) (*pb.CredentialsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*pb.CredentialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockMiddleSvcServerMockRecorder) GetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetCredentials), arg0, arg1)
}

// GetMaskingCredentials mocks base method.
func (m *MockMiddleSvcServer) GetMaskingCredentials(arg0 context.Context, arg1 *pb.TextRequest) (*pb.MaskingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskingCredentials", arg0, arg1)
	ret0, _ := ret[0].(*pb.MaskingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingCredentials indicates an expected call of GetMaskingCredentials.
func (mr *MockMiddleSvcServerMockRecorder) GetMaskingCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingCredentials", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetMaskingCredentials), arg0, arg1)
}

// GetMenu mocks base method.
func (m *MockMiddleSvcServer) GetMenu(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockMiddleSvcServerMockRecorder) GetMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetMenu), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockMiddleSvcServer) GetPage(arg0 context.Context, arg1 *pb.PageRequest) (*pb.PageReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*pb.PageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockMiddleSvcServerMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetPage), arg0, arg1)
}

// GetQrUrl mocks base method.
func (m *MockMiddleSvcServer) GetQrUrl(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQrUrl", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQrUrl indicates an expected call of GetQrUrl.
func (mr *MockMiddleSvcServerMockRecorder) GetQrUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrUrl", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetQrUrl), arg0, arg1)
}

// GetRoleImageUrl mocks base method.
func (m *MockMiddleSvcServer) GetRoleImageUrl(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleImageUrl", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleImageUrl indicates an expected call of GetRoleImageUrl.
func (mr *MockMiddleSvcServerMockRecorder) GetRoleImageUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleImageUrl", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetRoleImageUrl), arg0, arg1)
}

// GetSetting mocks base method.
func (m *MockMiddleSvcServer) GetSetting(arg0 context.Context, arg1 *pb.TextRequest) (*pb.SettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.SettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockMiddleSvcServerMockRecorder) GetSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSetting), arg0, arg1)
}

// GetSettings mocks base method.
func (m *MockMiddleSvcServer) GetSettings(arg0 context.Context, arg1 *pb.TextRequest) (*pb.SettingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0, arg1)
	ret0, _ := ret[0].(*pb.SettingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockMiddleSvcServerMockRecorder) GetSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSettings), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockMiddleSvcServer) GetStats(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockMiddleSvcServerMockRecorder) GetStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetStats), arg0, arg1)
}

// GetSubscribeStatus mocks base method.
func (m *MockMiddleSvcServer) GetSubscribeStatus(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribeStatus", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribeStatus indicates an expected call of GetSubscribeStatus.
func (mr *MockMiddleSvcServerMockRecorder) GetSubscribeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribeStatus", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSubscribeStatus), arg0, arg1)
}

// ListSubscribe mocks base method.
func (m *MockMiddleSvcServer) ListSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.SubscribeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.SubscribeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribe indicates an expected call of ListSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) ListSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).ListSubscribe), arg0, arg1)
}

// OpenSubscribe mocks base method.
func (m *MockMiddleSvcServer) OpenSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSubscribe indicates an expected call of OpenSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) OpenSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).OpenSubscribe), arg0, arg1)
}

// RegisterSubscribe mocks base method.
func (m *MockMiddleSvcServer) RegisterSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscribe indicates an expected call of RegisterSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) RegisterSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).RegisterSubscribe), arg0, arg1)
}

// StoreAppOAuth mocks base method.
func (m *MockMiddleSvcServer) StoreAppOAuth(arg0 context.Context, arg1 *pb.AppRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAppOAuth", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAppOAuth indicates an expected call of StoreAppOAuth.
func (mr *MockMiddleSvcServerMockRecorder) StoreAppOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAppOAuth", reflect.TypeOf((*MockMiddleSvcServer)(nil).StoreAppOAuth), arg0, arg1)
}
