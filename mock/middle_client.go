// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/pb/middle_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/tsundata/assistant/api/pb"
	grpc "google.golang.org/grpc"
)

// MockMiddleSvcClient is a mock of MiddleSvcClient interface.
type MockMiddleSvcClient struct {
	ctrl     *gomock.Controller
	recorder *MockMiddleSvcClientMockRecorder
}

// MockMiddleSvcClientMockRecorder is the mock recorder for MockMiddleSvcClient.
type MockMiddleSvcClientMockRecorder struct {
	mock *MockMiddleSvcClient
}

// NewMockMiddleSvcClient creates a new mock instance.
func NewMockMiddleSvcClient(ctrl *gomock.Controller) *MockMiddleSvcClient {
	mock := &MockMiddleSvcClient{ctrl: ctrl}
	mock.recorder = &MockMiddleSvcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleSvcClient) EXPECT() *MockMiddleSvcClientMockRecorder {
	return m.recorder
}

// CloseSubscribe mocks base method.
func (m *MockMiddleSvcClient) CloseSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSubscribe indicates an expected call of CloseSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) CloseSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).CloseSubscribe), varargs...)
}

// CreateCredential mocks base method.
func (m *MockMiddleSvcClient) CreateCredential(ctx context.Context, in *pb.KVsRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCredential", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockMiddleSvcClientMockRecorder) CreateCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreateCredential), varargs...)
}

// CreatePage mocks base method.
func (m *MockMiddleSvcClient) CreatePage(ctx context.Context, in *pb.PageRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePage", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockMiddleSvcClientMockRecorder) CreatePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreatePage), varargs...)
}

// CreateSetting mocks base method.
func (m *MockMiddleSvcClient) CreateSetting(ctx context.Context, in *pb.KVRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSetting", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSetting indicates an expected call of CreateSetting.
func (mr *MockMiddleSvcClientMockRecorder) CreateSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetting", reflect.TypeOf((*MockMiddleSvcClient)(nil).CreateSetting), varargs...)
}

// GetApps mocks base method.
func (m *MockMiddleSvcClient) GetApps(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.AppsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApps", varargs...)
	ret0, _ := ret[0].(*pb.AppsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockMiddleSvcClientMockRecorder) GetApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetApps), varargs...)
}

// GetAvailableApp mocks base method.
func (m *MockMiddleSvcClient) GetAvailableApp(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.AppReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableApp", varargs...)
	ret0, _ := ret[0].(*pb.AppReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableApp indicates an expected call of GetAvailableApp.
func (mr *MockMiddleSvcClientMockRecorder) GetAvailableApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableApp", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetAvailableApp), varargs...)
}

// GetChartData mocks base method.
func (m *MockMiddleSvcClient) GetChartData(ctx context.Context, in *pb.ChartDataRequest, opts ...grpc.CallOption) (*pb.ChartDataReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChartData", varargs...)
	ret0, _ := ret[0].(*pb.ChartDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartData indicates an expected call of GetChartData.
func (mr *MockMiddleSvcClientMockRecorder) GetChartData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartData", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetChartData), varargs...)
}

// GetChartUrl mocks base method.
func (m *MockMiddleSvcClient) GetChartUrl(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChartUrl", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartUrl indicates an expected call of GetChartUrl.
func (mr *MockMiddleSvcClientMockRecorder) GetChartUrl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartUrl", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetChartUrl), varargs...)
}

// GetCredential mocks base method.
func (m *MockMiddleSvcClient) GetCredential(ctx context.Context, in *pb.CredentialRequest, opts ...grpc.CallOption) (*pb.CredentialReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredential", varargs...)
	ret0, _ := ret[0].(*pb.CredentialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockMiddleSvcClientMockRecorder) GetCredential(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetCredential), varargs...)
}

// GetCredentials mocks base method.
func (m *MockMiddleSvcClient) GetCredentials(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.CredentialsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentials", varargs...)
	ret0, _ := ret[0].(*pb.CredentialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockMiddleSvcClientMockRecorder) GetCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetCredentials), varargs...)
}

// GetCronStatus mocks base method.
func (m *MockMiddleSvcClient) GetCronStatus(ctx context.Context, in *pb.CronRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCronStatus", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCronStatus indicates an expected call of GetCronStatus.
func (mr *MockMiddleSvcClientMockRecorder) GetCronStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCronStatus", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetCronStatus), varargs...)
}

// GetMaskingCredentials mocks base method.
func (m *MockMiddleSvcClient) GetMaskingCredentials(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.MaskingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaskingCredentials", varargs...)
	ret0, _ := ret[0].(*pb.MaskingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingCredentials indicates an expected call of GetMaskingCredentials.
func (mr *MockMiddleSvcClientMockRecorder) GetMaskingCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingCredentials", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetMaskingCredentials), varargs...)
}

// GetOrCreateTag mocks base method.
func (m *MockMiddleSvcClient) GetOrCreateTag(ctx context.Context, in *pb.TagRequest, opts ...grpc.CallOption) (*pb.TagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrCreateTag", varargs...)
	ret0, _ := ret[0].(*pb.TagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTag indicates an expected call of GetOrCreateTag.
func (mr *MockMiddleSvcClientMockRecorder) GetOrCreateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTag", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetOrCreateTag), varargs...)
}

// GetPage mocks base method.
func (m *MockMiddleSvcClient) GetPage(ctx context.Context, in *pb.PageRequest, opts ...grpc.CallOption) (*pb.PageReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*pb.PageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockMiddleSvcClientMockRecorder) GetPage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetPage), varargs...)
}

// GetQrUrl mocks base method.
func (m *MockMiddleSvcClient) GetQrUrl(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQrUrl", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQrUrl indicates an expected call of GetQrUrl.
func (mr *MockMiddleSvcClientMockRecorder) GetQrUrl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrUrl", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetQrUrl), varargs...)
}

// GetSetting mocks base method.
func (m *MockMiddleSvcClient) GetSetting(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.SettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSetting", varargs...)
	ret0, _ := ret[0].(*pb.SettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockMiddleSvcClientMockRecorder) GetSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSetting), varargs...)
}

// GetSettings mocks base method.
func (m *MockMiddleSvcClient) GetSettings(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.SettingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*pb.SettingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockMiddleSvcClientMockRecorder) GetSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSettings), varargs...)
}

// GetStats mocks base method.
func (m *MockMiddleSvcClient) GetStats(ctx context.Context, in *pb.TextRequest, opts ...grpc.CallOption) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStats", varargs...)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockMiddleSvcClientMockRecorder) GetStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetStats), varargs...)
}

// GetSubscribeStatus mocks base method.
func (m *MockMiddleSvcClient) GetSubscribeStatus(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscribeStatus", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribeStatus indicates an expected call of GetSubscribeStatus.
func (mr *MockMiddleSvcClientMockRecorder) GetSubscribeStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribeStatus", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetSubscribeStatus), varargs...)
}

// GetTags mocks base method.
func (m *MockMiddleSvcClient) GetTags(ctx context.Context, in *pb.TagRequest, opts ...grpc.CallOption) (*pb.TagsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*pb.TagsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockMiddleSvcClientMockRecorder) GetTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockMiddleSvcClient)(nil).GetTags), varargs...)
}

// ListCron mocks base method.
func (m *MockMiddleSvcClient) ListCron(ctx context.Context, in *pb.CronRequest, opts ...grpc.CallOption) (*pb.CronReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCron", varargs...)
	ret0, _ := ret[0].(*pb.CronReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCron indicates an expected call of ListCron.
func (mr *MockMiddleSvcClientMockRecorder) ListCron(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCron", reflect.TypeOf((*MockMiddleSvcClient)(nil).ListCron), varargs...)
}

// ListSubscribe mocks base method.
func (m *MockMiddleSvcClient) ListSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.SubscribeReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.SubscribeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribe indicates an expected call of ListSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) ListSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).ListSubscribe), varargs...)
}

// OpenSubscribe mocks base method.
func (m *MockMiddleSvcClient) OpenSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSubscribe indicates an expected call of OpenSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) OpenSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).OpenSubscribe), varargs...)
}

// RegisterCron mocks base method.
func (m *MockMiddleSvcClient) RegisterCron(ctx context.Context, in *pb.CronRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCron", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCron indicates an expected call of RegisterCron.
func (mr *MockMiddleSvcClientMockRecorder) RegisterCron(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCron", reflect.TypeOf((*MockMiddleSvcClient)(nil).RegisterCron), varargs...)
}

// RegisterSubscribe mocks base method.
func (m *MockMiddleSvcClient) RegisterSubscribe(ctx context.Context, in *pb.SubscribeRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSubscribe", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscribe indicates an expected call of RegisterSubscribe.
func (mr *MockMiddleSvcClientMockRecorder) RegisterSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscribe", reflect.TypeOf((*MockMiddleSvcClient)(nil).RegisterSubscribe), varargs...)
}

// SaveModelTag mocks base method.
func (m *MockMiddleSvcClient) SaveModelTag(ctx context.Context, in *pb.ModelTagRequest, opts ...grpc.CallOption) (*pb.ModelTagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveModelTag", varargs...)
	ret0, _ := ret[0].(*pb.ModelTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveModelTag indicates an expected call of SaveModelTag.
func (mr *MockMiddleSvcClientMockRecorder) SaveModelTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveModelTag", reflect.TypeOf((*MockMiddleSvcClient)(nil).SaveModelTag), varargs...)
}

// SetChartData mocks base method.
func (m *MockMiddleSvcClient) SetChartData(ctx context.Context, in *pb.ChartDataRequest, opts ...grpc.CallOption) (*pb.ChartDataReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetChartData", varargs...)
	ret0, _ := ret[0].(*pb.ChartDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChartData indicates an expected call of SetChartData.
func (mr *MockMiddleSvcClientMockRecorder) SetChartData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChartData", reflect.TypeOf((*MockMiddleSvcClient)(nil).SetChartData), varargs...)
}

// StartCron mocks base method.
func (m *MockMiddleSvcClient) StartCron(ctx context.Context, in *pb.CronRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCron", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCron indicates an expected call of StartCron.
func (mr *MockMiddleSvcClientMockRecorder) StartCron(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCron", reflect.TypeOf((*MockMiddleSvcClient)(nil).StartCron), varargs...)
}

// StopCron mocks base method.
func (m *MockMiddleSvcClient) StopCron(ctx context.Context, in *pb.CronRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCron", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCron indicates an expected call of StopCron.
func (mr *MockMiddleSvcClientMockRecorder) StopCron(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCron", reflect.TypeOf((*MockMiddleSvcClient)(nil).StopCron), varargs...)
}

// StoreAppOAuth mocks base method.
func (m *MockMiddleSvcClient) StoreAppOAuth(ctx context.Context, in *pb.AppRequest, opts ...grpc.CallOption) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreAppOAuth", varargs...)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAppOAuth indicates an expected call of StoreAppOAuth.
func (mr *MockMiddleSvcClientMockRecorder) StoreAppOAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAppOAuth", reflect.TypeOf((*MockMiddleSvcClient)(nil).StoreAppOAuth), varargs...)
}

// MockMiddleSvcServer is a mock of MiddleSvcServer interface.
type MockMiddleSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockMiddleSvcServerMockRecorder
}

// MockMiddleSvcServerMockRecorder is the mock recorder for MockMiddleSvcServer.
type MockMiddleSvcServerMockRecorder struct {
	mock *MockMiddleSvcServer
}

// NewMockMiddleSvcServer creates a new mock instance.
func NewMockMiddleSvcServer(ctrl *gomock.Controller) *MockMiddleSvcServer {
	mock := &MockMiddleSvcServer{ctrl: ctrl}
	mock.recorder = &MockMiddleSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleSvcServer) EXPECT() *MockMiddleSvcServerMockRecorder {
	return m.recorder
}

// CloseSubscribe mocks base method.
func (m *MockMiddleSvcServer) CloseSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSubscribe indicates an expected call of CloseSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) CloseSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).CloseSubscribe), arg0, arg1)
}

// CreateCredential mocks base method.
func (m *MockMiddleSvcServer) CreateCredential(arg0 context.Context, arg1 *pb.KVsRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockMiddleSvcServerMockRecorder) CreateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreateCredential), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockMiddleSvcServer) CreatePage(arg0 context.Context, arg1 *pb.PageRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockMiddleSvcServerMockRecorder) CreatePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreatePage), arg0, arg1)
}

// CreateSetting mocks base method.
func (m *MockMiddleSvcServer) CreateSetting(arg0 context.Context, arg1 *pb.KVRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSetting indicates an expected call of CreateSetting.
func (mr *MockMiddleSvcServerMockRecorder) CreateSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetting", reflect.TypeOf((*MockMiddleSvcServer)(nil).CreateSetting), arg0, arg1)
}

// GetApps mocks base method.
func (m *MockMiddleSvcServer) GetApps(arg0 context.Context, arg1 *pb.TextRequest) (*pb.AppsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", arg0, arg1)
	ret0, _ := ret[0].(*pb.AppsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockMiddleSvcServerMockRecorder) GetApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetApps), arg0, arg1)
}

// GetAvailableApp mocks base method.
func (m *MockMiddleSvcServer) GetAvailableApp(arg0 context.Context, arg1 *pb.TextRequest) (*pb.AppReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableApp", arg0, arg1)
	ret0, _ := ret[0].(*pb.AppReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableApp indicates an expected call of GetAvailableApp.
func (mr *MockMiddleSvcServerMockRecorder) GetAvailableApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableApp", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetAvailableApp), arg0, arg1)
}

// GetChartData mocks base method.
func (m *MockMiddleSvcServer) GetChartData(arg0 context.Context, arg1 *pb.ChartDataRequest) (*pb.ChartDataReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartData", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChartDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartData indicates an expected call of GetChartData.
func (mr *MockMiddleSvcServerMockRecorder) GetChartData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartData", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetChartData), arg0, arg1)
}

// GetChartUrl mocks base method.
func (m *MockMiddleSvcServer) GetChartUrl(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartUrl", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartUrl indicates an expected call of GetChartUrl.
func (mr *MockMiddleSvcServerMockRecorder) GetChartUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartUrl", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetChartUrl), arg0, arg1)
}

// GetCredential mocks base method.
func (m *MockMiddleSvcServer) GetCredential(arg0 context.Context, arg1 *pb.CredentialRequest) (*pb.CredentialReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", arg0, arg1)
	ret0, _ := ret[0].(*pb.CredentialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockMiddleSvcServerMockRecorder) GetCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetCredential), arg0, arg1)
}

// GetCredentials mocks base method.
func (m *MockMiddleSvcServer) GetCredentials(arg0 context.Context, arg1 *pb.TextRequest) (*pb.CredentialsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1)
	ret0, _ := ret[0].(*pb.CredentialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockMiddleSvcServerMockRecorder) GetCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetCredentials), arg0, arg1)
}

// GetCronStatus mocks base method.
func (m *MockMiddleSvcServer) GetCronStatus(arg0 context.Context, arg1 *pb.CronRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCronStatus", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCronStatus indicates an expected call of GetCronStatus.
func (mr *MockMiddleSvcServerMockRecorder) GetCronStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCronStatus", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetCronStatus), arg0, arg1)
}

// GetMaskingCredentials mocks base method.
func (m *MockMiddleSvcServer) GetMaskingCredentials(arg0 context.Context, arg1 *pb.TextRequest) (*pb.MaskingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskingCredentials", arg0, arg1)
	ret0, _ := ret[0].(*pb.MaskingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaskingCredentials indicates an expected call of GetMaskingCredentials.
func (mr *MockMiddleSvcServerMockRecorder) GetMaskingCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskingCredentials", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetMaskingCredentials), arg0, arg1)
}

// GetOrCreateTag mocks base method.
func (m *MockMiddleSvcServer) GetOrCreateTag(arg0 context.Context, arg1 *pb.TagRequest) (*pb.TagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTag", arg0, arg1)
	ret0, _ := ret[0].(*pb.TagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTag indicates an expected call of GetOrCreateTag.
func (mr *MockMiddleSvcServerMockRecorder) GetOrCreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTag", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetOrCreateTag), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockMiddleSvcServer) GetPage(arg0 context.Context, arg1 *pb.PageRequest) (*pb.PageReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*pb.PageReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockMiddleSvcServerMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetPage), arg0, arg1)
}

// GetQrUrl mocks base method.
func (m *MockMiddleSvcServer) GetQrUrl(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQrUrl", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQrUrl indicates an expected call of GetQrUrl.
func (mr *MockMiddleSvcServerMockRecorder) GetQrUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrUrl", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetQrUrl), arg0, arg1)
}

// GetSetting mocks base method.
func (m *MockMiddleSvcServer) GetSetting(arg0 context.Context, arg1 *pb.TextRequest) (*pb.SettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetting", arg0, arg1)
	ret0, _ := ret[0].(*pb.SettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockMiddleSvcServerMockRecorder) GetSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSetting), arg0, arg1)
}

// GetSettings mocks base method.
func (m *MockMiddleSvcServer) GetSettings(arg0 context.Context, arg1 *pb.TextRequest) (*pb.SettingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0, arg1)
	ret0, _ := ret[0].(*pb.SettingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockMiddleSvcServerMockRecorder) GetSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSettings), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockMiddleSvcServer) GetStats(arg0 context.Context, arg1 *pb.TextRequest) (*pb.TextReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1)
	ret0, _ := ret[0].(*pb.TextReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockMiddleSvcServerMockRecorder) GetStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetStats), arg0, arg1)
}

// GetSubscribeStatus mocks base method.
func (m *MockMiddleSvcServer) GetSubscribeStatus(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribeStatus", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribeStatus indicates an expected call of GetSubscribeStatus.
func (mr *MockMiddleSvcServerMockRecorder) GetSubscribeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribeStatus", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetSubscribeStatus), arg0, arg1)
}

// GetTags mocks base method.
func (m *MockMiddleSvcServer) GetTags(arg0 context.Context, arg1 *pb.TagRequest) (*pb.TagsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].(*pb.TagsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockMiddleSvcServerMockRecorder) GetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockMiddleSvcServer)(nil).GetTags), arg0, arg1)
}

// ListCron mocks base method.
func (m *MockMiddleSvcServer) ListCron(arg0 context.Context, arg1 *pb.CronRequest) (*pb.CronReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCron", arg0, arg1)
	ret0, _ := ret[0].(*pb.CronReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCron indicates an expected call of ListCron.
func (mr *MockMiddleSvcServerMockRecorder) ListCron(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCron", reflect.TypeOf((*MockMiddleSvcServer)(nil).ListCron), arg0, arg1)
}

// ListSubscribe mocks base method.
func (m *MockMiddleSvcServer) ListSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.SubscribeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.SubscribeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribe indicates an expected call of ListSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) ListSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).ListSubscribe), arg0, arg1)
}

// OpenSubscribe mocks base method.
func (m *MockMiddleSvcServer) OpenSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSubscribe indicates an expected call of OpenSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) OpenSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).OpenSubscribe), arg0, arg1)
}

// RegisterCron mocks base method.
func (m *MockMiddleSvcServer) RegisterCron(arg0 context.Context, arg1 *pb.CronRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCron", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCron indicates an expected call of RegisterCron.
func (mr *MockMiddleSvcServerMockRecorder) RegisterCron(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCron", reflect.TypeOf((*MockMiddleSvcServer)(nil).RegisterCron), arg0, arg1)
}

// RegisterSubscribe mocks base method.
func (m *MockMiddleSvcServer) RegisterSubscribe(arg0 context.Context, arg1 *pb.SubscribeRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscribe indicates an expected call of RegisterSubscribe.
func (mr *MockMiddleSvcServerMockRecorder) RegisterSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscribe", reflect.TypeOf((*MockMiddleSvcServer)(nil).RegisterSubscribe), arg0, arg1)
}

// SaveModelTag mocks base method.
func (m *MockMiddleSvcServer) SaveModelTag(arg0 context.Context, arg1 *pb.ModelTagRequest) (*pb.ModelTagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveModelTag", arg0, arg1)
	ret0, _ := ret[0].(*pb.ModelTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveModelTag indicates an expected call of SaveModelTag.
func (mr *MockMiddleSvcServerMockRecorder) SaveModelTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveModelTag", reflect.TypeOf((*MockMiddleSvcServer)(nil).SaveModelTag), arg0, arg1)
}

// SetChartData mocks base method.
func (m *MockMiddleSvcServer) SetChartData(arg0 context.Context, arg1 *pb.ChartDataRequest) (*pb.ChartDataReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChartData", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChartDataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChartData indicates an expected call of SetChartData.
func (mr *MockMiddleSvcServerMockRecorder) SetChartData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChartData", reflect.TypeOf((*MockMiddleSvcServer)(nil).SetChartData), arg0, arg1)
}

// StartCron mocks base method.
func (m *MockMiddleSvcServer) StartCron(arg0 context.Context, arg1 *pb.CronRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCron", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCron indicates an expected call of StartCron.
func (mr *MockMiddleSvcServerMockRecorder) StartCron(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCron", reflect.TypeOf((*MockMiddleSvcServer)(nil).StartCron), arg0, arg1)
}

// StopCron mocks base method.
func (m *MockMiddleSvcServer) StopCron(arg0 context.Context, arg1 *pb.CronRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCron", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCron indicates an expected call of StopCron.
func (mr *MockMiddleSvcServerMockRecorder) StopCron(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCron", reflect.TypeOf((*MockMiddleSvcServer)(nil).StopCron), arg0, arg1)
}

// StoreAppOAuth mocks base method.
func (m *MockMiddleSvcServer) StoreAppOAuth(arg0 context.Context, arg1 *pb.AppRequest) (*pb.StateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAppOAuth", arg0, arg1)
	ret0, _ := ret[0].(*pb.StateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAppOAuth indicates an expected call of StoreAppOAuth.
func (mr *MockMiddleSvcServerMockRecorder) StoreAppOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAppOAuth", reflect.TypeOf((*MockMiddleSvcServer)(nil).StoreAppOAuth), arg0, arg1)
}

// MockUnsafeMiddleSvcServer is a mock of UnsafeMiddleSvcServer interface.
type MockUnsafeMiddleSvcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMiddleSvcServerMockRecorder
}

// MockUnsafeMiddleSvcServerMockRecorder is the mock recorder for MockUnsafeMiddleSvcServer.
type MockUnsafeMiddleSvcServerMockRecorder struct {
	mock *MockUnsafeMiddleSvcServer
}

// NewMockUnsafeMiddleSvcServer creates a new mock instance.
func NewMockUnsafeMiddleSvcServer(ctrl *gomock.Controller) *MockUnsafeMiddleSvcServer {
	mock := &MockUnsafeMiddleSvcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMiddleSvcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMiddleSvcServer) EXPECT() *MockUnsafeMiddleSvcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMiddleSvcServer mocks base method.
func (m *MockUnsafeMiddleSvcServer) mustEmbedUnimplementedMiddleSvcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMiddleSvcServer")
}

// mustEmbedUnimplementedMiddleSvcServer indicates an expected call of mustEmbedUnimplementedMiddleSvcServer.
func (mr *MockUnsafeMiddleSvcServerMockRecorder) mustEmbedUnimplementedMiddleSvcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMiddleSvcServer", reflect.TypeOf((*MockUnsafeMiddleSvcServer)(nil).mustEmbedUnimplementedMiddleSvcServer))
}
